//// Automatically Generated From RawSyntaxNodes.swift.gyb.
//// Do Not Edit Directly!
//===------ RawSyntaxNodes.swift - Typed Raw Syntax Node definitions  ------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2022 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

@_spi(RawSyntax)
public protocol RawDeclSyntaxNodeProtocol: RawSyntaxNodeProtocol {}
@_spi(RawSyntax)
public protocol RawExprSyntaxNodeProtocol: RawSyntaxNodeProtocol {}
@_spi(RawSyntax)
public protocol RawStmtSyntaxNodeProtocol: RawSyntaxNodeProtocol {}
@_spi(RawSyntax)
public protocol RawTypeSyntaxNodeProtocol: RawSyntaxNodeProtocol {}
@_spi(RawSyntax)
public protocol RawPatternSyntaxNodeProtocol: RawSyntaxNodeProtocol {}


@_spi(RawSyntax)
public struct RawDeclSyntax: RawDeclSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = DeclSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    switch raw.kind {
    case .unknownDecl, .missingDecl, .typealiasDecl, .associatedtypeDecl, .ifConfigDecl, .poundErrorDecl, .poundWarningDecl, .poundSourceLocation, .classDecl, .actorDecl, .structDecl, .protocolDecl, .extensionDecl, .functionDecl, .initializerDecl, .deinitializerDecl, .subscriptDecl, .importDecl, .accessorDecl, .variableDecl, .enumCaseDecl, .enumDecl, .operatorDecl, .precedenceGroupDecl, .macroExpansionDecl: return true
    default: return false
    }
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init<Node: RawDeclSyntaxNodeProtocol>(_ other: Node) {
    self.init(raw: other.raw)
  }
}

@_spi(RawSyntax)
public struct RawExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    switch raw.kind {
    case .unknownExpr, .missingExpr, .inOutExpr, .poundColumnExpr, .tryExpr, .awaitExpr, .moveExpr, .identifierExpr, .superRefExpr, .nilLiteralExpr, .discardAssignmentExpr, .assignmentExpr, .sequenceExpr, .poundLineExpr, .poundFileExpr, .poundFileIDExpr, .poundFilePathExpr, .poundFunctionExpr, .poundDsohandleExpr, .symbolicReferenceExpr, .prefixOperatorExpr, .binaryOperatorExpr, .arrowExpr, .infixOperatorExpr, .floatLiteralExpr, .tupleExpr, .arrayExpr, .dictionaryExpr, .integerLiteralExpr, .booleanLiteralExpr, .unresolvedTernaryExpr, .ternaryExpr, .memberAccessExpr, .unresolvedIsExpr, .isExpr, .unresolvedAsExpr, .asExpr, .typeExpr, .closureExpr, .unresolvedPatternExpr, .functionCallExpr, .subscriptExpr, .optionalChainingExpr, .forcedValueExpr, .postfixUnaryExpr, .specializeExpr, .stringLiteralExpr, .regexLiteralExpr, .keyPathExpr, .oldKeyPathExpr, .keyPathBaseExpr, .objcKeyPathExpr, .objcSelectorExpr, .macroExpansionExpr, .postfixIfConfigExpr, .editorPlaceholderExpr, .objectLiteralExpr: return true
    default: return false
    }
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init<Node: RawExprSyntaxNodeProtocol>(_ other: Node) {
    self.init(raw: other.raw)
  }
}

@_spi(RawSyntax)
public struct RawStmtSyntax: RawStmtSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = StmtSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    switch raw.kind {
    case .unknownStmt, .missingStmt, .labeledStmt, .continueStmt, .whileStmt, .deferStmt, .expressionStmt, .repeatWhileStmt, .guardStmt, .forInStmt, .switchStmt, .doStmt, .returnStmt, .yieldStmt, .fallthroughStmt, .breakStmt, .declarationStmt, .throwStmt, .ifStmt, .poundAssertStmt: return true
    default: return false
    }
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init<Node: RawStmtSyntaxNodeProtocol>(_ other: Node) {
    self.init(raw: other.raw)
  }
}

@_spi(RawSyntax)
public struct RawTypeSyntax: RawTypeSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = TypeSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    switch raw.kind {
    case .unknownType, .missingType, .simpleTypeIdentifier, .memberTypeIdentifier, .classRestrictionType, .arrayType, .dictionaryType, .metatypeType, .optionalType, .constrainedSugarType, .implicitlyUnwrappedOptionalType, .compositionType, .packExpansionType, .tupleType, .functionType, .attributedType, .namedOpaqueReturnType: return true
    default: return false
    }
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init<Node: RawTypeSyntaxNodeProtocol>(_ other: Node) {
    self.init(raw: other.raw)
  }
}

@_spi(RawSyntax)
public struct RawPatternSyntax: RawPatternSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = PatternSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    switch raw.kind {
    case .unknownPattern, .missingPattern, .enumCasePattern, .isTypePattern, .optionalPattern, .identifierPattern, .asTypePattern, .tuplePattern, .wildcardPattern, .expressionPattern, .valueBindingPattern: return true
    default: return false
    }
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init<Node: RawPatternSyntaxNodeProtocol>(_ other: Node) {
    self.init(raw: other.raw)
  }
}

@_spi(RawSyntax)
public struct RawUnknownDeclSyntax: RawDeclSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = UnknownDeclSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .unknownDecl
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

}

@_spi(RawSyntax)
public struct RawUnknownExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = UnknownExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .unknownExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

}

@_spi(RawSyntax)
public struct RawUnknownStmtSyntax: RawStmtSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = UnknownStmtSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .unknownStmt
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

}

@_spi(RawSyntax)
public struct RawUnknownTypeSyntax: RawTypeSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = UnknownTypeSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .unknownType
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

}

@_spi(RawSyntax)
public struct RawUnknownPatternSyntax: RawPatternSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = UnknownPatternSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .unknownPattern
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

}

@_spi(RawSyntax)
public struct RawMissingSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = MissingSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .missing
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeEmptyLayout(kind: .missing, arena: arena)
    self.init(raw: raw)
  }

}

@_spi(RawSyntax)
public struct RawMissingDeclSyntax: RawDeclSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = MissingDeclSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .missingDecl
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? = nil,
    attributes: RawAttributeListSyntax?,
    _ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? = nil,
    modifiers: RawModifierListSyntax?,
    _ unexpectedAfterModifiers: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .missingDecl, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeAttributes?.raw
      layout[1] = attributes?.raw
      layout[2] = unexpectedBetweenAttributesAndModifiers?.raw
      layout[3] = modifiers?.raw
      layout[4] = unexpectedAfterModifiers?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeAttributes(_ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMissingDeclSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeAttributes.map(RawSyntax.init), arena: arena).as(RawMissingDeclSyntax.self)!
  }
  public var attributes: RawAttributeListSyntax? {
    layoutView.children[1].map(RawAttributeListSyntax.init(raw:))
  }
  public func withAttributes(_ attributes: RawAttributeListSyntax?, arena: SyntaxArena) -> RawMissingDeclSyntax {
    return layoutView.replacingChild(at: 1, with: attributes.map(RawSyntax.init), arena: arena).as(RawMissingDeclSyntax.self)!
  }
  public var unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAttributesAndModifiers(_ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMissingDeclSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenAttributesAndModifiers.map(RawSyntax.init), arena: arena).as(RawMissingDeclSyntax.self)!
  }
  public var modifiers: RawModifierListSyntax? {
    layoutView.children[3].map(RawModifierListSyntax.init(raw:))
  }
  public func withModifiers(_ modifiers: RawModifierListSyntax?, arena: SyntaxArena) -> RawMissingDeclSyntax {
    return layoutView.replacingChild(at: 3, with: modifiers.map(RawSyntax.init), arena: arena).as(RawMissingDeclSyntax.self)!
  }
  public var unexpectedAfterModifiers: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterModifiers(_ unexpectedAfterModifiers: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMissingDeclSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterModifiers.map(RawSyntax.init), arena: arena).as(RawMissingDeclSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawMissingExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = MissingExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .missingExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeEmptyLayout(kind: .missingExpr, arena: arena)
    self.init(raw: raw)
  }

}

@_spi(RawSyntax)
public struct RawMissingStmtSyntax: RawStmtSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = MissingStmtSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .missingStmt
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeEmptyLayout(kind: .missingStmt, arena: arena)
    self.init(raw: raw)
  }

}

@_spi(RawSyntax)
public struct RawMissingTypeSyntax: RawTypeSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = MissingTypeSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .missingType
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeEmptyLayout(kind: .missingType, arena: arena)
    self.init(raw: raw)
  }

}

@_spi(RawSyntax)
public struct RawMissingPatternSyntax: RawPatternSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = MissingPatternSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .missingPattern
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeEmptyLayout(kind: .missingPattern, arena: arena)
    self.init(raw: raw)
  }

}

@_spi(RawSyntax)
public struct RawCodeBlockItemSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public enum Item: RawSyntaxNodeProtocol {
    case `decl`(RawDeclSyntax)
    case `stmt`(RawStmtSyntax)
    case `expr`(RawExprSyntax)
    case `tokenList`(RawTokenListSyntax)
    case `nonEmptyTokenList`(RawNonEmptyTokenListSyntax)

    public static func isKindOf(_ raw: RawSyntax) -> Bool {
      return RawDeclSyntax.isKindOf(raw) || RawStmtSyntax.isKindOf(raw) || RawExprSyntax.isKindOf(raw) || RawTokenListSyntax.isKindOf(raw) || RawNonEmptyTokenListSyntax.isKindOf(raw)
    }

    public var raw: RawSyntax {
      switch self {
      case .decl(let node): return node.raw
      case .stmt(let node): return node.raw
      case .expr(let node): return node.raw
      case .tokenList(let node): return node.raw
      case .nonEmptyTokenList(let node): return node.raw
      }
    }

    public init?<T>(_ other: T) where T : RawSyntaxNodeProtocol {
      if let node = RawDeclSyntax(other) {
        self = .decl(node)
        return
      }
      if let node = RawStmtSyntax(other) {
        self = .stmt(node)
        return
      }
      if let node = RawExprSyntax(other) {
        self = .expr(node)
        return
      }
      if let node = RawTokenListSyntax(other) {
        self = .tokenList(node)
        return
      }
      if let node = RawNonEmptyTokenListSyntax(other) {
        self = .nonEmptyTokenList(node)
        return
      }
      return nil
    }
  }

  public typealias SyntaxType = CodeBlockItemSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .codeBlockItem
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeItem: RawUnexpectedNodesSyntax? = nil,
    item: Item,
    _ unexpectedBetweenItemAndSemicolon: RawUnexpectedNodesSyntax? = nil,
    semicolon: RawTokenSyntax?,
    _ unexpectedBetweenSemicolonAndErrorTokens: RawUnexpectedNodesSyntax? = nil,
    errorTokens: RawSyntax?,
    _ unexpectedAfterErrorTokens: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .codeBlockItem, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeItem?.raw
      layout[1] = item.raw
      layout[2] = unexpectedBetweenItemAndSemicolon?.raw
      layout[3] = semicolon?.raw
      layout[4] = unexpectedBetweenSemicolonAndErrorTokens?.raw
      layout[5] = errorTokens?.raw
      layout[6] = unexpectedAfterErrorTokens?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeItem: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeItem(_ unexpectedBeforeItem: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawCodeBlockItemSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeItem.map(RawSyntax.init), arena: arena).as(RawCodeBlockItemSyntax.self)!
  }
  public var item: RawSyntax {
    layoutView.children[1]!
  }
  public func withItem(_ item: RawSyntax, arena: SyntaxArena) -> RawCodeBlockItemSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(item), arena: arena).as(RawCodeBlockItemSyntax.self)!
  }
  public var unexpectedBetweenItemAndSemicolon: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenItemAndSemicolon(_ unexpectedBetweenItemAndSemicolon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawCodeBlockItemSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenItemAndSemicolon.map(RawSyntax.init), arena: arena).as(RawCodeBlockItemSyntax.self)!
  }
  public var semicolon: RawTokenSyntax? {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))
  }
  public func withSemicolon(_ semicolon: RawTokenSyntax?, arena: SyntaxArena) -> RawCodeBlockItemSyntax {
    return layoutView.replacingChild(at: 3, with: semicolon.map(RawSyntax.init), arena: arena).as(RawCodeBlockItemSyntax.self)!
  }
  public var unexpectedBetweenSemicolonAndErrorTokens: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenSemicolonAndErrorTokens(_ unexpectedBetweenSemicolonAndErrorTokens: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawCodeBlockItemSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenSemicolonAndErrorTokens.map(RawSyntax.init), arena: arena).as(RawCodeBlockItemSyntax.self)!
  }
  public var errorTokens: RawSyntax? {
    layoutView.children[5]
  }
  public func withErrorTokens(_ errorTokens: RawSyntax?, arena: SyntaxArena) -> RawCodeBlockItemSyntax {
    return layoutView.replacingChild(at: 5, with: errorTokens.map(RawSyntax.init), arena: arena).as(RawCodeBlockItemSyntax.self)!
  }
  public var unexpectedAfterErrorTokens: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterErrorTokens(_ unexpectedAfterErrorTokens: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawCodeBlockItemSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterErrorTokens.map(RawSyntax.init), arena: arena).as(RawCodeBlockItemSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawCodeBlockItemListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = CodeBlockItemListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .codeBlockItemList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawCodeBlockItemSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .codeBlockItemList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawCodeBlockItemSyntax] {
    layoutView.children.map { RawCodeBlockItemSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawCodeBlockSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = CodeBlockSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .codeBlock
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeLeftBrace: RawUnexpectedNodesSyntax? = nil,
    leftBrace: RawTokenSyntax,
    _ unexpectedBetweenLeftBraceAndStatements: RawUnexpectedNodesSyntax? = nil,
    statements: RawCodeBlockItemListSyntax,
    _ unexpectedBetweenStatementsAndRightBrace: RawUnexpectedNodesSyntax? = nil,
    rightBrace: RawTokenSyntax,
    _ unexpectedAfterRightBrace: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .codeBlock, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeLeftBrace?.raw
      layout[1] = leftBrace.raw
      layout[2] = unexpectedBetweenLeftBraceAndStatements?.raw
      layout[3] = statements.raw
      layout[4] = unexpectedBetweenStatementsAndRightBrace?.raw
      layout[5] = rightBrace.raw
      layout[6] = unexpectedAfterRightBrace?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeLeftBrace: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeLeftBrace(_ unexpectedBeforeLeftBrace: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawCodeBlockSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeLeftBrace.map(RawSyntax.init), arena: arena).as(RawCodeBlockSyntax.self)!
  }
  public var leftBrace: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeftBrace(_ leftBrace: RawTokenSyntax, arena: SyntaxArena) -> RawCodeBlockSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(leftBrace), arena: arena).as(RawCodeBlockSyntax.self)!
  }
  public var unexpectedBetweenLeftBraceAndStatements: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftBraceAndStatements(_ unexpectedBetweenLeftBraceAndStatements: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawCodeBlockSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenLeftBraceAndStatements.map(RawSyntax.init), arena: arena).as(RawCodeBlockSyntax.self)!
  }
  public var statements: RawCodeBlockItemListSyntax {
    layoutView.children[3].map(RawCodeBlockItemListSyntax.init(raw:))!
  }
  public func withStatements(_ statements: RawCodeBlockItemListSyntax, arena: SyntaxArena) -> RawCodeBlockSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(statements), arena: arena).as(RawCodeBlockSyntax.self)!
  }
  public var unexpectedBetweenStatementsAndRightBrace: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenStatementsAndRightBrace(_ unexpectedBetweenStatementsAndRightBrace: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawCodeBlockSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenStatementsAndRightBrace.map(RawSyntax.init), arena: arena).as(RawCodeBlockSyntax.self)!
  }
  public var rightBrace: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withRightBrace(_ rightBrace: RawTokenSyntax, arena: SyntaxArena) -> RawCodeBlockSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(rightBrace), arena: arena).as(RawCodeBlockSyntax.self)!
  }
  public var unexpectedAfterRightBrace: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightBrace(_ unexpectedAfterRightBrace: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawCodeBlockSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterRightBrace.map(RawSyntax.init), arena: arena).as(RawCodeBlockSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawUnexpectedNodesSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = UnexpectedNodesSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .unexpectedNodes
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .unexpectedNodes, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawSyntax] {
    layoutView.children.map { RawSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawInOutExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = InOutExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .inOutExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeAmpersand: RawUnexpectedNodesSyntax? = nil,
    ampersand: RawTokenSyntax,
    _ unexpectedBetweenAmpersandAndExpression: RawUnexpectedNodesSyntax? = nil,
    expression: RawExprSyntax,
    _ unexpectedAfterExpression: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .inOutExpr, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeAmpersand?.raw
      layout[1] = ampersand.raw
      layout[2] = unexpectedBetweenAmpersandAndExpression?.raw
      layout[3] = expression.raw
      layout[4] = unexpectedAfterExpression?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeAmpersand: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeAmpersand(_ unexpectedBeforeAmpersand: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawInOutExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeAmpersand.map(RawSyntax.init), arena: arena).as(RawInOutExprSyntax.self)!
  }
  public var ampersand: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withAmpersand(_ ampersand: RawTokenSyntax, arena: SyntaxArena) -> RawInOutExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(ampersand), arena: arena).as(RawInOutExprSyntax.self)!
  }
  public var unexpectedBetweenAmpersandAndExpression: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAmpersandAndExpression(_ unexpectedBetweenAmpersandAndExpression: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawInOutExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenAmpersandAndExpression.map(RawSyntax.init), arena: arena).as(RawInOutExprSyntax.self)!
  }
  public var expression: RawExprSyntax {
    layoutView.children[3].map(RawExprSyntax.init(raw:))!
  }
  public func withExpression(_ expression: RawExprSyntax, arena: SyntaxArena) -> RawInOutExprSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(expression), arena: arena).as(RawInOutExprSyntax.self)!
  }
  public var unexpectedAfterExpression: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterExpression(_ unexpectedAfterExpression: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawInOutExprSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterExpression.map(RawSyntax.init), arena: arena).as(RawInOutExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawPoundColumnExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = PoundColumnExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .poundColumnExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforePoundColumn: RawUnexpectedNodesSyntax? = nil,
    poundColumn: RawTokenSyntax,
    _ unexpectedAfterPoundColumn: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .poundColumnExpr, uninitializedCount: 3, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforePoundColumn?.raw
      layout[1] = poundColumn.raw
      layout[2] = unexpectedAfterPoundColumn?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforePoundColumn: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforePoundColumn(_ unexpectedBeforePoundColumn: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundColumnExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforePoundColumn.map(RawSyntax.init), arena: arena).as(RawPoundColumnExprSyntax.self)!
  }
  public var poundColumn: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withPoundColumn(_ poundColumn: RawTokenSyntax, arena: SyntaxArena) -> RawPoundColumnExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(poundColumn), arena: arena).as(RawPoundColumnExprSyntax.self)!
  }
  public var unexpectedAfterPoundColumn: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterPoundColumn(_ unexpectedAfterPoundColumn: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundColumnExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedAfterPoundColumn.map(RawSyntax.init), arena: arena).as(RawPoundColumnExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawTupleExprElementListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = TupleExprElementListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .tupleExprElementList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawTupleExprElementSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .tupleExprElementList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawTupleExprElementSyntax] {
    layoutView.children.map { RawTupleExprElementSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawArrayElementListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ArrayElementListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .arrayElementList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawArrayElementSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .arrayElementList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawArrayElementSyntax] {
    layoutView.children.map { RawArrayElementSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawDictionaryElementListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = DictionaryElementListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .dictionaryElementList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawDictionaryElementSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .dictionaryElementList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawDictionaryElementSyntax] {
    layoutView.children.map { RawDictionaryElementSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawStringLiteralSegmentsSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public enum Element: RawSyntaxNodeProtocol {
    case `stringSegment`(RawStringSegmentSyntax)
    case `expressionSegment`(RawExpressionSegmentSyntax)

    public static func isKindOf(_ raw: RawSyntax) -> Bool {
      return RawStringSegmentSyntax.isKindOf(raw) || RawExpressionSegmentSyntax.isKindOf(raw)
    }

    public var raw: RawSyntax {
      switch self {
      case .stringSegment(let node): return node.raw
      case .expressionSegment(let node): return node.raw
      }
    }

    public init?<T>(_ other: T) where T : RawSyntaxNodeProtocol {
      if let node = RawStringSegmentSyntax(other) {
        self = .stringSegment(node)
        return
      }
      if let node = RawExpressionSegmentSyntax(other) {
        self = .expressionSegment(node)
        return
      }
      return nil
    }
  }

  public typealias SyntaxType = StringLiteralSegmentsSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .stringLiteralSegments
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [Element], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .stringLiteralSegments, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawSyntax] {
    layoutView.children.map { RawSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawTryExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = TryExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .tryExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeTryKeyword: RawUnexpectedNodesSyntax? = nil,
    tryKeyword: RawTokenSyntax,
    _ unexpectedBetweenTryKeywordAndQuestionOrExclamationMark: RawUnexpectedNodesSyntax? = nil,
    questionOrExclamationMark: RawTokenSyntax?,
    _ unexpectedBetweenQuestionOrExclamationMarkAndExpression: RawUnexpectedNodesSyntax? = nil,
    expression: RawExprSyntax,
    _ unexpectedAfterExpression: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .tryExpr, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeTryKeyword?.raw
      layout[1] = tryKeyword.raw
      layout[2] = unexpectedBetweenTryKeywordAndQuestionOrExclamationMark?.raw
      layout[3] = questionOrExclamationMark?.raw
      layout[4] = unexpectedBetweenQuestionOrExclamationMarkAndExpression?.raw
      layout[5] = expression.raw
      layout[6] = unexpectedAfterExpression?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeTryKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeTryKeyword(_ unexpectedBeforeTryKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTryExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeTryKeyword.map(RawSyntax.init), arena: arena).as(RawTryExprSyntax.self)!
  }
  public var tryKeyword: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withTryKeyword(_ tryKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawTryExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(tryKeyword), arena: arena).as(RawTryExprSyntax.self)!
  }
  public var unexpectedBetweenTryKeywordAndQuestionOrExclamationMark: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenTryKeywordAndQuestionOrExclamationMark(_ unexpectedBetweenTryKeywordAndQuestionOrExclamationMark: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTryExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenTryKeywordAndQuestionOrExclamationMark.map(RawSyntax.init), arena: arena).as(RawTryExprSyntax.self)!
  }
  public var questionOrExclamationMark: RawTokenSyntax? {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))
  }
  public func withQuestionOrExclamationMark(_ questionOrExclamationMark: RawTokenSyntax?, arena: SyntaxArena) -> RawTryExprSyntax {
    return layoutView.replacingChild(at: 3, with: questionOrExclamationMark.map(RawSyntax.init), arena: arena).as(RawTryExprSyntax.self)!
  }
  public var unexpectedBetweenQuestionOrExclamationMarkAndExpression: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenQuestionOrExclamationMarkAndExpression(_ unexpectedBetweenQuestionOrExclamationMarkAndExpression: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTryExprSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenQuestionOrExclamationMarkAndExpression.map(RawSyntax.init), arena: arena).as(RawTryExprSyntax.self)!
  }
  public var expression: RawExprSyntax {
    layoutView.children[5].map(RawExprSyntax.init(raw:))!
  }
  public func withExpression(_ expression: RawExprSyntax, arena: SyntaxArena) -> RawTryExprSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(expression), arena: arena).as(RawTryExprSyntax.self)!
  }
  public var unexpectedAfterExpression: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterExpression(_ unexpectedAfterExpression: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTryExprSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterExpression.map(RawSyntax.init), arena: arena).as(RawTryExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawAwaitExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = AwaitExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .awaitExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeAwaitKeyword: RawUnexpectedNodesSyntax? = nil,
    awaitKeyword: RawTokenSyntax,
    _ unexpectedBetweenAwaitKeywordAndExpression: RawUnexpectedNodesSyntax? = nil,
    expression: RawExprSyntax,
    _ unexpectedAfterExpression: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .awaitExpr, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeAwaitKeyword?.raw
      layout[1] = awaitKeyword.raw
      layout[2] = unexpectedBetweenAwaitKeywordAndExpression?.raw
      layout[3] = expression.raw
      layout[4] = unexpectedAfterExpression?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeAwaitKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeAwaitKeyword(_ unexpectedBeforeAwaitKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAwaitExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeAwaitKeyword.map(RawSyntax.init), arena: arena).as(RawAwaitExprSyntax.self)!
  }
  public var awaitKeyword: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withAwaitKeyword(_ awaitKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawAwaitExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(awaitKeyword), arena: arena).as(RawAwaitExprSyntax.self)!
  }
  public var unexpectedBetweenAwaitKeywordAndExpression: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAwaitKeywordAndExpression(_ unexpectedBetweenAwaitKeywordAndExpression: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAwaitExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenAwaitKeywordAndExpression.map(RawSyntax.init), arena: arena).as(RawAwaitExprSyntax.self)!
  }
  public var expression: RawExprSyntax {
    layoutView.children[3].map(RawExprSyntax.init(raw:))!
  }
  public func withExpression(_ expression: RawExprSyntax, arena: SyntaxArena) -> RawAwaitExprSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(expression), arena: arena).as(RawAwaitExprSyntax.self)!
  }
  public var unexpectedAfterExpression: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterExpression(_ unexpectedAfterExpression: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAwaitExprSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterExpression.map(RawSyntax.init), arena: arena).as(RawAwaitExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawMoveExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = MoveExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .moveExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeMoveKeyword: RawUnexpectedNodesSyntax? = nil,
    moveKeyword: RawTokenSyntax,
    _ unexpectedBetweenMoveKeywordAndExpression: RawUnexpectedNodesSyntax? = nil,
    expression: RawExprSyntax,
    _ unexpectedAfterExpression: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .moveExpr, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeMoveKeyword?.raw
      layout[1] = moveKeyword.raw
      layout[2] = unexpectedBetweenMoveKeywordAndExpression?.raw
      layout[3] = expression.raw
      layout[4] = unexpectedAfterExpression?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeMoveKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeMoveKeyword(_ unexpectedBeforeMoveKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMoveExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeMoveKeyword.map(RawSyntax.init), arena: arena).as(RawMoveExprSyntax.self)!
  }
  public var moveKeyword: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withMoveKeyword(_ moveKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawMoveExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(moveKeyword), arena: arena).as(RawMoveExprSyntax.self)!
  }
  public var unexpectedBetweenMoveKeywordAndExpression: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenMoveKeywordAndExpression(_ unexpectedBetweenMoveKeywordAndExpression: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMoveExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenMoveKeywordAndExpression.map(RawSyntax.init), arena: arena).as(RawMoveExprSyntax.self)!
  }
  public var expression: RawExprSyntax {
    layoutView.children[3].map(RawExprSyntax.init(raw:))!
  }
  public func withExpression(_ expression: RawExprSyntax, arena: SyntaxArena) -> RawMoveExprSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(expression), arena: arena).as(RawMoveExprSyntax.self)!
  }
  public var unexpectedAfterExpression: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterExpression(_ unexpectedAfterExpression: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMoveExprSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterExpression.map(RawSyntax.init), arena: arena).as(RawMoveExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawDeclNameArgumentSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = DeclNameArgumentSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .declNameArgument
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeName: RawUnexpectedNodesSyntax? = nil,
    name: RawTokenSyntax,
    _ unexpectedBetweenNameAndColon: RawUnexpectedNodesSyntax? = nil,
    colon: RawTokenSyntax,
    _ unexpectedAfterColon: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .declNameArgument, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeName?.raw
      layout[1] = name.raw
      layout[2] = unexpectedBetweenNameAndColon?.raw
      layout[3] = colon.raw
      layout[4] = unexpectedAfterColon?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeName: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeName(_ unexpectedBeforeName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDeclNameArgumentSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeName.map(RawSyntax.init), arena: arena).as(RawDeclNameArgumentSyntax.self)!
  }
  public var name: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withName(_ name: RawTokenSyntax, arena: SyntaxArena) -> RawDeclNameArgumentSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(name), arena: arena).as(RawDeclNameArgumentSyntax.self)!
  }
  public var unexpectedBetweenNameAndColon: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenNameAndColon(_ unexpectedBetweenNameAndColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDeclNameArgumentSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenNameAndColon.map(RawSyntax.init), arena: arena).as(RawDeclNameArgumentSyntax.self)!
  }
  public var colon: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withColon(_ colon: RawTokenSyntax, arena: SyntaxArena) -> RawDeclNameArgumentSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(colon), arena: arena).as(RawDeclNameArgumentSyntax.self)!
  }
  public var unexpectedAfterColon: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterColon(_ unexpectedAfterColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDeclNameArgumentSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterColon.map(RawSyntax.init), arena: arena).as(RawDeclNameArgumentSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawDeclNameArgumentListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = DeclNameArgumentListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .declNameArgumentList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawDeclNameArgumentSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .declNameArgumentList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawDeclNameArgumentSyntax] {
    layoutView.children.map { RawDeclNameArgumentSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawDeclNameArgumentsSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = DeclNameArgumentsSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .declNameArguments
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeLeftParen: RawUnexpectedNodesSyntax? = nil,
    leftParen: RawTokenSyntax,
    _ unexpectedBetweenLeftParenAndArguments: RawUnexpectedNodesSyntax? = nil,
    arguments: RawDeclNameArgumentListSyntax,
    _ unexpectedBetweenArgumentsAndRightParen: RawUnexpectedNodesSyntax? = nil,
    rightParen: RawTokenSyntax,
    _ unexpectedAfterRightParen: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .declNameArguments, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeLeftParen?.raw
      layout[1] = leftParen.raw
      layout[2] = unexpectedBetweenLeftParenAndArguments?.raw
      layout[3] = arguments.raw
      layout[4] = unexpectedBetweenArgumentsAndRightParen?.raw
      layout[5] = rightParen.raw
      layout[6] = unexpectedAfterRightParen?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeLeftParen: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeLeftParen(_ unexpectedBeforeLeftParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDeclNameArgumentsSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeLeftParen.map(RawSyntax.init), arena: arena).as(RawDeclNameArgumentsSyntax.self)!
  }
  public var leftParen: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeftParen(_ leftParen: RawTokenSyntax, arena: SyntaxArena) -> RawDeclNameArgumentsSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(leftParen), arena: arena).as(RawDeclNameArgumentsSyntax.self)!
  }
  public var unexpectedBetweenLeftParenAndArguments: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftParenAndArguments(_ unexpectedBetweenLeftParenAndArguments: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDeclNameArgumentsSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenLeftParenAndArguments.map(RawSyntax.init), arena: arena).as(RawDeclNameArgumentsSyntax.self)!
  }
  public var arguments: RawDeclNameArgumentListSyntax {
    layoutView.children[3].map(RawDeclNameArgumentListSyntax.init(raw:))!
  }
  public func withArguments(_ arguments: RawDeclNameArgumentListSyntax, arena: SyntaxArena) -> RawDeclNameArgumentsSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(arguments), arena: arena).as(RawDeclNameArgumentsSyntax.self)!
  }
  public var unexpectedBetweenArgumentsAndRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenArgumentsAndRightParen(_ unexpectedBetweenArgumentsAndRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDeclNameArgumentsSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenArgumentsAndRightParen.map(RawSyntax.init), arena: arena).as(RawDeclNameArgumentsSyntax.self)!
  }
  public var rightParen: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withRightParen(_ rightParen: RawTokenSyntax, arena: SyntaxArena) -> RawDeclNameArgumentsSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(rightParen), arena: arena).as(RawDeclNameArgumentsSyntax.self)!
  }
  public var unexpectedAfterRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightParen(_ unexpectedAfterRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDeclNameArgumentsSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterRightParen.map(RawSyntax.init), arena: arena).as(RawDeclNameArgumentsSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawIdentifierExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = IdentifierExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .identifierExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeIdentifier: RawUnexpectedNodesSyntax? = nil,
    identifier: RawTokenSyntax,
    _ unexpectedBetweenIdentifierAndDeclNameArguments: RawUnexpectedNodesSyntax? = nil,
    declNameArguments: RawDeclNameArgumentsSyntax?,
    _ unexpectedAfterDeclNameArguments: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .identifierExpr, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeIdentifier?.raw
      layout[1] = identifier.raw
      layout[2] = unexpectedBetweenIdentifierAndDeclNameArguments?.raw
      layout[3] = declNameArguments?.raw
      layout[4] = unexpectedAfterDeclNameArguments?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeIdentifier: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeIdentifier(_ unexpectedBeforeIdentifier: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawIdentifierExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeIdentifier.map(RawSyntax.init), arena: arena).as(RawIdentifierExprSyntax.self)!
  }
  public var identifier: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withIdentifier(_ identifier: RawTokenSyntax, arena: SyntaxArena) -> RawIdentifierExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(identifier), arena: arena).as(RawIdentifierExprSyntax.self)!
  }
  public var unexpectedBetweenIdentifierAndDeclNameArguments: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenIdentifierAndDeclNameArguments(_ unexpectedBetweenIdentifierAndDeclNameArguments: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawIdentifierExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenIdentifierAndDeclNameArguments.map(RawSyntax.init), arena: arena).as(RawIdentifierExprSyntax.self)!
  }
  public var declNameArguments: RawDeclNameArgumentsSyntax? {
    layoutView.children[3].map(RawDeclNameArgumentsSyntax.init(raw:))
  }
  public func withDeclNameArguments(_ declNameArguments: RawDeclNameArgumentsSyntax?, arena: SyntaxArena) -> RawIdentifierExprSyntax {
    return layoutView.replacingChild(at: 3, with: declNameArguments.map(RawSyntax.init), arena: arena).as(RawIdentifierExprSyntax.self)!
  }
  public var unexpectedAfterDeclNameArguments: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterDeclNameArguments(_ unexpectedAfterDeclNameArguments: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawIdentifierExprSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterDeclNameArguments.map(RawSyntax.init), arena: arena).as(RawIdentifierExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawSuperRefExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = SuperRefExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .superRefExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeSuperKeyword: RawUnexpectedNodesSyntax? = nil,
    superKeyword: RawTokenSyntax,
    _ unexpectedAfterSuperKeyword: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .superRefExpr, uninitializedCount: 3, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeSuperKeyword?.raw
      layout[1] = superKeyword.raw
      layout[2] = unexpectedAfterSuperKeyword?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeSuperKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeSuperKeyword(_ unexpectedBeforeSuperKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSuperRefExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeSuperKeyword.map(RawSyntax.init), arena: arena).as(RawSuperRefExprSyntax.self)!
  }
  public var superKeyword: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withSuperKeyword(_ superKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawSuperRefExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(superKeyword), arena: arena).as(RawSuperRefExprSyntax.self)!
  }
  public var unexpectedAfterSuperKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterSuperKeyword(_ unexpectedAfterSuperKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSuperRefExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedAfterSuperKeyword.map(RawSyntax.init), arena: arena).as(RawSuperRefExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawNilLiteralExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = NilLiteralExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .nilLiteralExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeNilKeyword: RawUnexpectedNodesSyntax? = nil,
    nilKeyword: RawTokenSyntax,
    _ unexpectedAfterNilKeyword: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .nilLiteralExpr, uninitializedCount: 3, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeNilKeyword?.raw
      layout[1] = nilKeyword.raw
      layout[2] = unexpectedAfterNilKeyword?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeNilKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeNilKeyword(_ unexpectedBeforeNilKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawNilLiteralExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeNilKeyword.map(RawSyntax.init), arena: arena).as(RawNilLiteralExprSyntax.self)!
  }
  public var nilKeyword: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withNilKeyword(_ nilKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawNilLiteralExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(nilKeyword), arena: arena).as(RawNilLiteralExprSyntax.self)!
  }
  public var unexpectedAfterNilKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterNilKeyword(_ unexpectedAfterNilKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawNilLiteralExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedAfterNilKeyword.map(RawSyntax.init), arena: arena).as(RawNilLiteralExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawDiscardAssignmentExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = DiscardAssignmentExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .discardAssignmentExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeWildcard: RawUnexpectedNodesSyntax? = nil,
    wildcard: RawTokenSyntax,
    _ unexpectedAfterWildcard: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .discardAssignmentExpr, uninitializedCount: 3, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeWildcard?.raw
      layout[1] = wildcard.raw
      layout[2] = unexpectedAfterWildcard?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeWildcard: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeWildcard(_ unexpectedBeforeWildcard: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDiscardAssignmentExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeWildcard.map(RawSyntax.init), arena: arena).as(RawDiscardAssignmentExprSyntax.self)!
  }
  public var wildcard: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withWildcard(_ wildcard: RawTokenSyntax, arena: SyntaxArena) -> RawDiscardAssignmentExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(wildcard), arena: arena).as(RawDiscardAssignmentExprSyntax.self)!
  }
  public var unexpectedAfterWildcard: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterWildcard(_ unexpectedAfterWildcard: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDiscardAssignmentExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedAfterWildcard.map(RawSyntax.init), arena: arena).as(RawDiscardAssignmentExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawAssignmentExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = AssignmentExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .assignmentExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeAssignToken: RawUnexpectedNodesSyntax? = nil,
    assignToken: RawTokenSyntax,
    _ unexpectedAfterAssignToken: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .assignmentExpr, uninitializedCount: 3, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeAssignToken?.raw
      layout[1] = assignToken.raw
      layout[2] = unexpectedAfterAssignToken?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeAssignToken: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeAssignToken(_ unexpectedBeforeAssignToken: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAssignmentExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeAssignToken.map(RawSyntax.init), arena: arena).as(RawAssignmentExprSyntax.self)!
  }
  public var assignToken: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withAssignToken(_ assignToken: RawTokenSyntax, arena: SyntaxArena) -> RawAssignmentExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(assignToken), arena: arena).as(RawAssignmentExprSyntax.self)!
  }
  public var unexpectedAfterAssignToken: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterAssignToken(_ unexpectedAfterAssignToken: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAssignmentExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedAfterAssignToken.map(RawSyntax.init), arena: arena).as(RawAssignmentExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawSequenceExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = SequenceExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .sequenceExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeElements: RawUnexpectedNodesSyntax? = nil,
    elements: RawExprListSyntax,
    _ unexpectedAfterElements: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .sequenceExpr, uninitializedCount: 3, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeElements?.raw
      layout[1] = elements.raw
      layout[2] = unexpectedAfterElements?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeElements: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeElements(_ unexpectedBeforeElements: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSequenceExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeElements.map(RawSyntax.init), arena: arena).as(RawSequenceExprSyntax.self)!
  }
  public var elements: RawExprListSyntax {
    layoutView.children[1].map(RawExprListSyntax.init(raw:))!
  }
  public func withElements(_ elements: RawExprListSyntax, arena: SyntaxArena) -> RawSequenceExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(elements), arena: arena).as(RawSequenceExprSyntax.self)!
  }
  public var unexpectedAfterElements: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterElements(_ unexpectedAfterElements: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSequenceExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedAfterElements.map(RawSyntax.init), arena: arena).as(RawSequenceExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawExprListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ExprListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .exprList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawExprSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .exprList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawExprSyntax] {
    layoutView.children.map { RawExprSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawPoundLineExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = PoundLineExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .poundLineExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforePoundLine: RawUnexpectedNodesSyntax? = nil,
    poundLine: RawTokenSyntax,
    _ unexpectedAfterPoundLine: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .poundLineExpr, uninitializedCount: 3, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforePoundLine?.raw
      layout[1] = poundLine.raw
      layout[2] = unexpectedAfterPoundLine?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforePoundLine: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforePoundLine(_ unexpectedBeforePoundLine: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundLineExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforePoundLine.map(RawSyntax.init), arena: arena).as(RawPoundLineExprSyntax.self)!
  }
  public var poundLine: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withPoundLine(_ poundLine: RawTokenSyntax, arena: SyntaxArena) -> RawPoundLineExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(poundLine), arena: arena).as(RawPoundLineExprSyntax.self)!
  }
  public var unexpectedAfterPoundLine: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterPoundLine(_ unexpectedAfterPoundLine: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundLineExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedAfterPoundLine.map(RawSyntax.init), arena: arena).as(RawPoundLineExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawPoundFileExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = PoundFileExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .poundFileExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforePoundFile: RawUnexpectedNodesSyntax? = nil,
    poundFile: RawTokenSyntax,
    _ unexpectedAfterPoundFile: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .poundFileExpr, uninitializedCount: 3, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforePoundFile?.raw
      layout[1] = poundFile.raw
      layout[2] = unexpectedAfterPoundFile?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforePoundFile: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforePoundFile(_ unexpectedBeforePoundFile: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundFileExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforePoundFile.map(RawSyntax.init), arena: arena).as(RawPoundFileExprSyntax.self)!
  }
  public var poundFile: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withPoundFile(_ poundFile: RawTokenSyntax, arena: SyntaxArena) -> RawPoundFileExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(poundFile), arena: arena).as(RawPoundFileExprSyntax.self)!
  }
  public var unexpectedAfterPoundFile: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterPoundFile(_ unexpectedAfterPoundFile: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundFileExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedAfterPoundFile.map(RawSyntax.init), arena: arena).as(RawPoundFileExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawPoundFileIDExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = PoundFileIDExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .poundFileIDExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforePoundFileID: RawUnexpectedNodesSyntax? = nil,
    poundFileID: RawTokenSyntax,
    _ unexpectedAfterPoundFileID: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .poundFileIDExpr, uninitializedCount: 3, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforePoundFileID?.raw
      layout[1] = poundFileID.raw
      layout[2] = unexpectedAfterPoundFileID?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforePoundFileID: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforePoundFileID(_ unexpectedBeforePoundFileID: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundFileIDExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforePoundFileID.map(RawSyntax.init), arena: arena).as(RawPoundFileIDExprSyntax.self)!
  }
  public var poundFileID: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withPoundFileID(_ poundFileID: RawTokenSyntax, arena: SyntaxArena) -> RawPoundFileIDExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(poundFileID), arena: arena).as(RawPoundFileIDExprSyntax.self)!
  }
  public var unexpectedAfterPoundFileID: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterPoundFileID(_ unexpectedAfterPoundFileID: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundFileIDExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedAfterPoundFileID.map(RawSyntax.init), arena: arena).as(RawPoundFileIDExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawPoundFilePathExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = PoundFilePathExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .poundFilePathExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforePoundFilePath: RawUnexpectedNodesSyntax? = nil,
    poundFilePath: RawTokenSyntax,
    _ unexpectedAfterPoundFilePath: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .poundFilePathExpr, uninitializedCount: 3, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforePoundFilePath?.raw
      layout[1] = poundFilePath.raw
      layout[2] = unexpectedAfterPoundFilePath?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforePoundFilePath: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforePoundFilePath(_ unexpectedBeforePoundFilePath: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundFilePathExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforePoundFilePath.map(RawSyntax.init), arena: arena).as(RawPoundFilePathExprSyntax.self)!
  }
  public var poundFilePath: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withPoundFilePath(_ poundFilePath: RawTokenSyntax, arena: SyntaxArena) -> RawPoundFilePathExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(poundFilePath), arena: arena).as(RawPoundFilePathExprSyntax.self)!
  }
  public var unexpectedAfterPoundFilePath: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterPoundFilePath(_ unexpectedAfterPoundFilePath: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundFilePathExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedAfterPoundFilePath.map(RawSyntax.init), arena: arena).as(RawPoundFilePathExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawPoundFunctionExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = PoundFunctionExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .poundFunctionExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforePoundFunction: RawUnexpectedNodesSyntax? = nil,
    poundFunction: RawTokenSyntax,
    _ unexpectedAfterPoundFunction: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .poundFunctionExpr, uninitializedCount: 3, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforePoundFunction?.raw
      layout[1] = poundFunction.raw
      layout[2] = unexpectedAfterPoundFunction?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforePoundFunction: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforePoundFunction(_ unexpectedBeforePoundFunction: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundFunctionExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforePoundFunction.map(RawSyntax.init), arena: arena).as(RawPoundFunctionExprSyntax.self)!
  }
  public var poundFunction: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withPoundFunction(_ poundFunction: RawTokenSyntax, arena: SyntaxArena) -> RawPoundFunctionExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(poundFunction), arena: arena).as(RawPoundFunctionExprSyntax.self)!
  }
  public var unexpectedAfterPoundFunction: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterPoundFunction(_ unexpectedAfterPoundFunction: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundFunctionExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedAfterPoundFunction.map(RawSyntax.init), arena: arena).as(RawPoundFunctionExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawPoundDsohandleExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = PoundDsohandleExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .poundDsohandleExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforePoundDsohandle: RawUnexpectedNodesSyntax? = nil,
    poundDsohandle: RawTokenSyntax,
    _ unexpectedAfterPoundDsohandle: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .poundDsohandleExpr, uninitializedCount: 3, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforePoundDsohandle?.raw
      layout[1] = poundDsohandle.raw
      layout[2] = unexpectedAfterPoundDsohandle?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforePoundDsohandle: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforePoundDsohandle(_ unexpectedBeforePoundDsohandle: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundDsohandleExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforePoundDsohandle.map(RawSyntax.init), arena: arena).as(RawPoundDsohandleExprSyntax.self)!
  }
  public var poundDsohandle: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withPoundDsohandle(_ poundDsohandle: RawTokenSyntax, arena: SyntaxArena) -> RawPoundDsohandleExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(poundDsohandle), arena: arena).as(RawPoundDsohandleExprSyntax.self)!
  }
  public var unexpectedAfterPoundDsohandle: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterPoundDsohandle(_ unexpectedAfterPoundDsohandle: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundDsohandleExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedAfterPoundDsohandle.map(RawSyntax.init), arena: arena).as(RawPoundDsohandleExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawSymbolicReferenceExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = SymbolicReferenceExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .symbolicReferenceExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeIdentifier: RawUnexpectedNodesSyntax? = nil,
    identifier: RawTokenSyntax,
    _ unexpectedBetweenIdentifierAndGenericArgumentClause: RawUnexpectedNodesSyntax? = nil,
    genericArgumentClause: RawGenericArgumentClauseSyntax?,
    _ unexpectedAfterGenericArgumentClause: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .symbolicReferenceExpr, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeIdentifier?.raw
      layout[1] = identifier.raw
      layout[2] = unexpectedBetweenIdentifierAndGenericArgumentClause?.raw
      layout[3] = genericArgumentClause?.raw
      layout[4] = unexpectedAfterGenericArgumentClause?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeIdentifier: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeIdentifier(_ unexpectedBeforeIdentifier: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSymbolicReferenceExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeIdentifier.map(RawSyntax.init), arena: arena).as(RawSymbolicReferenceExprSyntax.self)!
  }
  public var identifier: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withIdentifier(_ identifier: RawTokenSyntax, arena: SyntaxArena) -> RawSymbolicReferenceExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(identifier), arena: arena).as(RawSymbolicReferenceExprSyntax.self)!
  }
  public var unexpectedBetweenIdentifierAndGenericArgumentClause: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenIdentifierAndGenericArgumentClause(_ unexpectedBetweenIdentifierAndGenericArgumentClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSymbolicReferenceExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenIdentifierAndGenericArgumentClause.map(RawSyntax.init), arena: arena).as(RawSymbolicReferenceExprSyntax.self)!
  }
  public var genericArgumentClause: RawGenericArgumentClauseSyntax? {
    layoutView.children[3].map(RawGenericArgumentClauseSyntax.init(raw:))
  }
  public func withGenericArgumentClause(_ genericArgumentClause: RawGenericArgumentClauseSyntax?, arena: SyntaxArena) -> RawSymbolicReferenceExprSyntax {
    return layoutView.replacingChild(at: 3, with: genericArgumentClause.map(RawSyntax.init), arena: arena).as(RawSymbolicReferenceExprSyntax.self)!
  }
  public var unexpectedAfterGenericArgumentClause: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterGenericArgumentClause(_ unexpectedAfterGenericArgumentClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSymbolicReferenceExprSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterGenericArgumentClause.map(RawSyntax.init), arena: arena).as(RawSymbolicReferenceExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawPrefixOperatorExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = PrefixOperatorExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .prefixOperatorExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeOperatorToken: RawUnexpectedNodesSyntax? = nil,
    operatorToken: RawTokenSyntax?,
    _ unexpectedBetweenOperatorTokenAndPostfixExpression: RawUnexpectedNodesSyntax? = nil,
    postfixExpression: RawExprSyntax,
    _ unexpectedAfterPostfixExpression: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .prefixOperatorExpr, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeOperatorToken?.raw
      layout[1] = operatorToken?.raw
      layout[2] = unexpectedBetweenOperatorTokenAndPostfixExpression?.raw
      layout[3] = postfixExpression.raw
      layout[4] = unexpectedAfterPostfixExpression?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeOperatorToken: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeOperatorToken(_ unexpectedBeforeOperatorToken: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPrefixOperatorExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeOperatorToken.map(RawSyntax.init), arena: arena).as(RawPrefixOperatorExprSyntax.self)!
  }
  public var operatorToken: RawTokenSyntax? {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))
  }
  public func withOperatorToken(_ operatorToken: RawTokenSyntax?, arena: SyntaxArena) -> RawPrefixOperatorExprSyntax {
    return layoutView.replacingChild(at: 1, with: operatorToken.map(RawSyntax.init), arena: arena).as(RawPrefixOperatorExprSyntax.self)!
  }
  public var unexpectedBetweenOperatorTokenAndPostfixExpression: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenOperatorTokenAndPostfixExpression(_ unexpectedBetweenOperatorTokenAndPostfixExpression: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPrefixOperatorExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenOperatorTokenAndPostfixExpression.map(RawSyntax.init), arena: arena).as(RawPrefixOperatorExprSyntax.self)!
  }
  public var postfixExpression: RawExprSyntax {
    layoutView.children[3].map(RawExprSyntax.init(raw:))!
  }
  public func withPostfixExpression(_ postfixExpression: RawExprSyntax, arena: SyntaxArena) -> RawPrefixOperatorExprSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(postfixExpression), arena: arena).as(RawPrefixOperatorExprSyntax.self)!
  }
  public var unexpectedAfterPostfixExpression: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterPostfixExpression(_ unexpectedAfterPostfixExpression: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPrefixOperatorExprSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterPostfixExpression.map(RawSyntax.init), arena: arena).as(RawPrefixOperatorExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawBinaryOperatorExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = BinaryOperatorExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .binaryOperatorExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeOperatorToken: RawUnexpectedNodesSyntax? = nil,
    operatorToken: RawTokenSyntax,
    _ unexpectedAfterOperatorToken: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .binaryOperatorExpr, uninitializedCount: 3, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeOperatorToken?.raw
      layout[1] = operatorToken.raw
      layout[2] = unexpectedAfterOperatorToken?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeOperatorToken: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeOperatorToken(_ unexpectedBeforeOperatorToken: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawBinaryOperatorExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeOperatorToken.map(RawSyntax.init), arena: arena).as(RawBinaryOperatorExprSyntax.self)!
  }
  public var operatorToken: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withOperatorToken(_ operatorToken: RawTokenSyntax, arena: SyntaxArena) -> RawBinaryOperatorExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(operatorToken), arena: arena).as(RawBinaryOperatorExprSyntax.self)!
  }
  public var unexpectedAfterOperatorToken: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterOperatorToken(_ unexpectedAfterOperatorToken: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawBinaryOperatorExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedAfterOperatorToken.map(RawSyntax.init), arena: arena).as(RawBinaryOperatorExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawArrowExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ArrowExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .arrowExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeAsyncKeyword: RawUnexpectedNodesSyntax? = nil,
    asyncKeyword: RawTokenSyntax?,
    _ unexpectedBetweenAsyncKeywordAndThrowsToken: RawUnexpectedNodesSyntax? = nil,
    throwsToken: RawTokenSyntax?,
    _ unexpectedBetweenThrowsTokenAndArrowToken: RawUnexpectedNodesSyntax? = nil,
    arrowToken: RawTokenSyntax,
    _ unexpectedAfterArrowToken: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .arrowExpr, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeAsyncKeyword?.raw
      layout[1] = asyncKeyword?.raw
      layout[2] = unexpectedBetweenAsyncKeywordAndThrowsToken?.raw
      layout[3] = throwsToken?.raw
      layout[4] = unexpectedBetweenThrowsTokenAndArrowToken?.raw
      layout[5] = arrowToken.raw
      layout[6] = unexpectedAfterArrowToken?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeAsyncKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeAsyncKeyword(_ unexpectedBeforeAsyncKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawArrowExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeAsyncKeyword.map(RawSyntax.init), arena: arena).as(RawArrowExprSyntax.self)!
  }
  public var asyncKeyword: RawTokenSyntax? {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))
  }
  public func withAsyncKeyword(_ asyncKeyword: RawTokenSyntax?, arena: SyntaxArena) -> RawArrowExprSyntax {
    return layoutView.replacingChild(at: 1, with: asyncKeyword.map(RawSyntax.init), arena: arena).as(RawArrowExprSyntax.self)!
  }
  public var unexpectedBetweenAsyncKeywordAndThrowsToken: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAsyncKeywordAndThrowsToken(_ unexpectedBetweenAsyncKeywordAndThrowsToken: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawArrowExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenAsyncKeywordAndThrowsToken.map(RawSyntax.init), arena: arena).as(RawArrowExprSyntax.self)!
  }
  public var throwsToken: RawTokenSyntax? {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))
  }
  public func withThrowsToken(_ throwsToken: RawTokenSyntax?, arena: SyntaxArena) -> RawArrowExprSyntax {
    return layoutView.replacingChild(at: 3, with: throwsToken.map(RawSyntax.init), arena: arena).as(RawArrowExprSyntax.self)!
  }
  public var unexpectedBetweenThrowsTokenAndArrowToken: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenThrowsTokenAndArrowToken(_ unexpectedBetweenThrowsTokenAndArrowToken: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawArrowExprSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenThrowsTokenAndArrowToken.map(RawSyntax.init), arena: arena).as(RawArrowExprSyntax.self)!
  }
  public var arrowToken: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withArrowToken(_ arrowToken: RawTokenSyntax, arena: SyntaxArena) -> RawArrowExprSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(arrowToken), arena: arena).as(RawArrowExprSyntax.self)!
  }
  public var unexpectedAfterArrowToken: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterArrowToken(_ unexpectedAfterArrowToken: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawArrowExprSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterArrowToken.map(RawSyntax.init), arena: arena).as(RawArrowExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawInfixOperatorExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = InfixOperatorExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .infixOperatorExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeLeftOperand: RawUnexpectedNodesSyntax? = nil,
    leftOperand: RawExprSyntax,
    _ unexpectedBetweenLeftOperandAndOperatorOperand: RawUnexpectedNodesSyntax? = nil,
    operatorOperand: RawExprSyntax,
    _ unexpectedBetweenOperatorOperandAndRightOperand: RawUnexpectedNodesSyntax? = nil,
    rightOperand: RawExprSyntax,
    _ unexpectedAfterRightOperand: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .infixOperatorExpr, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeLeftOperand?.raw
      layout[1] = leftOperand.raw
      layout[2] = unexpectedBetweenLeftOperandAndOperatorOperand?.raw
      layout[3] = operatorOperand.raw
      layout[4] = unexpectedBetweenOperatorOperandAndRightOperand?.raw
      layout[5] = rightOperand.raw
      layout[6] = unexpectedAfterRightOperand?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeLeftOperand: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeLeftOperand(_ unexpectedBeforeLeftOperand: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawInfixOperatorExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeLeftOperand.map(RawSyntax.init), arena: arena).as(RawInfixOperatorExprSyntax.self)!
  }
  public var leftOperand: RawExprSyntax {
    layoutView.children[1].map(RawExprSyntax.init(raw:))!
  }
  public func withLeftOperand(_ leftOperand: RawExprSyntax, arena: SyntaxArena) -> RawInfixOperatorExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(leftOperand), arena: arena).as(RawInfixOperatorExprSyntax.self)!
  }
  public var unexpectedBetweenLeftOperandAndOperatorOperand: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftOperandAndOperatorOperand(_ unexpectedBetweenLeftOperandAndOperatorOperand: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawInfixOperatorExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenLeftOperandAndOperatorOperand.map(RawSyntax.init), arena: arena).as(RawInfixOperatorExprSyntax.self)!
  }
  public var operatorOperand: RawExprSyntax {
    layoutView.children[3].map(RawExprSyntax.init(raw:))!
  }
  public func withOperatorOperand(_ operatorOperand: RawExprSyntax, arena: SyntaxArena) -> RawInfixOperatorExprSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(operatorOperand), arena: arena).as(RawInfixOperatorExprSyntax.self)!
  }
  public var unexpectedBetweenOperatorOperandAndRightOperand: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenOperatorOperandAndRightOperand(_ unexpectedBetweenOperatorOperandAndRightOperand: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawInfixOperatorExprSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenOperatorOperandAndRightOperand.map(RawSyntax.init), arena: arena).as(RawInfixOperatorExprSyntax.self)!
  }
  public var rightOperand: RawExprSyntax {
    layoutView.children[5].map(RawExprSyntax.init(raw:))!
  }
  public func withRightOperand(_ rightOperand: RawExprSyntax, arena: SyntaxArena) -> RawInfixOperatorExprSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(rightOperand), arena: arena).as(RawInfixOperatorExprSyntax.self)!
  }
  public var unexpectedAfterRightOperand: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightOperand(_ unexpectedAfterRightOperand: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawInfixOperatorExprSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterRightOperand.map(RawSyntax.init), arena: arena).as(RawInfixOperatorExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawFloatLiteralExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = FloatLiteralExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .floatLiteralExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeFloatingDigits: RawUnexpectedNodesSyntax? = nil,
    floatingDigits: RawTokenSyntax,
    _ unexpectedAfterFloatingDigits: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .floatLiteralExpr, uninitializedCount: 3, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeFloatingDigits?.raw
      layout[1] = floatingDigits.raw
      layout[2] = unexpectedAfterFloatingDigits?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeFloatingDigits: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeFloatingDigits(_ unexpectedBeforeFloatingDigits: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFloatLiteralExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeFloatingDigits.map(RawSyntax.init), arena: arena).as(RawFloatLiteralExprSyntax.self)!
  }
  public var floatingDigits: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withFloatingDigits(_ floatingDigits: RawTokenSyntax, arena: SyntaxArena) -> RawFloatLiteralExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(floatingDigits), arena: arena).as(RawFloatLiteralExprSyntax.self)!
  }
  public var unexpectedAfterFloatingDigits: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterFloatingDigits(_ unexpectedAfterFloatingDigits: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFloatLiteralExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedAfterFloatingDigits.map(RawSyntax.init), arena: arena).as(RawFloatLiteralExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawTupleExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = TupleExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .tupleExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeLeftParen: RawUnexpectedNodesSyntax? = nil,
    leftParen: RawTokenSyntax,
    _ unexpectedBetweenLeftParenAndElementList: RawUnexpectedNodesSyntax? = nil,
    elementList: RawTupleExprElementListSyntax,
    _ unexpectedBetweenElementListAndRightParen: RawUnexpectedNodesSyntax? = nil,
    rightParen: RawTokenSyntax,
    _ unexpectedAfterRightParen: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .tupleExpr, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeLeftParen?.raw
      layout[1] = leftParen.raw
      layout[2] = unexpectedBetweenLeftParenAndElementList?.raw
      layout[3] = elementList.raw
      layout[4] = unexpectedBetweenElementListAndRightParen?.raw
      layout[5] = rightParen.raw
      layout[6] = unexpectedAfterRightParen?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeLeftParen: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeLeftParen(_ unexpectedBeforeLeftParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTupleExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeLeftParen.map(RawSyntax.init), arena: arena).as(RawTupleExprSyntax.self)!
  }
  public var leftParen: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeftParen(_ leftParen: RawTokenSyntax, arena: SyntaxArena) -> RawTupleExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(leftParen), arena: arena).as(RawTupleExprSyntax.self)!
  }
  public var unexpectedBetweenLeftParenAndElementList: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftParenAndElementList(_ unexpectedBetweenLeftParenAndElementList: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTupleExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenLeftParenAndElementList.map(RawSyntax.init), arena: arena).as(RawTupleExprSyntax.self)!
  }
  public var elementList: RawTupleExprElementListSyntax {
    layoutView.children[3].map(RawTupleExprElementListSyntax.init(raw:))!
  }
  public func withElementList(_ elementList: RawTupleExprElementListSyntax, arena: SyntaxArena) -> RawTupleExprSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(elementList), arena: arena).as(RawTupleExprSyntax.self)!
  }
  public var unexpectedBetweenElementListAndRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenElementListAndRightParen(_ unexpectedBetweenElementListAndRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTupleExprSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenElementListAndRightParen.map(RawSyntax.init), arena: arena).as(RawTupleExprSyntax.self)!
  }
  public var rightParen: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withRightParen(_ rightParen: RawTokenSyntax, arena: SyntaxArena) -> RawTupleExprSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(rightParen), arena: arena).as(RawTupleExprSyntax.self)!
  }
  public var unexpectedAfterRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightParen(_ unexpectedAfterRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTupleExprSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterRightParen.map(RawSyntax.init), arena: arena).as(RawTupleExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawArrayExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ArrayExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .arrayExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeLeftSquare: RawUnexpectedNodesSyntax? = nil,
    leftSquare: RawTokenSyntax,
    _ unexpectedBetweenLeftSquareAndElements: RawUnexpectedNodesSyntax? = nil,
    elements: RawArrayElementListSyntax,
    _ unexpectedBetweenElementsAndRightSquare: RawUnexpectedNodesSyntax? = nil,
    rightSquare: RawTokenSyntax,
    _ unexpectedAfterRightSquare: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .arrayExpr, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeLeftSquare?.raw
      layout[1] = leftSquare.raw
      layout[2] = unexpectedBetweenLeftSquareAndElements?.raw
      layout[3] = elements.raw
      layout[4] = unexpectedBetweenElementsAndRightSquare?.raw
      layout[5] = rightSquare.raw
      layout[6] = unexpectedAfterRightSquare?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeLeftSquare: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeLeftSquare(_ unexpectedBeforeLeftSquare: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawArrayExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeLeftSquare.map(RawSyntax.init), arena: arena).as(RawArrayExprSyntax.self)!
  }
  public var leftSquare: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeftSquare(_ leftSquare: RawTokenSyntax, arena: SyntaxArena) -> RawArrayExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(leftSquare), arena: arena).as(RawArrayExprSyntax.self)!
  }
  public var unexpectedBetweenLeftSquareAndElements: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftSquareAndElements(_ unexpectedBetweenLeftSquareAndElements: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawArrayExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenLeftSquareAndElements.map(RawSyntax.init), arena: arena).as(RawArrayExprSyntax.self)!
  }
  public var elements: RawArrayElementListSyntax {
    layoutView.children[3].map(RawArrayElementListSyntax.init(raw:))!
  }
  public func withElements(_ elements: RawArrayElementListSyntax, arena: SyntaxArena) -> RawArrayExprSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(elements), arena: arena).as(RawArrayExprSyntax.self)!
  }
  public var unexpectedBetweenElementsAndRightSquare: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenElementsAndRightSquare(_ unexpectedBetweenElementsAndRightSquare: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawArrayExprSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenElementsAndRightSquare.map(RawSyntax.init), arena: arena).as(RawArrayExprSyntax.self)!
  }
  public var rightSquare: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withRightSquare(_ rightSquare: RawTokenSyntax, arena: SyntaxArena) -> RawArrayExprSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(rightSquare), arena: arena).as(RawArrayExprSyntax.self)!
  }
  public var unexpectedAfterRightSquare: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightSquare(_ unexpectedAfterRightSquare: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawArrayExprSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterRightSquare.map(RawSyntax.init), arena: arena).as(RawArrayExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawDictionaryExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public enum Content: RawSyntaxNodeProtocol {
    case `colon`(RawTokenSyntax)
    case `elements`(RawDictionaryElementListSyntax)

    public static func isKindOf(_ raw: RawSyntax) -> Bool {
      return RawTokenSyntax.isKindOf(raw) || RawDictionaryElementListSyntax.isKindOf(raw)
    }

    public var raw: RawSyntax {
      switch self {
      case .colon(let node): return node.raw
      case .elements(let node): return node.raw
      }
    }

    public init?<T>(_ other: T) where T : RawSyntaxNodeProtocol {
      if let node = RawTokenSyntax(other) {
        self = .colon(node)
        return
      }
      if let node = RawDictionaryElementListSyntax(other) {
        self = .elements(node)
        return
      }
      return nil
    }
  }

  public typealias SyntaxType = DictionaryExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .dictionaryExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeLeftSquare: RawUnexpectedNodesSyntax? = nil,
    leftSquare: RawTokenSyntax,
    _ unexpectedBetweenLeftSquareAndContent: RawUnexpectedNodesSyntax? = nil,
    content: Content,
    _ unexpectedBetweenContentAndRightSquare: RawUnexpectedNodesSyntax? = nil,
    rightSquare: RawTokenSyntax,
    _ unexpectedAfterRightSquare: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .dictionaryExpr, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeLeftSquare?.raw
      layout[1] = leftSquare.raw
      layout[2] = unexpectedBetweenLeftSquareAndContent?.raw
      layout[3] = content.raw
      layout[4] = unexpectedBetweenContentAndRightSquare?.raw
      layout[5] = rightSquare.raw
      layout[6] = unexpectedAfterRightSquare?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeLeftSquare: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeLeftSquare(_ unexpectedBeforeLeftSquare: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDictionaryExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeLeftSquare.map(RawSyntax.init), arena: arena).as(RawDictionaryExprSyntax.self)!
  }
  public var leftSquare: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeftSquare(_ leftSquare: RawTokenSyntax, arena: SyntaxArena) -> RawDictionaryExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(leftSquare), arena: arena).as(RawDictionaryExprSyntax.self)!
  }
  public var unexpectedBetweenLeftSquareAndContent: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftSquareAndContent(_ unexpectedBetweenLeftSquareAndContent: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDictionaryExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenLeftSquareAndContent.map(RawSyntax.init), arena: arena).as(RawDictionaryExprSyntax.self)!
  }
  public var content: RawSyntax {
    layoutView.children[3]!
  }
  public func withContent(_ content: RawSyntax, arena: SyntaxArena) -> RawDictionaryExprSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(content), arena: arena).as(RawDictionaryExprSyntax.self)!
  }
  public var unexpectedBetweenContentAndRightSquare: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenContentAndRightSquare(_ unexpectedBetweenContentAndRightSquare: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDictionaryExprSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenContentAndRightSquare.map(RawSyntax.init), arena: arena).as(RawDictionaryExprSyntax.self)!
  }
  public var rightSquare: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withRightSquare(_ rightSquare: RawTokenSyntax, arena: SyntaxArena) -> RawDictionaryExprSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(rightSquare), arena: arena).as(RawDictionaryExprSyntax.self)!
  }
  public var unexpectedAfterRightSquare: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightSquare(_ unexpectedAfterRightSquare: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDictionaryExprSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterRightSquare.map(RawSyntax.init), arena: arena).as(RawDictionaryExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawTupleExprElementSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = TupleExprElementSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .tupleExprElement
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeLabel: RawUnexpectedNodesSyntax? = nil,
    label: RawTokenSyntax?,
    _ unexpectedBetweenLabelAndColon: RawUnexpectedNodesSyntax? = nil,
    colon: RawTokenSyntax?,
    _ unexpectedBetweenColonAndExpression: RawUnexpectedNodesSyntax? = nil,
    expression: RawExprSyntax,
    _ unexpectedBetweenExpressionAndTrailingComma: RawUnexpectedNodesSyntax? = nil,
    trailingComma: RawTokenSyntax?,
    _ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .tupleExprElement, uninitializedCount: 9, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeLabel?.raw
      layout[1] = label?.raw
      layout[2] = unexpectedBetweenLabelAndColon?.raw
      layout[3] = colon?.raw
      layout[4] = unexpectedBetweenColonAndExpression?.raw
      layout[5] = expression.raw
      layout[6] = unexpectedBetweenExpressionAndTrailingComma?.raw
      layout[7] = trailingComma?.raw
      layout[8] = unexpectedAfterTrailingComma?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeLabel: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeLabel(_ unexpectedBeforeLabel: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTupleExprElementSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeLabel.map(RawSyntax.init), arena: arena).as(RawTupleExprElementSyntax.self)!
  }
  public var label: RawTokenSyntax? {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))
  }
  public func withLabel(_ label: RawTokenSyntax?, arena: SyntaxArena) -> RawTupleExprElementSyntax {
    return layoutView.replacingChild(at: 1, with: label.map(RawSyntax.init), arena: arena).as(RawTupleExprElementSyntax.self)!
  }
  public var unexpectedBetweenLabelAndColon: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLabelAndColon(_ unexpectedBetweenLabelAndColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTupleExprElementSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenLabelAndColon.map(RawSyntax.init), arena: arena).as(RawTupleExprElementSyntax.self)!
  }
  public var colon: RawTokenSyntax? {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))
  }
  public func withColon(_ colon: RawTokenSyntax?, arena: SyntaxArena) -> RawTupleExprElementSyntax {
    return layoutView.replacingChild(at: 3, with: colon.map(RawSyntax.init), arena: arena).as(RawTupleExprElementSyntax.self)!
  }
  public var unexpectedBetweenColonAndExpression: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenColonAndExpression(_ unexpectedBetweenColonAndExpression: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTupleExprElementSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenColonAndExpression.map(RawSyntax.init), arena: arena).as(RawTupleExprElementSyntax.self)!
  }
  public var expression: RawExprSyntax {
    layoutView.children[5].map(RawExprSyntax.init(raw:))!
  }
  public func withExpression(_ expression: RawExprSyntax, arena: SyntaxArena) -> RawTupleExprElementSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(expression), arena: arena).as(RawTupleExprElementSyntax.self)!
  }
  public var unexpectedBetweenExpressionAndTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenExpressionAndTrailingComma(_ unexpectedBetweenExpressionAndTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTupleExprElementSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenExpressionAndTrailingComma.map(RawSyntax.init), arena: arena).as(RawTupleExprElementSyntax.self)!
  }
  public var trailingComma: RawTokenSyntax? {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))
  }
  public func withTrailingComma(_ trailingComma: RawTokenSyntax?, arena: SyntaxArena) -> RawTupleExprElementSyntax {
    return layoutView.replacingChild(at: 7, with: trailingComma.map(RawSyntax.init), arena: arena).as(RawTupleExprElementSyntax.self)!
  }
  public var unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterTrailingComma(_ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTupleExprElementSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedAfterTrailingComma.map(RawSyntax.init), arena: arena).as(RawTupleExprElementSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawArrayElementSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ArrayElementSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .arrayElement
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeExpression: RawUnexpectedNodesSyntax? = nil,
    expression: RawExprSyntax,
    _ unexpectedBetweenExpressionAndTrailingComma: RawUnexpectedNodesSyntax? = nil,
    trailingComma: RawTokenSyntax?,
    _ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .arrayElement, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeExpression?.raw
      layout[1] = expression.raw
      layout[2] = unexpectedBetweenExpressionAndTrailingComma?.raw
      layout[3] = trailingComma?.raw
      layout[4] = unexpectedAfterTrailingComma?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeExpression: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeExpression(_ unexpectedBeforeExpression: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawArrayElementSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeExpression.map(RawSyntax.init), arena: arena).as(RawArrayElementSyntax.self)!
  }
  public var expression: RawExprSyntax {
    layoutView.children[1].map(RawExprSyntax.init(raw:))!
  }
  public func withExpression(_ expression: RawExprSyntax, arena: SyntaxArena) -> RawArrayElementSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(expression), arena: arena).as(RawArrayElementSyntax.self)!
  }
  public var unexpectedBetweenExpressionAndTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenExpressionAndTrailingComma(_ unexpectedBetweenExpressionAndTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawArrayElementSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenExpressionAndTrailingComma.map(RawSyntax.init), arena: arena).as(RawArrayElementSyntax.self)!
  }
  public var trailingComma: RawTokenSyntax? {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))
  }
  public func withTrailingComma(_ trailingComma: RawTokenSyntax?, arena: SyntaxArena) -> RawArrayElementSyntax {
    return layoutView.replacingChild(at: 3, with: trailingComma.map(RawSyntax.init), arena: arena).as(RawArrayElementSyntax.self)!
  }
  public var unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterTrailingComma(_ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawArrayElementSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterTrailingComma.map(RawSyntax.init), arena: arena).as(RawArrayElementSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawDictionaryElementSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = DictionaryElementSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .dictionaryElement
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeKeyExpression: RawUnexpectedNodesSyntax? = nil,
    keyExpression: RawExprSyntax,
    _ unexpectedBetweenKeyExpressionAndColon: RawUnexpectedNodesSyntax? = nil,
    colon: RawTokenSyntax,
    _ unexpectedBetweenColonAndValueExpression: RawUnexpectedNodesSyntax? = nil,
    valueExpression: RawExprSyntax,
    _ unexpectedBetweenValueExpressionAndTrailingComma: RawUnexpectedNodesSyntax? = nil,
    trailingComma: RawTokenSyntax?,
    _ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .dictionaryElement, uninitializedCount: 9, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeKeyExpression?.raw
      layout[1] = keyExpression.raw
      layout[2] = unexpectedBetweenKeyExpressionAndColon?.raw
      layout[3] = colon.raw
      layout[4] = unexpectedBetweenColonAndValueExpression?.raw
      layout[5] = valueExpression.raw
      layout[6] = unexpectedBetweenValueExpressionAndTrailingComma?.raw
      layout[7] = trailingComma?.raw
      layout[8] = unexpectedAfterTrailingComma?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeKeyExpression: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeKeyExpression(_ unexpectedBeforeKeyExpression: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDictionaryElementSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeKeyExpression.map(RawSyntax.init), arena: arena).as(RawDictionaryElementSyntax.self)!
  }
  public var keyExpression: RawExprSyntax {
    layoutView.children[1].map(RawExprSyntax.init(raw:))!
  }
  public func withKeyExpression(_ keyExpression: RawExprSyntax, arena: SyntaxArena) -> RawDictionaryElementSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(keyExpression), arena: arena).as(RawDictionaryElementSyntax.self)!
  }
  public var unexpectedBetweenKeyExpressionAndColon: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenKeyExpressionAndColon(_ unexpectedBetweenKeyExpressionAndColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDictionaryElementSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenKeyExpressionAndColon.map(RawSyntax.init), arena: arena).as(RawDictionaryElementSyntax.self)!
  }
  public var colon: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withColon(_ colon: RawTokenSyntax, arena: SyntaxArena) -> RawDictionaryElementSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(colon), arena: arena).as(RawDictionaryElementSyntax.self)!
  }
  public var unexpectedBetweenColonAndValueExpression: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenColonAndValueExpression(_ unexpectedBetweenColonAndValueExpression: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDictionaryElementSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenColonAndValueExpression.map(RawSyntax.init), arena: arena).as(RawDictionaryElementSyntax.self)!
  }
  public var valueExpression: RawExprSyntax {
    layoutView.children[5].map(RawExprSyntax.init(raw:))!
  }
  public func withValueExpression(_ valueExpression: RawExprSyntax, arena: SyntaxArena) -> RawDictionaryElementSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(valueExpression), arena: arena).as(RawDictionaryElementSyntax.self)!
  }
  public var unexpectedBetweenValueExpressionAndTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenValueExpressionAndTrailingComma(_ unexpectedBetweenValueExpressionAndTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDictionaryElementSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenValueExpressionAndTrailingComma.map(RawSyntax.init), arena: arena).as(RawDictionaryElementSyntax.self)!
  }
  public var trailingComma: RawTokenSyntax? {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))
  }
  public func withTrailingComma(_ trailingComma: RawTokenSyntax?, arena: SyntaxArena) -> RawDictionaryElementSyntax {
    return layoutView.replacingChild(at: 7, with: trailingComma.map(RawSyntax.init), arena: arena).as(RawDictionaryElementSyntax.self)!
  }
  public var unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterTrailingComma(_ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDictionaryElementSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedAfterTrailingComma.map(RawSyntax.init), arena: arena).as(RawDictionaryElementSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawIntegerLiteralExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = IntegerLiteralExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .integerLiteralExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeDigits: RawUnexpectedNodesSyntax? = nil,
    digits: RawTokenSyntax,
    _ unexpectedAfterDigits: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .integerLiteralExpr, uninitializedCount: 3, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeDigits?.raw
      layout[1] = digits.raw
      layout[2] = unexpectedAfterDigits?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeDigits: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeDigits(_ unexpectedBeforeDigits: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawIntegerLiteralExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeDigits.map(RawSyntax.init), arena: arena).as(RawIntegerLiteralExprSyntax.self)!
  }
  public var digits: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withDigits(_ digits: RawTokenSyntax, arena: SyntaxArena) -> RawIntegerLiteralExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(digits), arena: arena).as(RawIntegerLiteralExprSyntax.self)!
  }
  public var unexpectedAfterDigits: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterDigits(_ unexpectedAfterDigits: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawIntegerLiteralExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedAfterDigits.map(RawSyntax.init), arena: arena).as(RawIntegerLiteralExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawBooleanLiteralExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = BooleanLiteralExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .booleanLiteralExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeBooleanLiteral: RawUnexpectedNodesSyntax? = nil,
    booleanLiteral: RawTokenSyntax,
    _ unexpectedAfterBooleanLiteral: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .booleanLiteralExpr, uninitializedCount: 3, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeBooleanLiteral?.raw
      layout[1] = booleanLiteral.raw
      layout[2] = unexpectedAfterBooleanLiteral?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeBooleanLiteral: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeBooleanLiteral(_ unexpectedBeforeBooleanLiteral: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawBooleanLiteralExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeBooleanLiteral.map(RawSyntax.init), arena: arena).as(RawBooleanLiteralExprSyntax.self)!
  }
  public var booleanLiteral: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withBooleanLiteral(_ booleanLiteral: RawTokenSyntax, arena: SyntaxArena) -> RawBooleanLiteralExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(booleanLiteral), arena: arena).as(RawBooleanLiteralExprSyntax.self)!
  }
  public var unexpectedAfterBooleanLiteral: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterBooleanLiteral(_ unexpectedAfterBooleanLiteral: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawBooleanLiteralExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedAfterBooleanLiteral.map(RawSyntax.init), arena: arena).as(RawBooleanLiteralExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawUnresolvedTernaryExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = UnresolvedTernaryExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .unresolvedTernaryExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeQuestionMark: RawUnexpectedNodesSyntax? = nil,
    questionMark: RawTokenSyntax,
    _ unexpectedBetweenQuestionMarkAndFirstChoice: RawUnexpectedNodesSyntax? = nil,
    firstChoice: RawExprSyntax,
    _ unexpectedBetweenFirstChoiceAndColonMark: RawUnexpectedNodesSyntax? = nil,
    colonMark: RawTokenSyntax,
    _ unexpectedAfterColonMark: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .unresolvedTernaryExpr, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeQuestionMark?.raw
      layout[1] = questionMark.raw
      layout[2] = unexpectedBetweenQuestionMarkAndFirstChoice?.raw
      layout[3] = firstChoice.raw
      layout[4] = unexpectedBetweenFirstChoiceAndColonMark?.raw
      layout[5] = colonMark.raw
      layout[6] = unexpectedAfterColonMark?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeQuestionMark: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeQuestionMark(_ unexpectedBeforeQuestionMark: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawUnresolvedTernaryExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeQuestionMark.map(RawSyntax.init), arena: arena).as(RawUnresolvedTernaryExprSyntax.self)!
  }
  public var questionMark: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withQuestionMark(_ questionMark: RawTokenSyntax, arena: SyntaxArena) -> RawUnresolvedTernaryExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(questionMark), arena: arena).as(RawUnresolvedTernaryExprSyntax.self)!
  }
  public var unexpectedBetweenQuestionMarkAndFirstChoice: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenQuestionMarkAndFirstChoice(_ unexpectedBetweenQuestionMarkAndFirstChoice: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawUnresolvedTernaryExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenQuestionMarkAndFirstChoice.map(RawSyntax.init), arena: arena).as(RawUnresolvedTernaryExprSyntax.self)!
  }
  public var firstChoice: RawExprSyntax {
    layoutView.children[3].map(RawExprSyntax.init(raw:))!
  }
  public func withFirstChoice(_ firstChoice: RawExprSyntax, arena: SyntaxArena) -> RawUnresolvedTernaryExprSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(firstChoice), arena: arena).as(RawUnresolvedTernaryExprSyntax.self)!
  }
  public var unexpectedBetweenFirstChoiceAndColonMark: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenFirstChoiceAndColonMark(_ unexpectedBetweenFirstChoiceAndColonMark: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawUnresolvedTernaryExprSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenFirstChoiceAndColonMark.map(RawSyntax.init), arena: arena).as(RawUnresolvedTernaryExprSyntax.self)!
  }
  public var colonMark: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withColonMark(_ colonMark: RawTokenSyntax, arena: SyntaxArena) -> RawUnresolvedTernaryExprSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(colonMark), arena: arena).as(RawUnresolvedTernaryExprSyntax.self)!
  }
  public var unexpectedAfterColonMark: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterColonMark(_ unexpectedAfterColonMark: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawUnresolvedTernaryExprSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterColonMark.map(RawSyntax.init), arena: arena).as(RawUnresolvedTernaryExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawTernaryExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = TernaryExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .ternaryExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeConditionExpression: RawUnexpectedNodesSyntax? = nil,
    conditionExpression: RawExprSyntax,
    _ unexpectedBetweenConditionExpressionAndQuestionMark: RawUnexpectedNodesSyntax? = nil,
    questionMark: RawTokenSyntax,
    _ unexpectedBetweenQuestionMarkAndFirstChoice: RawUnexpectedNodesSyntax? = nil,
    firstChoice: RawExprSyntax,
    _ unexpectedBetweenFirstChoiceAndColonMark: RawUnexpectedNodesSyntax? = nil,
    colonMark: RawTokenSyntax,
    _ unexpectedBetweenColonMarkAndSecondChoice: RawUnexpectedNodesSyntax? = nil,
    secondChoice: RawExprSyntax,
    _ unexpectedAfterSecondChoice: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .ternaryExpr, uninitializedCount: 11, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeConditionExpression?.raw
      layout[1] = conditionExpression.raw
      layout[2] = unexpectedBetweenConditionExpressionAndQuestionMark?.raw
      layout[3] = questionMark.raw
      layout[4] = unexpectedBetweenQuestionMarkAndFirstChoice?.raw
      layout[5] = firstChoice.raw
      layout[6] = unexpectedBetweenFirstChoiceAndColonMark?.raw
      layout[7] = colonMark.raw
      layout[8] = unexpectedBetweenColonMarkAndSecondChoice?.raw
      layout[9] = secondChoice.raw
      layout[10] = unexpectedAfterSecondChoice?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeConditionExpression: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeConditionExpression(_ unexpectedBeforeConditionExpression: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTernaryExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeConditionExpression.map(RawSyntax.init), arena: arena).as(RawTernaryExprSyntax.self)!
  }
  public var conditionExpression: RawExprSyntax {
    layoutView.children[1].map(RawExprSyntax.init(raw:))!
  }
  public func withConditionExpression(_ conditionExpression: RawExprSyntax, arena: SyntaxArena) -> RawTernaryExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(conditionExpression), arena: arena).as(RawTernaryExprSyntax.self)!
  }
  public var unexpectedBetweenConditionExpressionAndQuestionMark: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenConditionExpressionAndQuestionMark(_ unexpectedBetweenConditionExpressionAndQuestionMark: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTernaryExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenConditionExpressionAndQuestionMark.map(RawSyntax.init), arena: arena).as(RawTernaryExprSyntax.self)!
  }
  public var questionMark: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withQuestionMark(_ questionMark: RawTokenSyntax, arena: SyntaxArena) -> RawTernaryExprSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(questionMark), arena: arena).as(RawTernaryExprSyntax.self)!
  }
  public var unexpectedBetweenQuestionMarkAndFirstChoice: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenQuestionMarkAndFirstChoice(_ unexpectedBetweenQuestionMarkAndFirstChoice: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTernaryExprSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenQuestionMarkAndFirstChoice.map(RawSyntax.init), arena: arena).as(RawTernaryExprSyntax.self)!
  }
  public var firstChoice: RawExprSyntax {
    layoutView.children[5].map(RawExprSyntax.init(raw:))!
  }
  public func withFirstChoice(_ firstChoice: RawExprSyntax, arena: SyntaxArena) -> RawTernaryExprSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(firstChoice), arena: arena).as(RawTernaryExprSyntax.self)!
  }
  public var unexpectedBetweenFirstChoiceAndColonMark: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenFirstChoiceAndColonMark(_ unexpectedBetweenFirstChoiceAndColonMark: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTernaryExprSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenFirstChoiceAndColonMark.map(RawSyntax.init), arena: arena).as(RawTernaryExprSyntax.self)!
  }
  public var colonMark: RawTokenSyntax {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))!
  }
  public func withColonMark(_ colonMark: RawTokenSyntax, arena: SyntaxArena) -> RawTernaryExprSyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(colonMark), arena: arena).as(RawTernaryExprSyntax.self)!
  }
  public var unexpectedBetweenColonMarkAndSecondChoice: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenColonMarkAndSecondChoice(_ unexpectedBetweenColonMarkAndSecondChoice: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTernaryExprSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenColonMarkAndSecondChoice.map(RawSyntax.init), arena: arena).as(RawTernaryExprSyntax.self)!
  }
  public var secondChoice: RawExprSyntax {
    layoutView.children[9].map(RawExprSyntax.init(raw:))!
  }
  public func withSecondChoice(_ secondChoice: RawExprSyntax, arena: SyntaxArena) -> RawTernaryExprSyntax {
    return layoutView.replacingChild(at: 9, with: RawSyntax(secondChoice), arena: arena).as(RawTernaryExprSyntax.self)!
  }
  public var unexpectedAfterSecondChoice: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterSecondChoice(_ unexpectedAfterSecondChoice: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTernaryExprSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedAfterSecondChoice.map(RawSyntax.init), arena: arena).as(RawTernaryExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawMemberAccessExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = MemberAccessExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .memberAccessExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeBase: RawUnexpectedNodesSyntax? = nil,
    base: RawExprSyntax?,
    _ unexpectedBetweenBaseAndDot: RawUnexpectedNodesSyntax? = nil,
    dot: RawTokenSyntax,
    _ unexpectedBetweenDotAndName: RawUnexpectedNodesSyntax? = nil,
    name: RawTokenSyntax,
    _ unexpectedBetweenNameAndDeclNameArguments: RawUnexpectedNodesSyntax? = nil,
    declNameArguments: RawDeclNameArgumentsSyntax?,
    _ unexpectedAfterDeclNameArguments: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .memberAccessExpr, uninitializedCount: 9, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeBase?.raw
      layout[1] = base?.raw
      layout[2] = unexpectedBetweenBaseAndDot?.raw
      layout[3] = dot.raw
      layout[4] = unexpectedBetweenDotAndName?.raw
      layout[5] = name.raw
      layout[6] = unexpectedBetweenNameAndDeclNameArguments?.raw
      layout[7] = declNameArguments?.raw
      layout[8] = unexpectedAfterDeclNameArguments?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeBase: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeBase(_ unexpectedBeforeBase: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMemberAccessExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeBase.map(RawSyntax.init), arena: arena).as(RawMemberAccessExprSyntax.self)!
  }
  public var base: RawExprSyntax? {
    layoutView.children[1].map(RawExprSyntax.init(raw:))
  }
  public func withBase(_ base: RawExprSyntax?, arena: SyntaxArena) -> RawMemberAccessExprSyntax {
    return layoutView.replacingChild(at: 1, with: base.map(RawSyntax.init), arena: arena).as(RawMemberAccessExprSyntax.self)!
  }
  public var unexpectedBetweenBaseAndDot: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenBaseAndDot(_ unexpectedBetweenBaseAndDot: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMemberAccessExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenBaseAndDot.map(RawSyntax.init), arena: arena).as(RawMemberAccessExprSyntax.self)!
  }
  public var dot: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withDot(_ dot: RawTokenSyntax, arena: SyntaxArena) -> RawMemberAccessExprSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(dot), arena: arena).as(RawMemberAccessExprSyntax.self)!
  }
  public var unexpectedBetweenDotAndName: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenDotAndName(_ unexpectedBetweenDotAndName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMemberAccessExprSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenDotAndName.map(RawSyntax.init), arena: arena).as(RawMemberAccessExprSyntax.self)!
  }
  public var name: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withName(_ name: RawTokenSyntax, arena: SyntaxArena) -> RawMemberAccessExprSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(name), arena: arena).as(RawMemberAccessExprSyntax.self)!
  }
  public var unexpectedBetweenNameAndDeclNameArguments: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenNameAndDeclNameArguments(_ unexpectedBetweenNameAndDeclNameArguments: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMemberAccessExprSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenNameAndDeclNameArguments.map(RawSyntax.init), arena: arena).as(RawMemberAccessExprSyntax.self)!
  }
  public var declNameArguments: RawDeclNameArgumentsSyntax? {
    layoutView.children[7].map(RawDeclNameArgumentsSyntax.init(raw:))
  }
  public func withDeclNameArguments(_ declNameArguments: RawDeclNameArgumentsSyntax?, arena: SyntaxArena) -> RawMemberAccessExprSyntax {
    return layoutView.replacingChild(at: 7, with: declNameArguments.map(RawSyntax.init), arena: arena).as(RawMemberAccessExprSyntax.self)!
  }
  public var unexpectedAfterDeclNameArguments: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterDeclNameArguments(_ unexpectedAfterDeclNameArguments: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMemberAccessExprSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedAfterDeclNameArguments.map(RawSyntax.init), arena: arena).as(RawMemberAccessExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawUnresolvedIsExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = UnresolvedIsExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .unresolvedIsExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeIsTok: RawUnexpectedNodesSyntax? = nil,
    isTok: RawTokenSyntax,
    _ unexpectedAfterIsTok: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .unresolvedIsExpr, uninitializedCount: 3, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeIsTok?.raw
      layout[1] = isTok.raw
      layout[2] = unexpectedAfterIsTok?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeIsTok: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeIsTok(_ unexpectedBeforeIsTok: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawUnresolvedIsExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeIsTok.map(RawSyntax.init), arena: arena).as(RawUnresolvedIsExprSyntax.self)!
  }
  public var isTok: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withIsTok(_ isTok: RawTokenSyntax, arena: SyntaxArena) -> RawUnresolvedIsExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(isTok), arena: arena).as(RawUnresolvedIsExprSyntax.self)!
  }
  public var unexpectedAfterIsTok: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterIsTok(_ unexpectedAfterIsTok: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawUnresolvedIsExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedAfterIsTok.map(RawSyntax.init), arena: arena).as(RawUnresolvedIsExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawIsExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = IsExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .isExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeExpression: RawUnexpectedNodesSyntax? = nil,
    expression: RawExprSyntax,
    _ unexpectedBetweenExpressionAndIsTok: RawUnexpectedNodesSyntax? = nil,
    isTok: RawTokenSyntax,
    _ unexpectedBetweenIsTokAndTypeName: RawUnexpectedNodesSyntax? = nil,
    typeName: RawTypeSyntax,
    _ unexpectedAfterTypeName: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .isExpr, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeExpression?.raw
      layout[1] = expression.raw
      layout[2] = unexpectedBetweenExpressionAndIsTok?.raw
      layout[3] = isTok.raw
      layout[4] = unexpectedBetweenIsTokAndTypeName?.raw
      layout[5] = typeName.raw
      layout[6] = unexpectedAfterTypeName?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeExpression: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeExpression(_ unexpectedBeforeExpression: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawIsExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeExpression.map(RawSyntax.init), arena: arena).as(RawIsExprSyntax.self)!
  }
  public var expression: RawExprSyntax {
    layoutView.children[1].map(RawExprSyntax.init(raw:))!
  }
  public func withExpression(_ expression: RawExprSyntax, arena: SyntaxArena) -> RawIsExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(expression), arena: arena).as(RawIsExprSyntax.self)!
  }
  public var unexpectedBetweenExpressionAndIsTok: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenExpressionAndIsTok(_ unexpectedBetweenExpressionAndIsTok: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawIsExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenExpressionAndIsTok.map(RawSyntax.init), arena: arena).as(RawIsExprSyntax.self)!
  }
  public var isTok: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withIsTok(_ isTok: RawTokenSyntax, arena: SyntaxArena) -> RawIsExprSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(isTok), arena: arena).as(RawIsExprSyntax.self)!
  }
  public var unexpectedBetweenIsTokAndTypeName: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenIsTokAndTypeName(_ unexpectedBetweenIsTokAndTypeName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawIsExprSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenIsTokAndTypeName.map(RawSyntax.init), arena: arena).as(RawIsExprSyntax.self)!
  }
  public var typeName: RawTypeSyntax {
    layoutView.children[5].map(RawTypeSyntax.init(raw:))!
  }
  public func withTypeName(_ typeName: RawTypeSyntax, arena: SyntaxArena) -> RawIsExprSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(typeName), arena: arena).as(RawIsExprSyntax.self)!
  }
  public var unexpectedAfterTypeName: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterTypeName(_ unexpectedAfterTypeName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawIsExprSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterTypeName.map(RawSyntax.init), arena: arena).as(RawIsExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawUnresolvedAsExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = UnresolvedAsExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .unresolvedAsExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeAsTok: RawUnexpectedNodesSyntax? = nil,
    asTok: RawTokenSyntax,
    _ unexpectedBetweenAsTokAndQuestionOrExclamationMark: RawUnexpectedNodesSyntax? = nil,
    questionOrExclamationMark: RawTokenSyntax?,
    _ unexpectedAfterQuestionOrExclamationMark: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .unresolvedAsExpr, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeAsTok?.raw
      layout[1] = asTok.raw
      layout[2] = unexpectedBetweenAsTokAndQuestionOrExclamationMark?.raw
      layout[3] = questionOrExclamationMark?.raw
      layout[4] = unexpectedAfterQuestionOrExclamationMark?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeAsTok: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeAsTok(_ unexpectedBeforeAsTok: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawUnresolvedAsExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeAsTok.map(RawSyntax.init), arena: arena).as(RawUnresolvedAsExprSyntax.self)!
  }
  public var asTok: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withAsTok(_ asTok: RawTokenSyntax, arena: SyntaxArena) -> RawUnresolvedAsExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(asTok), arena: arena).as(RawUnresolvedAsExprSyntax.self)!
  }
  public var unexpectedBetweenAsTokAndQuestionOrExclamationMark: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAsTokAndQuestionOrExclamationMark(_ unexpectedBetweenAsTokAndQuestionOrExclamationMark: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawUnresolvedAsExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenAsTokAndQuestionOrExclamationMark.map(RawSyntax.init), arena: arena).as(RawUnresolvedAsExprSyntax.self)!
  }
  public var questionOrExclamationMark: RawTokenSyntax? {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))
  }
  public func withQuestionOrExclamationMark(_ questionOrExclamationMark: RawTokenSyntax?, arena: SyntaxArena) -> RawUnresolvedAsExprSyntax {
    return layoutView.replacingChild(at: 3, with: questionOrExclamationMark.map(RawSyntax.init), arena: arena).as(RawUnresolvedAsExprSyntax.self)!
  }
  public var unexpectedAfterQuestionOrExclamationMark: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterQuestionOrExclamationMark(_ unexpectedAfterQuestionOrExclamationMark: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawUnresolvedAsExprSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterQuestionOrExclamationMark.map(RawSyntax.init), arena: arena).as(RawUnresolvedAsExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawAsExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = AsExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .asExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeExpression: RawUnexpectedNodesSyntax? = nil,
    expression: RawExprSyntax,
    _ unexpectedBetweenExpressionAndAsTok: RawUnexpectedNodesSyntax? = nil,
    asTok: RawTokenSyntax,
    _ unexpectedBetweenAsTokAndQuestionOrExclamationMark: RawUnexpectedNodesSyntax? = nil,
    questionOrExclamationMark: RawTokenSyntax?,
    _ unexpectedBetweenQuestionOrExclamationMarkAndTypeName: RawUnexpectedNodesSyntax? = nil,
    typeName: RawTypeSyntax,
    _ unexpectedAfterTypeName: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .asExpr, uninitializedCount: 9, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeExpression?.raw
      layout[1] = expression.raw
      layout[2] = unexpectedBetweenExpressionAndAsTok?.raw
      layout[3] = asTok.raw
      layout[4] = unexpectedBetweenAsTokAndQuestionOrExclamationMark?.raw
      layout[5] = questionOrExclamationMark?.raw
      layout[6] = unexpectedBetweenQuestionOrExclamationMarkAndTypeName?.raw
      layout[7] = typeName.raw
      layout[8] = unexpectedAfterTypeName?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeExpression: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeExpression(_ unexpectedBeforeExpression: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAsExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeExpression.map(RawSyntax.init), arena: arena).as(RawAsExprSyntax.self)!
  }
  public var expression: RawExprSyntax {
    layoutView.children[1].map(RawExprSyntax.init(raw:))!
  }
  public func withExpression(_ expression: RawExprSyntax, arena: SyntaxArena) -> RawAsExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(expression), arena: arena).as(RawAsExprSyntax.self)!
  }
  public var unexpectedBetweenExpressionAndAsTok: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenExpressionAndAsTok(_ unexpectedBetweenExpressionAndAsTok: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAsExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenExpressionAndAsTok.map(RawSyntax.init), arena: arena).as(RawAsExprSyntax.self)!
  }
  public var asTok: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withAsTok(_ asTok: RawTokenSyntax, arena: SyntaxArena) -> RawAsExprSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(asTok), arena: arena).as(RawAsExprSyntax.self)!
  }
  public var unexpectedBetweenAsTokAndQuestionOrExclamationMark: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAsTokAndQuestionOrExclamationMark(_ unexpectedBetweenAsTokAndQuestionOrExclamationMark: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAsExprSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenAsTokAndQuestionOrExclamationMark.map(RawSyntax.init), arena: arena).as(RawAsExprSyntax.self)!
  }
  public var questionOrExclamationMark: RawTokenSyntax? {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))
  }
  public func withQuestionOrExclamationMark(_ questionOrExclamationMark: RawTokenSyntax?, arena: SyntaxArena) -> RawAsExprSyntax {
    return layoutView.replacingChild(at: 5, with: questionOrExclamationMark.map(RawSyntax.init), arena: arena).as(RawAsExprSyntax.self)!
  }
  public var unexpectedBetweenQuestionOrExclamationMarkAndTypeName: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenQuestionOrExclamationMarkAndTypeName(_ unexpectedBetweenQuestionOrExclamationMarkAndTypeName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAsExprSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenQuestionOrExclamationMarkAndTypeName.map(RawSyntax.init), arena: arena).as(RawAsExprSyntax.self)!
  }
  public var typeName: RawTypeSyntax {
    layoutView.children[7].map(RawTypeSyntax.init(raw:))!
  }
  public func withTypeName(_ typeName: RawTypeSyntax, arena: SyntaxArena) -> RawAsExprSyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(typeName), arena: arena).as(RawAsExprSyntax.self)!
  }
  public var unexpectedAfterTypeName: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterTypeName(_ unexpectedAfterTypeName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAsExprSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedAfterTypeName.map(RawSyntax.init), arena: arena).as(RawAsExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawTypeExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = TypeExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .typeExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeType: RawUnexpectedNodesSyntax? = nil,
    type: RawTypeSyntax,
    _ unexpectedAfterType: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .typeExpr, uninitializedCount: 3, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeType?.raw
      layout[1] = type.raw
      layout[2] = unexpectedAfterType?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeType: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeType(_ unexpectedBeforeType: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTypeExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeType.map(RawSyntax.init), arena: arena).as(RawTypeExprSyntax.self)!
  }
  public var type: RawTypeSyntax {
    layoutView.children[1].map(RawTypeSyntax.init(raw:))!
  }
  public func withType(_ type: RawTypeSyntax, arena: SyntaxArena) -> RawTypeExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(type), arena: arena).as(RawTypeExprSyntax.self)!
  }
  public var unexpectedAfterType: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterType(_ unexpectedAfterType: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTypeExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedAfterType.map(RawSyntax.init), arena: arena).as(RawTypeExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawClosureCaptureItemSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ClosureCaptureItemSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .closureCaptureItem
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeSpecifier: RawUnexpectedNodesSyntax? = nil,
    specifier: RawTokenListSyntax?,
    _ unexpectedBetweenSpecifierAndName: RawUnexpectedNodesSyntax? = nil,
    name: RawTokenSyntax?,
    _ unexpectedBetweenNameAndAssignToken: RawUnexpectedNodesSyntax? = nil,
    assignToken: RawTokenSyntax?,
    _ unexpectedBetweenAssignTokenAndExpression: RawUnexpectedNodesSyntax? = nil,
    expression: RawExprSyntax,
    _ unexpectedBetweenExpressionAndTrailingComma: RawUnexpectedNodesSyntax? = nil,
    trailingComma: RawTokenSyntax?,
    _ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .closureCaptureItem, uninitializedCount: 11, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeSpecifier?.raw
      layout[1] = specifier?.raw
      layout[2] = unexpectedBetweenSpecifierAndName?.raw
      layout[3] = name?.raw
      layout[4] = unexpectedBetweenNameAndAssignToken?.raw
      layout[5] = assignToken?.raw
      layout[6] = unexpectedBetweenAssignTokenAndExpression?.raw
      layout[7] = expression.raw
      layout[8] = unexpectedBetweenExpressionAndTrailingComma?.raw
      layout[9] = trailingComma?.raw
      layout[10] = unexpectedAfterTrailingComma?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeSpecifier: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeSpecifier(_ unexpectedBeforeSpecifier: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawClosureCaptureItemSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeSpecifier.map(RawSyntax.init), arena: arena).as(RawClosureCaptureItemSyntax.self)!
  }
  public var specifier: RawTokenListSyntax? {
    layoutView.children[1].map(RawTokenListSyntax.init(raw:))
  }
  public func withSpecifier(_ specifier: RawTokenListSyntax?, arena: SyntaxArena) -> RawClosureCaptureItemSyntax {
    return layoutView.replacingChild(at: 1, with: specifier.map(RawSyntax.init), arena: arena).as(RawClosureCaptureItemSyntax.self)!
  }
  public var unexpectedBetweenSpecifierAndName: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenSpecifierAndName(_ unexpectedBetweenSpecifierAndName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawClosureCaptureItemSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenSpecifierAndName.map(RawSyntax.init), arena: arena).as(RawClosureCaptureItemSyntax.self)!
  }
  public var name: RawTokenSyntax? {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))
  }
  public func withName(_ name: RawTokenSyntax?, arena: SyntaxArena) -> RawClosureCaptureItemSyntax {
    return layoutView.replacingChild(at: 3, with: name.map(RawSyntax.init), arena: arena).as(RawClosureCaptureItemSyntax.self)!
  }
  public var unexpectedBetweenNameAndAssignToken: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenNameAndAssignToken(_ unexpectedBetweenNameAndAssignToken: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawClosureCaptureItemSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenNameAndAssignToken.map(RawSyntax.init), arena: arena).as(RawClosureCaptureItemSyntax.self)!
  }
  public var assignToken: RawTokenSyntax? {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))
  }
  public func withAssignToken(_ assignToken: RawTokenSyntax?, arena: SyntaxArena) -> RawClosureCaptureItemSyntax {
    return layoutView.replacingChild(at: 5, with: assignToken.map(RawSyntax.init), arena: arena).as(RawClosureCaptureItemSyntax.self)!
  }
  public var unexpectedBetweenAssignTokenAndExpression: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAssignTokenAndExpression(_ unexpectedBetweenAssignTokenAndExpression: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawClosureCaptureItemSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenAssignTokenAndExpression.map(RawSyntax.init), arena: arena).as(RawClosureCaptureItemSyntax.self)!
  }
  public var expression: RawExprSyntax {
    layoutView.children[7].map(RawExprSyntax.init(raw:))!
  }
  public func withExpression(_ expression: RawExprSyntax, arena: SyntaxArena) -> RawClosureCaptureItemSyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(expression), arena: arena).as(RawClosureCaptureItemSyntax.self)!
  }
  public var unexpectedBetweenExpressionAndTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenExpressionAndTrailingComma(_ unexpectedBetweenExpressionAndTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawClosureCaptureItemSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenExpressionAndTrailingComma.map(RawSyntax.init), arena: arena).as(RawClosureCaptureItemSyntax.self)!
  }
  public var trailingComma: RawTokenSyntax? {
    layoutView.children[9].map(RawTokenSyntax.init(raw:))
  }
  public func withTrailingComma(_ trailingComma: RawTokenSyntax?, arena: SyntaxArena) -> RawClosureCaptureItemSyntax {
    return layoutView.replacingChild(at: 9, with: trailingComma.map(RawSyntax.init), arena: arena).as(RawClosureCaptureItemSyntax.self)!
  }
  public var unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterTrailingComma(_ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawClosureCaptureItemSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedAfterTrailingComma.map(RawSyntax.init), arena: arena).as(RawClosureCaptureItemSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawClosureCaptureItemListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ClosureCaptureItemListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .closureCaptureItemList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawClosureCaptureItemSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .closureCaptureItemList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawClosureCaptureItemSyntax] {
    layoutView.children.map { RawClosureCaptureItemSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawClosureCaptureSignatureSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ClosureCaptureSignatureSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .closureCaptureSignature
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeLeftSquare: RawUnexpectedNodesSyntax? = nil,
    leftSquare: RawTokenSyntax,
    _ unexpectedBetweenLeftSquareAndItems: RawUnexpectedNodesSyntax? = nil,
    items: RawClosureCaptureItemListSyntax?,
    _ unexpectedBetweenItemsAndRightSquare: RawUnexpectedNodesSyntax? = nil,
    rightSquare: RawTokenSyntax,
    _ unexpectedAfterRightSquare: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .closureCaptureSignature, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeLeftSquare?.raw
      layout[1] = leftSquare.raw
      layout[2] = unexpectedBetweenLeftSquareAndItems?.raw
      layout[3] = items?.raw
      layout[4] = unexpectedBetweenItemsAndRightSquare?.raw
      layout[5] = rightSquare.raw
      layout[6] = unexpectedAfterRightSquare?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeLeftSquare: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeLeftSquare(_ unexpectedBeforeLeftSquare: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawClosureCaptureSignatureSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeLeftSquare.map(RawSyntax.init), arena: arena).as(RawClosureCaptureSignatureSyntax.self)!
  }
  public var leftSquare: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeftSquare(_ leftSquare: RawTokenSyntax, arena: SyntaxArena) -> RawClosureCaptureSignatureSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(leftSquare), arena: arena).as(RawClosureCaptureSignatureSyntax.self)!
  }
  public var unexpectedBetweenLeftSquareAndItems: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftSquareAndItems(_ unexpectedBetweenLeftSquareAndItems: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawClosureCaptureSignatureSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenLeftSquareAndItems.map(RawSyntax.init), arena: arena).as(RawClosureCaptureSignatureSyntax.self)!
  }
  public var items: RawClosureCaptureItemListSyntax? {
    layoutView.children[3].map(RawClosureCaptureItemListSyntax.init(raw:))
  }
  public func withItems(_ items: RawClosureCaptureItemListSyntax?, arena: SyntaxArena) -> RawClosureCaptureSignatureSyntax {
    return layoutView.replacingChild(at: 3, with: items.map(RawSyntax.init), arena: arena).as(RawClosureCaptureSignatureSyntax.self)!
  }
  public var unexpectedBetweenItemsAndRightSquare: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenItemsAndRightSquare(_ unexpectedBetweenItemsAndRightSquare: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawClosureCaptureSignatureSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenItemsAndRightSquare.map(RawSyntax.init), arena: arena).as(RawClosureCaptureSignatureSyntax.self)!
  }
  public var rightSquare: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withRightSquare(_ rightSquare: RawTokenSyntax, arena: SyntaxArena) -> RawClosureCaptureSignatureSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(rightSquare), arena: arena).as(RawClosureCaptureSignatureSyntax.self)!
  }
  public var unexpectedAfterRightSquare: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightSquare(_ unexpectedAfterRightSquare: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawClosureCaptureSignatureSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterRightSquare.map(RawSyntax.init), arena: arena).as(RawClosureCaptureSignatureSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawClosureParamSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ClosureParamSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .closureParam
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeName: RawUnexpectedNodesSyntax? = nil,
    name: RawTokenSyntax,
    _ unexpectedBetweenNameAndTrailingComma: RawUnexpectedNodesSyntax? = nil,
    trailingComma: RawTokenSyntax?,
    _ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .closureParam, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeName?.raw
      layout[1] = name.raw
      layout[2] = unexpectedBetweenNameAndTrailingComma?.raw
      layout[3] = trailingComma?.raw
      layout[4] = unexpectedAfterTrailingComma?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeName: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeName(_ unexpectedBeforeName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawClosureParamSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeName.map(RawSyntax.init), arena: arena).as(RawClosureParamSyntax.self)!
  }
  public var name: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withName(_ name: RawTokenSyntax, arena: SyntaxArena) -> RawClosureParamSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(name), arena: arena).as(RawClosureParamSyntax.self)!
  }
  public var unexpectedBetweenNameAndTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenNameAndTrailingComma(_ unexpectedBetweenNameAndTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawClosureParamSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenNameAndTrailingComma.map(RawSyntax.init), arena: arena).as(RawClosureParamSyntax.self)!
  }
  public var trailingComma: RawTokenSyntax? {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))
  }
  public func withTrailingComma(_ trailingComma: RawTokenSyntax?, arena: SyntaxArena) -> RawClosureParamSyntax {
    return layoutView.replacingChild(at: 3, with: trailingComma.map(RawSyntax.init), arena: arena).as(RawClosureParamSyntax.self)!
  }
  public var unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterTrailingComma(_ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawClosureParamSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterTrailingComma.map(RawSyntax.init), arena: arena).as(RawClosureParamSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawClosureParamListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ClosureParamListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .closureParamList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawClosureParamSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .closureParamList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawClosureParamSyntax] {
    layoutView.children.map { RawClosureParamSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawClosureSignatureSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public enum Input: RawSyntaxNodeProtocol {
    case `simpleInput`(RawClosureParamListSyntax)
    case `input`(RawParameterClauseSyntax)

    public static func isKindOf(_ raw: RawSyntax) -> Bool {
      return RawClosureParamListSyntax.isKindOf(raw) || RawParameterClauseSyntax.isKindOf(raw)
    }

    public var raw: RawSyntax {
      switch self {
      case .simpleInput(let node): return node.raw
      case .input(let node): return node.raw
      }
    }

    public init?<T>(_ other: T) where T : RawSyntaxNodeProtocol {
      if let node = RawClosureParamListSyntax(other) {
        self = .simpleInput(node)
        return
      }
      if let node = RawParameterClauseSyntax(other) {
        self = .input(node)
        return
      }
      return nil
    }
  }

  public typealias SyntaxType = ClosureSignatureSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .closureSignature
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? = nil,
    attributes: RawAttributeListSyntax?,
    _ unexpectedBetweenAttributesAndCapture: RawUnexpectedNodesSyntax? = nil,
    capture: RawClosureCaptureSignatureSyntax?,
    _ unexpectedBetweenCaptureAndInput: RawUnexpectedNodesSyntax? = nil,
    input: Input?,
    _ unexpectedBetweenInputAndAsyncKeyword: RawUnexpectedNodesSyntax? = nil,
    asyncKeyword: RawTokenSyntax?,
    _ unexpectedBetweenAsyncKeywordAndThrowsTok: RawUnexpectedNodesSyntax? = nil,
    throwsTok: RawTokenSyntax?,
    _ unexpectedBetweenThrowsTokAndOutput: RawUnexpectedNodesSyntax? = nil,
    output: RawReturnClauseSyntax?,
    _ unexpectedBetweenOutputAndInTok: RawUnexpectedNodesSyntax? = nil,
    inTok: RawTokenSyntax,
    _ unexpectedAfterInTok: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .closureSignature, uninitializedCount: 15, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeAttributes?.raw
      layout[1] = attributes?.raw
      layout[2] = unexpectedBetweenAttributesAndCapture?.raw
      layout[3] = capture?.raw
      layout[4] = unexpectedBetweenCaptureAndInput?.raw
      layout[5] = input?.raw
      layout[6] = unexpectedBetweenInputAndAsyncKeyword?.raw
      layout[7] = asyncKeyword?.raw
      layout[8] = unexpectedBetweenAsyncKeywordAndThrowsTok?.raw
      layout[9] = throwsTok?.raw
      layout[10] = unexpectedBetweenThrowsTokAndOutput?.raw
      layout[11] = output?.raw
      layout[12] = unexpectedBetweenOutputAndInTok?.raw
      layout[13] = inTok.raw
      layout[14] = unexpectedAfterInTok?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeAttributes(_ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawClosureSignatureSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeAttributes.map(RawSyntax.init), arena: arena).as(RawClosureSignatureSyntax.self)!
  }
  public var attributes: RawAttributeListSyntax? {
    layoutView.children[1].map(RawAttributeListSyntax.init(raw:))
  }
  public func withAttributes(_ attributes: RawAttributeListSyntax?, arena: SyntaxArena) -> RawClosureSignatureSyntax {
    return layoutView.replacingChild(at: 1, with: attributes.map(RawSyntax.init), arena: arena).as(RawClosureSignatureSyntax.self)!
  }
  public var unexpectedBetweenAttributesAndCapture: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAttributesAndCapture(_ unexpectedBetweenAttributesAndCapture: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawClosureSignatureSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenAttributesAndCapture.map(RawSyntax.init), arena: arena).as(RawClosureSignatureSyntax.self)!
  }
  public var capture: RawClosureCaptureSignatureSyntax? {
    layoutView.children[3].map(RawClosureCaptureSignatureSyntax.init(raw:))
  }
  public func withCapture(_ capture: RawClosureCaptureSignatureSyntax?, arena: SyntaxArena) -> RawClosureSignatureSyntax {
    return layoutView.replacingChild(at: 3, with: capture.map(RawSyntax.init), arena: arena).as(RawClosureSignatureSyntax.self)!
  }
  public var unexpectedBetweenCaptureAndInput: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenCaptureAndInput(_ unexpectedBetweenCaptureAndInput: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawClosureSignatureSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenCaptureAndInput.map(RawSyntax.init), arena: arena).as(RawClosureSignatureSyntax.self)!
  }
  public var input: RawSyntax? {
    layoutView.children[5]
  }
  public func withInput(_ input: RawSyntax?, arena: SyntaxArena) -> RawClosureSignatureSyntax {
    return layoutView.replacingChild(at: 5, with: input.map(RawSyntax.init), arena: arena).as(RawClosureSignatureSyntax.self)!
  }
  public var unexpectedBetweenInputAndAsyncKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenInputAndAsyncKeyword(_ unexpectedBetweenInputAndAsyncKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawClosureSignatureSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenInputAndAsyncKeyword.map(RawSyntax.init), arena: arena).as(RawClosureSignatureSyntax.self)!
  }
  public var asyncKeyword: RawTokenSyntax? {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))
  }
  public func withAsyncKeyword(_ asyncKeyword: RawTokenSyntax?, arena: SyntaxArena) -> RawClosureSignatureSyntax {
    return layoutView.replacingChild(at: 7, with: asyncKeyword.map(RawSyntax.init), arena: arena).as(RawClosureSignatureSyntax.self)!
  }
  public var unexpectedBetweenAsyncKeywordAndThrowsTok: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAsyncKeywordAndThrowsTok(_ unexpectedBetweenAsyncKeywordAndThrowsTok: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawClosureSignatureSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenAsyncKeywordAndThrowsTok.map(RawSyntax.init), arena: arena).as(RawClosureSignatureSyntax.self)!
  }
  public var throwsTok: RawTokenSyntax? {
    layoutView.children[9].map(RawTokenSyntax.init(raw:))
  }
  public func withThrowsTok(_ throwsTok: RawTokenSyntax?, arena: SyntaxArena) -> RawClosureSignatureSyntax {
    return layoutView.replacingChild(at: 9, with: throwsTok.map(RawSyntax.init), arena: arena).as(RawClosureSignatureSyntax.self)!
  }
  public var unexpectedBetweenThrowsTokAndOutput: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenThrowsTokAndOutput(_ unexpectedBetweenThrowsTokAndOutput: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawClosureSignatureSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedBetweenThrowsTokAndOutput.map(RawSyntax.init), arena: arena).as(RawClosureSignatureSyntax.self)!
  }
  public var output: RawReturnClauseSyntax? {
    layoutView.children[11].map(RawReturnClauseSyntax.init(raw:))
  }
  public func withOutput(_ output: RawReturnClauseSyntax?, arena: SyntaxArena) -> RawClosureSignatureSyntax {
    return layoutView.replacingChild(at: 11, with: output.map(RawSyntax.init), arena: arena).as(RawClosureSignatureSyntax.self)!
  }
  public var unexpectedBetweenOutputAndInTok: RawUnexpectedNodesSyntax? {
    layoutView.children[12].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenOutputAndInTok(_ unexpectedBetweenOutputAndInTok: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawClosureSignatureSyntax {
    return layoutView.replacingChild(at: 12, with: unexpectedBetweenOutputAndInTok.map(RawSyntax.init), arena: arena).as(RawClosureSignatureSyntax.self)!
  }
  public var inTok: RawTokenSyntax {
    layoutView.children[13].map(RawTokenSyntax.init(raw:))!
  }
  public func withInTok(_ inTok: RawTokenSyntax, arena: SyntaxArena) -> RawClosureSignatureSyntax {
    return layoutView.replacingChild(at: 13, with: RawSyntax(inTok), arena: arena).as(RawClosureSignatureSyntax.self)!
  }
  public var unexpectedAfterInTok: RawUnexpectedNodesSyntax? {
    layoutView.children[14].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterInTok(_ unexpectedAfterInTok: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawClosureSignatureSyntax {
    return layoutView.replacingChild(at: 14, with: unexpectedAfterInTok.map(RawSyntax.init), arena: arena).as(RawClosureSignatureSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawClosureExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ClosureExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .closureExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeLeftBrace: RawUnexpectedNodesSyntax? = nil,
    leftBrace: RawTokenSyntax,
    _ unexpectedBetweenLeftBraceAndSignature: RawUnexpectedNodesSyntax? = nil,
    signature: RawClosureSignatureSyntax?,
    _ unexpectedBetweenSignatureAndStatements: RawUnexpectedNodesSyntax? = nil,
    statements: RawCodeBlockItemListSyntax,
    _ unexpectedBetweenStatementsAndRightBrace: RawUnexpectedNodesSyntax? = nil,
    rightBrace: RawTokenSyntax,
    _ unexpectedAfterRightBrace: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .closureExpr, uninitializedCount: 9, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeLeftBrace?.raw
      layout[1] = leftBrace.raw
      layout[2] = unexpectedBetweenLeftBraceAndSignature?.raw
      layout[3] = signature?.raw
      layout[4] = unexpectedBetweenSignatureAndStatements?.raw
      layout[5] = statements.raw
      layout[6] = unexpectedBetweenStatementsAndRightBrace?.raw
      layout[7] = rightBrace.raw
      layout[8] = unexpectedAfterRightBrace?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeLeftBrace: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeLeftBrace(_ unexpectedBeforeLeftBrace: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawClosureExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeLeftBrace.map(RawSyntax.init), arena: arena).as(RawClosureExprSyntax.self)!
  }
  public var leftBrace: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeftBrace(_ leftBrace: RawTokenSyntax, arena: SyntaxArena) -> RawClosureExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(leftBrace), arena: arena).as(RawClosureExprSyntax.self)!
  }
  public var unexpectedBetweenLeftBraceAndSignature: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftBraceAndSignature(_ unexpectedBetweenLeftBraceAndSignature: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawClosureExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenLeftBraceAndSignature.map(RawSyntax.init), arena: arena).as(RawClosureExprSyntax.self)!
  }
  public var signature: RawClosureSignatureSyntax? {
    layoutView.children[3].map(RawClosureSignatureSyntax.init(raw:))
  }
  public func withSignature(_ signature: RawClosureSignatureSyntax?, arena: SyntaxArena) -> RawClosureExprSyntax {
    return layoutView.replacingChild(at: 3, with: signature.map(RawSyntax.init), arena: arena).as(RawClosureExprSyntax.self)!
  }
  public var unexpectedBetweenSignatureAndStatements: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenSignatureAndStatements(_ unexpectedBetweenSignatureAndStatements: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawClosureExprSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenSignatureAndStatements.map(RawSyntax.init), arena: arena).as(RawClosureExprSyntax.self)!
  }
  public var statements: RawCodeBlockItemListSyntax {
    layoutView.children[5].map(RawCodeBlockItemListSyntax.init(raw:))!
  }
  public func withStatements(_ statements: RawCodeBlockItemListSyntax, arena: SyntaxArena) -> RawClosureExprSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(statements), arena: arena).as(RawClosureExprSyntax.self)!
  }
  public var unexpectedBetweenStatementsAndRightBrace: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenStatementsAndRightBrace(_ unexpectedBetweenStatementsAndRightBrace: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawClosureExprSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenStatementsAndRightBrace.map(RawSyntax.init), arena: arena).as(RawClosureExprSyntax.self)!
  }
  public var rightBrace: RawTokenSyntax {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))!
  }
  public func withRightBrace(_ rightBrace: RawTokenSyntax, arena: SyntaxArena) -> RawClosureExprSyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(rightBrace), arena: arena).as(RawClosureExprSyntax.self)!
  }
  public var unexpectedAfterRightBrace: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightBrace(_ unexpectedAfterRightBrace: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawClosureExprSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedAfterRightBrace.map(RawSyntax.init), arena: arena).as(RawClosureExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawUnresolvedPatternExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = UnresolvedPatternExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .unresolvedPatternExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforePattern: RawUnexpectedNodesSyntax? = nil,
    pattern: RawPatternSyntax,
    _ unexpectedAfterPattern: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .unresolvedPatternExpr, uninitializedCount: 3, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforePattern?.raw
      layout[1] = pattern.raw
      layout[2] = unexpectedAfterPattern?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforePattern: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforePattern(_ unexpectedBeforePattern: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawUnresolvedPatternExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforePattern.map(RawSyntax.init), arena: arena).as(RawUnresolvedPatternExprSyntax.self)!
  }
  public var pattern: RawPatternSyntax {
    layoutView.children[1].map(RawPatternSyntax.init(raw:))!
  }
  public func withPattern(_ pattern: RawPatternSyntax, arena: SyntaxArena) -> RawUnresolvedPatternExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(pattern), arena: arena).as(RawUnresolvedPatternExprSyntax.self)!
  }
  public var unexpectedAfterPattern: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterPattern(_ unexpectedAfterPattern: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawUnresolvedPatternExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedAfterPattern.map(RawSyntax.init), arena: arena).as(RawUnresolvedPatternExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawMultipleTrailingClosureElementSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = MultipleTrailingClosureElementSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .multipleTrailingClosureElement
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeLabel: RawUnexpectedNodesSyntax? = nil,
    label: RawTokenSyntax,
    _ unexpectedBetweenLabelAndColon: RawUnexpectedNodesSyntax? = nil,
    colon: RawTokenSyntax,
    _ unexpectedBetweenColonAndClosure: RawUnexpectedNodesSyntax? = nil,
    closure: RawClosureExprSyntax,
    _ unexpectedAfterClosure: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .multipleTrailingClosureElement, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeLabel?.raw
      layout[1] = label.raw
      layout[2] = unexpectedBetweenLabelAndColon?.raw
      layout[3] = colon.raw
      layout[4] = unexpectedBetweenColonAndClosure?.raw
      layout[5] = closure.raw
      layout[6] = unexpectedAfterClosure?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeLabel: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeLabel(_ unexpectedBeforeLabel: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMultipleTrailingClosureElementSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeLabel.map(RawSyntax.init), arena: arena).as(RawMultipleTrailingClosureElementSyntax.self)!
  }
  public var label: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withLabel(_ label: RawTokenSyntax, arena: SyntaxArena) -> RawMultipleTrailingClosureElementSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(label), arena: arena).as(RawMultipleTrailingClosureElementSyntax.self)!
  }
  public var unexpectedBetweenLabelAndColon: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLabelAndColon(_ unexpectedBetweenLabelAndColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMultipleTrailingClosureElementSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenLabelAndColon.map(RawSyntax.init), arena: arena).as(RawMultipleTrailingClosureElementSyntax.self)!
  }
  public var colon: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withColon(_ colon: RawTokenSyntax, arena: SyntaxArena) -> RawMultipleTrailingClosureElementSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(colon), arena: arena).as(RawMultipleTrailingClosureElementSyntax.self)!
  }
  public var unexpectedBetweenColonAndClosure: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenColonAndClosure(_ unexpectedBetweenColonAndClosure: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMultipleTrailingClosureElementSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenColonAndClosure.map(RawSyntax.init), arena: arena).as(RawMultipleTrailingClosureElementSyntax.self)!
  }
  public var closure: RawClosureExprSyntax {
    layoutView.children[5].map(RawClosureExprSyntax.init(raw:))!
  }
  public func withClosure(_ closure: RawClosureExprSyntax, arena: SyntaxArena) -> RawMultipleTrailingClosureElementSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(closure), arena: arena).as(RawMultipleTrailingClosureElementSyntax.self)!
  }
  public var unexpectedAfterClosure: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterClosure(_ unexpectedAfterClosure: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMultipleTrailingClosureElementSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterClosure.map(RawSyntax.init), arena: arena).as(RawMultipleTrailingClosureElementSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawMultipleTrailingClosureElementListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = MultipleTrailingClosureElementListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .multipleTrailingClosureElementList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawMultipleTrailingClosureElementSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .multipleTrailingClosureElementList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawMultipleTrailingClosureElementSyntax] {
    layoutView.children.map { RawMultipleTrailingClosureElementSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawFunctionCallExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = FunctionCallExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .functionCallExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeCalledExpression: RawUnexpectedNodesSyntax? = nil,
    calledExpression: RawExprSyntax,
    _ unexpectedBetweenCalledExpressionAndLeftParen: RawUnexpectedNodesSyntax? = nil,
    leftParen: RawTokenSyntax?,
    _ unexpectedBetweenLeftParenAndArgumentList: RawUnexpectedNodesSyntax? = nil,
    argumentList: RawTupleExprElementListSyntax,
    _ unexpectedBetweenArgumentListAndRightParen: RawUnexpectedNodesSyntax? = nil,
    rightParen: RawTokenSyntax?,
    _ unexpectedBetweenRightParenAndTrailingClosure: RawUnexpectedNodesSyntax? = nil,
    trailingClosure: RawClosureExprSyntax?,
    _ unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: RawUnexpectedNodesSyntax? = nil,
    additionalTrailingClosures: RawMultipleTrailingClosureElementListSyntax?,
    _ unexpectedAfterAdditionalTrailingClosures: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .functionCallExpr, uninitializedCount: 13, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeCalledExpression?.raw
      layout[1] = calledExpression.raw
      layout[2] = unexpectedBetweenCalledExpressionAndLeftParen?.raw
      layout[3] = leftParen?.raw
      layout[4] = unexpectedBetweenLeftParenAndArgumentList?.raw
      layout[5] = argumentList.raw
      layout[6] = unexpectedBetweenArgumentListAndRightParen?.raw
      layout[7] = rightParen?.raw
      layout[8] = unexpectedBetweenRightParenAndTrailingClosure?.raw
      layout[9] = trailingClosure?.raw
      layout[10] = unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures?.raw
      layout[11] = additionalTrailingClosures?.raw
      layout[12] = unexpectedAfterAdditionalTrailingClosures?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeCalledExpression: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeCalledExpression(_ unexpectedBeforeCalledExpression: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionCallExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeCalledExpression.map(RawSyntax.init), arena: arena).as(RawFunctionCallExprSyntax.self)!
  }
  public var calledExpression: RawExprSyntax {
    layoutView.children[1].map(RawExprSyntax.init(raw:))!
  }
  public func withCalledExpression(_ calledExpression: RawExprSyntax, arena: SyntaxArena) -> RawFunctionCallExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(calledExpression), arena: arena).as(RawFunctionCallExprSyntax.self)!
  }
  public var unexpectedBetweenCalledExpressionAndLeftParen: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenCalledExpressionAndLeftParen(_ unexpectedBetweenCalledExpressionAndLeftParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionCallExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenCalledExpressionAndLeftParen.map(RawSyntax.init), arena: arena).as(RawFunctionCallExprSyntax.self)!
  }
  public var leftParen: RawTokenSyntax? {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))
  }
  public func withLeftParen(_ leftParen: RawTokenSyntax?, arena: SyntaxArena) -> RawFunctionCallExprSyntax {
    return layoutView.replacingChild(at: 3, with: leftParen.map(RawSyntax.init), arena: arena).as(RawFunctionCallExprSyntax.self)!
  }
  public var unexpectedBetweenLeftParenAndArgumentList: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftParenAndArgumentList(_ unexpectedBetweenLeftParenAndArgumentList: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionCallExprSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenLeftParenAndArgumentList.map(RawSyntax.init), arena: arena).as(RawFunctionCallExprSyntax.self)!
  }
  public var argumentList: RawTupleExprElementListSyntax {
    layoutView.children[5].map(RawTupleExprElementListSyntax.init(raw:))!
  }
  public func withArgumentList(_ argumentList: RawTupleExprElementListSyntax, arena: SyntaxArena) -> RawFunctionCallExprSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(argumentList), arena: arena).as(RawFunctionCallExprSyntax.self)!
  }
  public var unexpectedBetweenArgumentListAndRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenArgumentListAndRightParen(_ unexpectedBetweenArgumentListAndRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionCallExprSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenArgumentListAndRightParen.map(RawSyntax.init), arena: arena).as(RawFunctionCallExprSyntax.self)!
  }
  public var rightParen: RawTokenSyntax? {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))
  }
  public func withRightParen(_ rightParen: RawTokenSyntax?, arena: SyntaxArena) -> RawFunctionCallExprSyntax {
    return layoutView.replacingChild(at: 7, with: rightParen.map(RawSyntax.init), arena: arena).as(RawFunctionCallExprSyntax.self)!
  }
  public var unexpectedBetweenRightParenAndTrailingClosure: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenRightParenAndTrailingClosure(_ unexpectedBetweenRightParenAndTrailingClosure: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionCallExprSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenRightParenAndTrailingClosure.map(RawSyntax.init), arena: arena).as(RawFunctionCallExprSyntax.self)!
  }
  public var trailingClosure: RawClosureExprSyntax? {
    layoutView.children[9].map(RawClosureExprSyntax.init(raw:))
  }
  public func withTrailingClosure(_ trailingClosure: RawClosureExprSyntax?, arena: SyntaxArena) -> RawFunctionCallExprSyntax {
    return layoutView.replacingChild(at: 9, with: trailingClosure.map(RawSyntax.init), arena: arena).as(RawFunctionCallExprSyntax.self)!
  }
  public var unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenTrailingClosureAndAdditionalTrailingClosures(_ unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionCallExprSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures.map(RawSyntax.init), arena: arena).as(RawFunctionCallExprSyntax.self)!
  }
  public var additionalTrailingClosures: RawMultipleTrailingClosureElementListSyntax? {
    layoutView.children[11].map(RawMultipleTrailingClosureElementListSyntax.init(raw:))
  }
  public func withAdditionalTrailingClosures(_ additionalTrailingClosures: RawMultipleTrailingClosureElementListSyntax?, arena: SyntaxArena) -> RawFunctionCallExprSyntax {
    return layoutView.replacingChild(at: 11, with: additionalTrailingClosures.map(RawSyntax.init), arena: arena).as(RawFunctionCallExprSyntax.self)!
  }
  public var unexpectedAfterAdditionalTrailingClosures: RawUnexpectedNodesSyntax? {
    layoutView.children[12].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterAdditionalTrailingClosures(_ unexpectedAfterAdditionalTrailingClosures: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionCallExprSyntax {
    return layoutView.replacingChild(at: 12, with: unexpectedAfterAdditionalTrailingClosures.map(RawSyntax.init), arena: arena).as(RawFunctionCallExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawSubscriptExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = SubscriptExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .subscriptExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeCalledExpression: RawUnexpectedNodesSyntax? = nil,
    calledExpression: RawExprSyntax,
    _ unexpectedBetweenCalledExpressionAndLeftBracket: RawUnexpectedNodesSyntax? = nil,
    leftBracket: RawTokenSyntax,
    _ unexpectedBetweenLeftBracketAndArgumentList: RawUnexpectedNodesSyntax? = nil,
    argumentList: RawTupleExprElementListSyntax,
    _ unexpectedBetweenArgumentListAndRightBracket: RawUnexpectedNodesSyntax? = nil,
    rightBracket: RawTokenSyntax,
    _ unexpectedBetweenRightBracketAndTrailingClosure: RawUnexpectedNodesSyntax? = nil,
    trailingClosure: RawClosureExprSyntax?,
    _ unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: RawUnexpectedNodesSyntax? = nil,
    additionalTrailingClosures: RawMultipleTrailingClosureElementListSyntax?,
    _ unexpectedAfterAdditionalTrailingClosures: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .subscriptExpr, uninitializedCount: 13, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeCalledExpression?.raw
      layout[1] = calledExpression.raw
      layout[2] = unexpectedBetweenCalledExpressionAndLeftBracket?.raw
      layout[3] = leftBracket.raw
      layout[4] = unexpectedBetweenLeftBracketAndArgumentList?.raw
      layout[5] = argumentList.raw
      layout[6] = unexpectedBetweenArgumentListAndRightBracket?.raw
      layout[7] = rightBracket.raw
      layout[8] = unexpectedBetweenRightBracketAndTrailingClosure?.raw
      layout[9] = trailingClosure?.raw
      layout[10] = unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures?.raw
      layout[11] = additionalTrailingClosures?.raw
      layout[12] = unexpectedAfterAdditionalTrailingClosures?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeCalledExpression: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeCalledExpression(_ unexpectedBeforeCalledExpression: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSubscriptExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeCalledExpression.map(RawSyntax.init), arena: arena).as(RawSubscriptExprSyntax.self)!
  }
  public var calledExpression: RawExprSyntax {
    layoutView.children[1].map(RawExprSyntax.init(raw:))!
  }
  public func withCalledExpression(_ calledExpression: RawExprSyntax, arena: SyntaxArena) -> RawSubscriptExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(calledExpression), arena: arena).as(RawSubscriptExprSyntax.self)!
  }
  public var unexpectedBetweenCalledExpressionAndLeftBracket: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenCalledExpressionAndLeftBracket(_ unexpectedBetweenCalledExpressionAndLeftBracket: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSubscriptExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenCalledExpressionAndLeftBracket.map(RawSyntax.init), arena: arena).as(RawSubscriptExprSyntax.self)!
  }
  public var leftBracket: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeftBracket(_ leftBracket: RawTokenSyntax, arena: SyntaxArena) -> RawSubscriptExprSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(leftBracket), arena: arena).as(RawSubscriptExprSyntax.self)!
  }
  public var unexpectedBetweenLeftBracketAndArgumentList: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftBracketAndArgumentList(_ unexpectedBetweenLeftBracketAndArgumentList: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSubscriptExprSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenLeftBracketAndArgumentList.map(RawSyntax.init), arena: arena).as(RawSubscriptExprSyntax.self)!
  }
  public var argumentList: RawTupleExprElementListSyntax {
    layoutView.children[5].map(RawTupleExprElementListSyntax.init(raw:))!
  }
  public func withArgumentList(_ argumentList: RawTupleExprElementListSyntax, arena: SyntaxArena) -> RawSubscriptExprSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(argumentList), arena: arena).as(RawSubscriptExprSyntax.self)!
  }
  public var unexpectedBetweenArgumentListAndRightBracket: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenArgumentListAndRightBracket(_ unexpectedBetweenArgumentListAndRightBracket: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSubscriptExprSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenArgumentListAndRightBracket.map(RawSyntax.init), arena: arena).as(RawSubscriptExprSyntax.self)!
  }
  public var rightBracket: RawTokenSyntax {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))!
  }
  public func withRightBracket(_ rightBracket: RawTokenSyntax, arena: SyntaxArena) -> RawSubscriptExprSyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(rightBracket), arena: arena).as(RawSubscriptExprSyntax.self)!
  }
  public var unexpectedBetweenRightBracketAndTrailingClosure: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenRightBracketAndTrailingClosure(_ unexpectedBetweenRightBracketAndTrailingClosure: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSubscriptExprSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenRightBracketAndTrailingClosure.map(RawSyntax.init), arena: arena).as(RawSubscriptExprSyntax.self)!
  }
  public var trailingClosure: RawClosureExprSyntax? {
    layoutView.children[9].map(RawClosureExprSyntax.init(raw:))
  }
  public func withTrailingClosure(_ trailingClosure: RawClosureExprSyntax?, arena: SyntaxArena) -> RawSubscriptExprSyntax {
    return layoutView.replacingChild(at: 9, with: trailingClosure.map(RawSyntax.init), arena: arena).as(RawSubscriptExprSyntax.self)!
  }
  public var unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenTrailingClosureAndAdditionalTrailingClosures(_ unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSubscriptExprSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures.map(RawSyntax.init), arena: arena).as(RawSubscriptExprSyntax.self)!
  }
  public var additionalTrailingClosures: RawMultipleTrailingClosureElementListSyntax? {
    layoutView.children[11].map(RawMultipleTrailingClosureElementListSyntax.init(raw:))
  }
  public func withAdditionalTrailingClosures(_ additionalTrailingClosures: RawMultipleTrailingClosureElementListSyntax?, arena: SyntaxArena) -> RawSubscriptExprSyntax {
    return layoutView.replacingChild(at: 11, with: additionalTrailingClosures.map(RawSyntax.init), arena: arena).as(RawSubscriptExprSyntax.self)!
  }
  public var unexpectedAfterAdditionalTrailingClosures: RawUnexpectedNodesSyntax? {
    layoutView.children[12].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterAdditionalTrailingClosures(_ unexpectedAfterAdditionalTrailingClosures: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSubscriptExprSyntax {
    return layoutView.replacingChild(at: 12, with: unexpectedAfterAdditionalTrailingClosures.map(RawSyntax.init), arena: arena).as(RawSubscriptExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawOptionalChainingExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = OptionalChainingExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .optionalChainingExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeExpression: RawUnexpectedNodesSyntax? = nil,
    expression: RawExprSyntax,
    _ unexpectedBetweenExpressionAndQuestionMark: RawUnexpectedNodesSyntax? = nil,
    questionMark: RawTokenSyntax,
    _ unexpectedAfterQuestionMark: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .optionalChainingExpr, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeExpression?.raw
      layout[1] = expression.raw
      layout[2] = unexpectedBetweenExpressionAndQuestionMark?.raw
      layout[3] = questionMark.raw
      layout[4] = unexpectedAfterQuestionMark?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeExpression: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeExpression(_ unexpectedBeforeExpression: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawOptionalChainingExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeExpression.map(RawSyntax.init), arena: arena).as(RawOptionalChainingExprSyntax.self)!
  }
  public var expression: RawExprSyntax {
    layoutView.children[1].map(RawExprSyntax.init(raw:))!
  }
  public func withExpression(_ expression: RawExprSyntax, arena: SyntaxArena) -> RawOptionalChainingExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(expression), arena: arena).as(RawOptionalChainingExprSyntax.self)!
  }
  public var unexpectedBetweenExpressionAndQuestionMark: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenExpressionAndQuestionMark(_ unexpectedBetweenExpressionAndQuestionMark: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawOptionalChainingExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenExpressionAndQuestionMark.map(RawSyntax.init), arena: arena).as(RawOptionalChainingExprSyntax.self)!
  }
  public var questionMark: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withQuestionMark(_ questionMark: RawTokenSyntax, arena: SyntaxArena) -> RawOptionalChainingExprSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(questionMark), arena: arena).as(RawOptionalChainingExprSyntax.self)!
  }
  public var unexpectedAfterQuestionMark: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterQuestionMark(_ unexpectedAfterQuestionMark: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawOptionalChainingExprSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterQuestionMark.map(RawSyntax.init), arena: arena).as(RawOptionalChainingExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawForcedValueExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ForcedValueExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .forcedValueExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeExpression: RawUnexpectedNodesSyntax? = nil,
    expression: RawExprSyntax,
    _ unexpectedBetweenExpressionAndExclamationMark: RawUnexpectedNodesSyntax? = nil,
    exclamationMark: RawTokenSyntax,
    _ unexpectedAfterExclamationMark: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .forcedValueExpr, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeExpression?.raw
      layout[1] = expression.raw
      layout[2] = unexpectedBetweenExpressionAndExclamationMark?.raw
      layout[3] = exclamationMark.raw
      layout[4] = unexpectedAfterExclamationMark?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeExpression: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeExpression(_ unexpectedBeforeExpression: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawForcedValueExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeExpression.map(RawSyntax.init), arena: arena).as(RawForcedValueExprSyntax.self)!
  }
  public var expression: RawExprSyntax {
    layoutView.children[1].map(RawExprSyntax.init(raw:))!
  }
  public func withExpression(_ expression: RawExprSyntax, arena: SyntaxArena) -> RawForcedValueExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(expression), arena: arena).as(RawForcedValueExprSyntax.self)!
  }
  public var unexpectedBetweenExpressionAndExclamationMark: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenExpressionAndExclamationMark(_ unexpectedBetweenExpressionAndExclamationMark: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawForcedValueExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenExpressionAndExclamationMark.map(RawSyntax.init), arena: arena).as(RawForcedValueExprSyntax.self)!
  }
  public var exclamationMark: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withExclamationMark(_ exclamationMark: RawTokenSyntax, arena: SyntaxArena) -> RawForcedValueExprSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(exclamationMark), arena: arena).as(RawForcedValueExprSyntax.self)!
  }
  public var unexpectedAfterExclamationMark: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterExclamationMark(_ unexpectedAfterExclamationMark: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawForcedValueExprSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterExclamationMark.map(RawSyntax.init), arena: arena).as(RawForcedValueExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawPostfixUnaryExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = PostfixUnaryExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .postfixUnaryExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeExpression: RawUnexpectedNodesSyntax? = nil,
    expression: RawExprSyntax,
    _ unexpectedBetweenExpressionAndOperatorToken: RawUnexpectedNodesSyntax? = nil,
    operatorToken: RawTokenSyntax,
    _ unexpectedAfterOperatorToken: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .postfixUnaryExpr, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeExpression?.raw
      layout[1] = expression.raw
      layout[2] = unexpectedBetweenExpressionAndOperatorToken?.raw
      layout[3] = operatorToken.raw
      layout[4] = unexpectedAfterOperatorToken?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeExpression: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeExpression(_ unexpectedBeforeExpression: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPostfixUnaryExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeExpression.map(RawSyntax.init), arena: arena).as(RawPostfixUnaryExprSyntax.self)!
  }
  public var expression: RawExprSyntax {
    layoutView.children[1].map(RawExprSyntax.init(raw:))!
  }
  public func withExpression(_ expression: RawExprSyntax, arena: SyntaxArena) -> RawPostfixUnaryExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(expression), arena: arena).as(RawPostfixUnaryExprSyntax.self)!
  }
  public var unexpectedBetweenExpressionAndOperatorToken: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenExpressionAndOperatorToken(_ unexpectedBetweenExpressionAndOperatorToken: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPostfixUnaryExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenExpressionAndOperatorToken.map(RawSyntax.init), arena: arena).as(RawPostfixUnaryExprSyntax.self)!
  }
  public var operatorToken: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withOperatorToken(_ operatorToken: RawTokenSyntax, arena: SyntaxArena) -> RawPostfixUnaryExprSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(operatorToken), arena: arena).as(RawPostfixUnaryExprSyntax.self)!
  }
  public var unexpectedAfterOperatorToken: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterOperatorToken(_ unexpectedAfterOperatorToken: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPostfixUnaryExprSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterOperatorToken.map(RawSyntax.init), arena: arena).as(RawPostfixUnaryExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawSpecializeExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = SpecializeExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .specializeExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeExpression: RawUnexpectedNodesSyntax? = nil,
    expression: RawExprSyntax,
    _ unexpectedBetweenExpressionAndGenericArgumentClause: RawUnexpectedNodesSyntax? = nil,
    genericArgumentClause: RawGenericArgumentClauseSyntax,
    _ unexpectedAfterGenericArgumentClause: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .specializeExpr, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeExpression?.raw
      layout[1] = expression.raw
      layout[2] = unexpectedBetweenExpressionAndGenericArgumentClause?.raw
      layout[3] = genericArgumentClause.raw
      layout[4] = unexpectedAfterGenericArgumentClause?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeExpression: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeExpression(_ unexpectedBeforeExpression: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSpecializeExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeExpression.map(RawSyntax.init), arena: arena).as(RawSpecializeExprSyntax.self)!
  }
  public var expression: RawExprSyntax {
    layoutView.children[1].map(RawExprSyntax.init(raw:))!
  }
  public func withExpression(_ expression: RawExprSyntax, arena: SyntaxArena) -> RawSpecializeExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(expression), arena: arena).as(RawSpecializeExprSyntax.self)!
  }
  public var unexpectedBetweenExpressionAndGenericArgumentClause: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenExpressionAndGenericArgumentClause(_ unexpectedBetweenExpressionAndGenericArgumentClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSpecializeExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenExpressionAndGenericArgumentClause.map(RawSyntax.init), arena: arena).as(RawSpecializeExprSyntax.self)!
  }
  public var genericArgumentClause: RawGenericArgumentClauseSyntax {
    layoutView.children[3].map(RawGenericArgumentClauseSyntax.init(raw:))!
  }
  public func withGenericArgumentClause(_ genericArgumentClause: RawGenericArgumentClauseSyntax, arena: SyntaxArena) -> RawSpecializeExprSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(genericArgumentClause), arena: arena).as(RawSpecializeExprSyntax.self)!
  }
  public var unexpectedAfterGenericArgumentClause: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterGenericArgumentClause(_ unexpectedAfterGenericArgumentClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSpecializeExprSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterGenericArgumentClause.map(RawSyntax.init), arena: arena).as(RawSpecializeExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawStringSegmentSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = StringSegmentSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .stringSegment
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeContent: RawUnexpectedNodesSyntax? = nil,
    content: RawTokenSyntax,
    _ unexpectedAfterContent: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .stringSegment, uninitializedCount: 3, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeContent?.raw
      layout[1] = content.raw
      layout[2] = unexpectedAfterContent?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeContent: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeContent(_ unexpectedBeforeContent: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawStringSegmentSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeContent.map(RawSyntax.init), arena: arena).as(RawStringSegmentSyntax.self)!
  }
  public var content: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withContent(_ content: RawTokenSyntax, arena: SyntaxArena) -> RawStringSegmentSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(content), arena: arena).as(RawStringSegmentSyntax.self)!
  }
  public var unexpectedAfterContent: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterContent(_ unexpectedAfterContent: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawStringSegmentSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedAfterContent.map(RawSyntax.init), arena: arena).as(RawStringSegmentSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawExpressionSegmentSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ExpressionSegmentSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .expressionSegment
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeBackslash: RawUnexpectedNodesSyntax? = nil,
    backslash: RawTokenSyntax,
    _ unexpectedBetweenBackslashAndDelimiter: RawUnexpectedNodesSyntax? = nil,
    delimiter: RawTokenSyntax?,
    _ unexpectedBetweenDelimiterAndLeftParen: RawUnexpectedNodesSyntax? = nil,
    leftParen: RawTokenSyntax,
    _ unexpectedBetweenLeftParenAndExpressions: RawUnexpectedNodesSyntax? = nil,
    expressions: RawTupleExprElementListSyntax,
    _ unexpectedBetweenExpressionsAndRightParen: RawUnexpectedNodesSyntax? = nil,
    rightParen: RawTokenSyntax,
    _ unexpectedAfterRightParen: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .expressionSegment, uninitializedCount: 11, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeBackslash?.raw
      layout[1] = backslash.raw
      layout[2] = unexpectedBetweenBackslashAndDelimiter?.raw
      layout[3] = delimiter?.raw
      layout[4] = unexpectedBetweenDelimiterAndLeftParen?.raw
      layout[5] = leftParen.raw
      layout[6] = unexpectedBetweenLeftParenAndExpressions?.raw
      layout[7] = expressions.raw
      layout[8] = unexpectedBetweenExpressionsAndRightParen?.raw
      layout[9] = rightParen.raw
      layout[10] = unexpectedAfterRightParen?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeBackslash: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeBackslash(_ unexpectedBeforeBackslash: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawExpressionSegmentSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeBackslash.map(RawSyntax.init), arena: arena).as(RawExpressionSegmentSyntax.self)!
  }
  public var backslash: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withBackslash(_ backslash: RawTokenSyntax, arena: SyntaxArena) -> RawExpressionSegmentSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(backslash), arena: arena).as(RawExpressionSegmentSyntax.self)!
  }
  public var unexpectedBetweenBackslashAndDelimiter: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenBackslashAndDelimiter(_ unexpectedBetweenBackslashAndDelimiter: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawExpressionSegmentSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenBackslashAndDelimiter.map(RawSyntax.init), arena: arena).as(RawExpressionSegmentSyntax.self)!
  }
  public var delimiter: RawTokenSyntax? {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))
  }
  public func withDelimiter(_ delimiter: RawTokenSyntax?, arena: SyntaxArena) -> RawExpressionSegmentSyntax {
    return layoutView.replacingChild(at: 3, with: delimiter.map(RawSyntax.init), arena: arena).as(RawExpressionSegmentSyntax.self)!
  }
  public var unexpectedBetweenDelimiterAndLeftParen: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenDelimiterAndLeftParen(_ unexpectedBetweenDelimiterAndLeftParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawExpressionSegmentSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenDelimiterAndLeftParen.map(RawSyntax.init), arena: arena).as(RawExpressionSegmentSyntax.self)!
  }
  public var leftParen: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeftParen(_ leftParen: RawTokenSyntax, arena: SyntaxArena) -> RawExpressionSegmentSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(leftParen), arena: arena).as(RawExpressionSegmentSyntax.self)!
  }
  public var unexpectedBetweenLeftParenAndExpressions: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftParenAndExpressions(_ unexpectedBetweenLeftParenAndExpressions: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawExpressionSegmentSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenLeftParenAndExpressions.map(RawSyntax.init), arena: arena).as(RawExpressionSegmentSyntax.self)!
  }
  public var expressions: RawTupleExprElementListSyntax {
    layoutView.children[7].map(RawTupleExprElementListSyntax.init(raw:))!
  }
  public func withExpressions(_ expressions: RawTupleExprElementListSyntax, arena: SyntaxArena) -> RawExpressionSegmentSyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(expressions), arena: arena).as(RawExpressionSegmentSyntax.self)!
  }
  public var unexpectedBetweenExpressionsAndRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenExpressionsAndRightParen(_ unexpectedBetweenExpressionsAndRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawExpressionSegmentSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenExpressionsAndRightParen.map(RawSyntax.init), arena: arena).as(RawExpressionSegmentSyntax.self)!
  }
  public var rightParen: RawTokenSyntax {
    layoutView.children[9].map(RawTokenSyntax.init(raw:))!
  }
  public func withRightParen(_ rightParen: RawTokenSyntax, arena: SyntaxArena) -> RawExpressionSegmentSyntax {
    return layoutView.replacingChild(at: 9, with: RawSyntax(rightParen), arena: arena).as(RawExpressionSegmentSyntax.self)!
  }
  public var unexpectedAfterRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightParen(_ unexpectedAfterRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawExpressionSegmentSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedAfterRightParen.map(RawSyntax.init), arena: arena).as(RawExpressionSegmentSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawStringLiteralExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = StringLiteralExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .stringLiteralExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeOpenDelimiter: RawUnexpectedNodesSyntax? = nil,
    openDelimiter: RawTokenSyntax?,
    _ unexpectedBetweenOpenDelimiterAndOpenQuote: RawUnexpectedNodesSyntax? = nil,
    openQuote: RawTokenSyntax,
    _ unexpectedBetweenOpenQuoteAndSegments: RawUnexpectedNodesSyntax? = nil,
    segments: RawStringLiteralSegmentsSyntax,
    _ unexpectedBetweenSegmentsAndCloseQuote: RawUnexpectedNodesSyntax? = nil,
    closeQuote: RawTokenSyntax,
    _ unexpectedBetweenCloseQuoteAndCloseDelimiter: RawUnexpectedNodesSyntax? = nil,
    closeDelimiter: RawTokenSyntax?,
    _ unexpectedAfterCloseDelimiter: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .stringLiteralExpr, uninitializedCount: 11, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeOpenDelimiter?.raw
      layout[1] = openDelimiter?.raw
      layout[2] = unexpectedBetweenOpenDelimiterAndOpenQuote?.raw
      layout[3] = openQuote.raw
      layout[4] = unexpectedBetweenOpenQuoteAndSegments?.raw
      layout[5] = segments.raw
      layout[6] = unexpectedBetweenSegmentsAndCloseQuote?.raw
      layout[7] = closeQuote.raw
      layout[8] = unexpectedBetweenCloseQuoteAndCloseDelimiter?.raw
      layout[9] = closeDelimiter?.raw
      layout[10] = unexpectedAfterCloseDelimiter?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeOpenDelimiter: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeOpenDelimiter(_ unexpectedBeforeOpenDelimiter: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawStringLiteralExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeOpenDelimiter.map(RawSyntax.init), arena: arena).as(RawStringLiteralExprSyntax.self)!
  }
  public var openDelimiter: RawTokenSyntax? {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))
  }
  public func withOpenDelimiter(_ openDelimiter: RawTokenSyntax?, arena: SyntaxArena) -> RawStringLiteralExprSyntax {
    return layoutView.replacingChild(at: 1, with: openDelimiter.map(RawSyntax.init), arena: arena).as(RawStringLiteralExprSyntax.self)!
  }
  public var unexpectedBetweenOpenDelimiterAndOpenQuote: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenOpenDelimiterAndOpenQuote(_ unexpectedBetweenOpenDelimiterAndOpenQuote: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawStringLiteralExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenOpenDelimiterAndOpenQuote.map(RawSyntax.init), arena: arena).as(RawStringLiteralExprSyntax.self)!
  }
  public var openQuote: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withOpenQuote(_ openQuote: RawTokenSyntax, arena: SyntaxArena) -> RawStringLiteralExprSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(openQuote), arena: arena).as(RawStringLiteralExprSyntax.self)!
  }
  public var unexpectedBetweenOpenQuoteAndSegments: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenOpenQuoteAndSegments(_ unexpectedBetweenOpenQuoteAndSegments: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawStringLiteralExprSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenOpenQuoteAndSegments.map(RawSyntax.init), arena: arena).as(RawStringLiteralExprSyntax.self)!
  }
  public var segments: RawStringLiteralSegmentsSyntax {
    layoutView.children[5].map(RawStringLiteralSegmentsSyntax.init(raw:))!
  }
  public func withSegments(_ segments: RawStringLiteralSegmentsSyntax, arena: SyntaxArena) -> RawStringLiteralExprSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(segments), arena: arena).as(RawStringLiteralExprSyntax.self)!
  }
  public var unexpectedBetweenSegmentsAndCloseQuote: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenSegmentsAndCloseQuote(_ unexpectedBetweenSegmentsAndCloseQuote: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawStringLiteralExprSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenSegmentsAndCloseQuote.map(RawSyntax.init), arena: arena).as(RawStringLiteralExprSyntax.self)!
  }
  public var closeQuote: RawTokenSyntax {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))!
  }
  public func withCloseQuote(_ closeQuote: RawTokenSyntax, arena: SyntaxArena) -> RawStringLiteralExprSyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(closeQuote), arena: arena).as(RawStringLiteralExprSyntax.self)!
  }
  public var unexpectedBetweenCloseQuoteAndCloseDelimiter: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenCloseQuoteAndCloseDelimiter(_ unexpectedBetweenCloseQuoteAndCloseDelimiter: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawStringLiteralExprSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenCloseQuoteAndCloseDelimiter.map(RawSyntax.init), arena: arena).as(RawStringLiteralExprSyntax.self)!
  }
  public var closeDelimiter: RawTokenSyntax? {
    layoutView.children[9].map(RawTokenSyntax.init(raw:))
  }
  public func withCloseDelimiter(_ closeDelimiter: RawTokenSyntax?, arena: SyntaxArena) -> RawStringLiteralExprSyntax {
    return layoutView.replacingChild(at: 9, with: closeDelimiter.map(RawSyntax.init), arena: arena).as(RawStringLiteralExprSyntax.self)!
  }
  public var unexpectedAfterCloseDelimiter: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterCloseDelimiter(_ unexpectedAfterCloseDelimiter: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawStringLiteralExprSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedAfterCloseDelimiter.map(RawSyntax.init), arena: arena).as(RawStringLiteralExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawRegexLiteralExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = RegexLiteralExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .regexLiteralExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeRegex: RawUnexpectedNodesSyntax? = nil,
    regex: RawTokenSyntax,
    _ unexpectedAfterRegex: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .regexLiteralExpr, uninitializedCount: 3, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeRegex?.raw
      layout[1] = regex.raw
      layout[2] = unexpectedAfterRegex?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeRegex: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeRegex(_ unexpectedBeforeRegex: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawRegexLiteralExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeRegex.map(RawSyntax.init), arena: arena).as(RawRegexLiteralExprSyntax.self)!
  }
  public var regex: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withRegex(_ regex: RawTokenSyntax, arena: SyntaxArena) -> RawRegexLiteralExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(regex), arena: arena).as(RawRegexLiteralExprSyntax.self)!
  }
  public var unexpectedAfterRegex: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRegex(_ unexpectedAfterRegex: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawRegexLiteralExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedAfterRegex.map(RawSyntax.init), arena: arena).as(RawRegexLiteralExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawKeyPathExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = KeyPathExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .keyPathExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeBackslash: RawUnexpectedNodesSyntax? = nil,
    backslash: RawTokenSyntax,
    _ unexpectedBetweenBackslashAndRoot: RawUnexpectedNodesSyntax? = nil,
    root: RawTypeSyntax?,
    _ unexpectedBetweenRootAndComponents: RawUnexpectedNodesSyntax? = nil,
    components: RawKeyPathComponentListSyntax,
    _ unexpectedAfterComponents: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .keyPathExpr, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeBackslash?.raw
      layout[1] = backslash.raw
      layout[2] = unexpectedBetweenBackslashAndRoot?.raw
      layout[3] = root?.raw
      layout[4] = unexpectedBetweenRootAndComponents?.raw
      layout[5] = components.raw
      layout[6] = unexpectedAfterComponents?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeBackslash: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeBackslash(_ unexpectedBeforeBackslash: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawKeyPathExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeBackslash.map(RawSyntax.init), arena: arena).as(RawKeyPathExprSyntax.self)!
  }
  public var backslash: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withBackslash(_ backslash: RawTokenSyntax, arena: SyntaxArena) -> RawKeyPathExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(backslash), arena: arena).as(RawKeyPathExprSyntax.self)!
  }
  public var unexpectedBetweenBackslashAndRoot: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenBackslashAndRoot(_ unexpectedBetweenBackslashAndRoot: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawKeyPathExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenBackslashAndRoot.map(RawSyntax.init), arena: arena).as(RawKeyPathExprSyntax.self)!
  }
  public var root: RawTypeSyntax? {
    layoutView.children[3].map(RawTypeSyntax.init(raw:))
  }
  public func withRoot(_ root: RawTypeSyntax?, arena: SyntaxArena) -> RawKeyPathExprSyntax {
    return layoutView.replacingChild(at: 3, with: root.map(RawSyntax.init), arena: arena).as(RawKeyPathExprSyntax.self)!
  }
  public var unexpectedBetweenRootAndComponents: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenRootAndComponents(_ unexpectedBetweenRootAndComponents: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawKeyPathExprSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenRootAndComponents.map(RawSyntax.init), arena: arena).as(RawKeyPathExprSyntax.self)!
  }
  public var components: RawKeyPathComponentListSyntax {
    layoutView.children[5].map(RawKeyPathComponentListSyntax.init(raw:))!
  }
  public func withComponents(_ components: RawKeyPathComponentListSyntax, arena: SyntaxArena) -> RawKeyPathExprSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(components), arena: arena).as(RawKeyPathExprSyntax.self)!
  }
  public var unexpectedAfterComponents: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterComponents(_ unexpectedAfterComponents: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawKeyPathExprSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterComponents.map(RawSyntax.init), arena: arena).as(RawKeyPathExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawKeyPathComponentListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = KeyPathComponentListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .keyPathComponentList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawKeyPathComponentSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .keyPathComponentList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawKeyPathComponentSyntax] {
    layoutView.children.map { RawKeyPathComponentSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawKeyPathComponentSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public enum Component: RawSyntaxNodeProtocol {
    case `property`(RawKeyPathPropertyComponentSyntax)
    case `subscript`(RawKeyPathSubscriptComponentSyntax)
    case `optional`(RawKeyPathOptionalComponentSyntax)

    public static func isKindOf(_ raw: RawSyntax) -> Bool {
      return RawKeyPathPropertyComponentSyntax.isKindOf(raw) || RawKeyPathSubscriptComponentSyntax.isKindOf(raw) || RawKeyPathOptionalComponentSyntax.isKindOf(raw)
    }

    public var raw: RawSyntax {
      switch self {
      case .property(let node): return node.raw
      case .subscript(let node): return node.raw
      case .optional(let node): return node.raw
      }
    }

    public init?<T>(_ other: T) where T : RawSyntaxNodeProtocol {
      if let node = RawKeyPathPropertyComponentSyntax(other) {
        self = .property(node)
        return
      }
      if let node = RawKeyPathSubscriptComponentSyntax(other) {
        self = .subscript(node)
        return
      }
      if let node = RawKeyPathOptionalComponentSyntax(other) {
        self = .optional(node)
        return
      }
      return nil
    }
  }

  public typealias SyntaxType = KeyPathComponentSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .keyPathComponent
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforePeriod: RawUnexpectedNodesSyntax? = nil,
    period: RawTokenSyntax?,
    _ unexpectedBetweenPeriodAndComponent: RawUnexpectedNodesSyntax? = nil,
    component: Component,
    _ unexpectedAfterComponent: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .keyPathComponent, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforePeriod?.raw
      layout[1] = period?.raw
      layout[2] = unexpectedBetweenPeriodAndComponent?.raw
      layout[3] = component.raw
      layout[4] = unexpectedAfterComponent?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforePeriod: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforePeriod(_ unexpectedBeforePeriod: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawKeyPathComponentSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforePeriod.map(RawSyntax.init), arena: arena).as(RawKeyPathComponentSyntax.self)!
  }
  public var period: RawTokenSyntax? {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))
  }
  public func withPeriod(_ period: RawTokenSyntax?, arena: SyntaxArena) -> RawKeyPathComponentSyntax {
    return layoutView.replacingChild(at: 1, with: period.map(RawSyntax.init), arena: arena).as(RawKeyPathComponentSyntax.self)!
  }
  public var unexpectedBetweenPeriodAndComponent: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenPeriodAndComponent(_ unexpectedBetweenPeriodAndComponent: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawKeyPathComponentSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenPeriodAndComponent.map(RawSyntax.init), arena: arena).as(RawKeyPathComponentSyntax.self)!
  }
  public var component: RawSyntax {
    layoutView.children[3]!
  }
  public func withComponent(_ component: RawSyntax, arena: SyntaxArena) -> RawKeyPathComponentSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(component), arena: arena).as(RawKeyPathComponentSyntax.self)!
  }
  public var unexpectedAfterComponent: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterComponent(_ unexpectedAfterComponent: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawKeyPathComponentSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterComponent.map(RawSyntax.init), arena: arena).as(RawKeyPathComponentSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawKeyPathPropertyComponentSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = KeyPathPropertyComponentSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .keyPathPropertyComponent
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeIdentifier: RawUnexpectedNodesSyntax? = nil,
    identifier: RawTokenSyntax,
    _ unexpectedBetweenIdentifierAndDeclNameArguments: RawUnexpectedNodesSyntax? = nil,
    declNameArguments: RawDeclNameArgumentsSyntax?,
    _ unexpectedBetweenDeclNameArgumentsAndGenericArgumentClause: RawUnexpectedNodesSyntax? = nil,
    genericArgumentClause: RawGenericArgumentClauseSyntax?,
    _ unexpectedAfterGenericArgumentClause: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .keyPathPropertyComponent, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeIdentifier?.raw
      layout[1] = identifier.raw
      layout[2] = unexpectedBetweenIdentifierAndDeclNameArguments?.raw
      layout[3] = declNameArguments?.raw
      layout[4] = unexpectedBetweenDeclNameArgumentsAndGenericArgumentClause?.raw
      layout[5] = genericArgumentClause?.raw
      layout[6] = unexpectedAfterGenericArgumentClause?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeIdentifier: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeIdentifier(_ unexpectedBeforeIdentifier: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawKeyPathPropertyComponentSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeIdentifier.map(RawSyntax.init), arena: arena).as(RawKeyPathPropertyComponentSyntax.self)!
  }
  public var identifier: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withIdentifier(_ identifier: RawTokenSyntax, arena: SyntaxArena) -> RawKeyPathPropertyComponentSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(identifier), arena: arena).as(RawKeyPathPropertyComponentSyntax.self)!
  }
  public var unexpectedBetweenIdentifierAndDeclNameArguments: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenIdentifierAndDeclNameArguments(_ unexpectedBetweenIdentifierAndDeclNameArguments: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawKeyPathPropertyComponentSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenIdentifierAndDeclNameArguments.map(RawSyntax.init), arena: arena).as(RawKeyPathPropertyComponentSyntax.self)!
  }
  public var declNameArguments: RawDeclNameArgumentsSyntax? {
    layoutView.children[3].map(RawDeclNameArgumentsSyntax.init(raw:))
  }
  public func withDeclNameArguments(_ declNameArguments: RawDeclNameArgumentsSyntax?, arena: SyntaxArena) -> RawKeyPathPropertyComponentSyntax {
    return layoutView.replacingChild(at: 3, with: declNameArguments.map(RawSyntax.init), arena: arena).as(RawKeyPathPropertyComponentSyntax.self)!
  }
  public var unexpectedBetweenDeclNameArgumentsAndGenericArgumentClause: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenDeclNameArgumentsAndGenericArgumentClause(_ unexpectedBetweenDeclNameArgumentsAndGenericArgumentClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawKeyPathPropertyComponentSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenDeclNameArgumentsAndGenericArgumentClause.map(RawSyntax.init), arena: arena).as(RawKeyPathPropertyComponentSyntax.self)!
  }
  public var genericArgumentClause: RawGenericArgumentClauseSyntax? {
    layoutView.children[5].map(RawGenericArgumentClauseSyntax.init(raw:))
  }
  public func withGenericArgumentClause(_ genericArgumentClause: RawGenericArgumentClauseSyntax?, arena: SyntaxArena) -> RawKeyPathPropertyComponentSyntax {
    return layoutView.replacingChild(at: 5, with: genericArgumentClause.map(RawSyntax.init), arena: arena).as(RawKeyPathPropertyComponentSyntax.self)!
  }
  public var unexpectedAfterGenericArgumentClause: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterGenericArgumentClause(_ unexpectedAfterGenericArgumentClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawKeyPathPropertyComponentSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterGenericArgumentClause.map(RawSyntax.init), arena: arena).as(RawKeyPathPropertyComponentSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawKeyPathSubscriptComponentSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = KeyPathSubscriptComponentSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .keyPathSubscriptComponent
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeLeftBracket: RawUnexpectedNodesSyntax? = nil,
    leftBracket: RawTokenSyntax,
    _ unexpectedBetweenLeftBracketAndArgumentList: RawUnexpectedNodesSyntax? = nil,
    argumentList: RawTupleExprElementListSyntax,
    _ unexpectedBetweenArgumentListAndRightBracket: RawUnexpectedNodesSyntax? = nil,
    rightBracket: RawTokenSyntax,
    _ unexpectedAfterRightBracket: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .keyPathSubscriptComponent, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeLeftBracket?.raw
      layout[1] = leftBracket.raw
      layout[2] = unexpectedBetweenLeftBracketAndArgumentList?.raw
      layout[3] = argumentList.raw
      layout[4] = unexpectedBetweenArgumentListAndRightBracket?.raw
      layout[5] = rightBracket.raw
      layout[6] = unexpectedAfterRightBracket?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeLeftBracket: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeLeftBracket(_ unexpectedBeforeLeftBracket: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawKeyPathSubscriptComponentSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeLeftBracket.map(RawSyntax.init), arena: arena).as(RawKeyPathSubscriptComponentSyntax.self)!
  }
  public var leftBracket: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeftBracket(_ leftBracket: RawTokenSyntax, arena: SyntaxArena) -> RawKeyPathSubscriptComponentSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(leftBracket), arena: arena).as(RawKeyPathSubscriptComponentSyntax.self)!
  }
  public var unexpectedBetweenLeftBracketAndArgumentList: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftBracketAndArgumentList(_ unexpectedBetweenLeftBracketAndArgumentList: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawKeyPathSubscriptComponentSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenLeftBracketAndArgumentList.map(RawSyntax.init), arena: arena).as(RawKeyPathSubscriptComponentSyntax.self)!
  }
  public var argumentList: RawTupleExprElementListSyntax {
    layoutView.children[3].map(RawTupleExprElementListSyntax.init(raw:))!
  }
  public func withArgumentList(_ argumentList: RawTupleExprElementListSyntax, arena: SyntaxArena) -> RawKeyPathSubscriptComponentSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(argumentList), arena: arena).as(RawKeyPathSubscriptComponentSyntax.self)!
  }
  public var unexpectedBetweenArgumentListAndRightBracket: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenArgumentListAndRightBracket(_ unexpectedBetweenArgumentListAndRightBracket: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawKeyPathSubscriptComponentSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenArgumentListAndRightBracket.map(RawSyntax.init), arena: arena).as(RawKeyPathSubscriptComponentSyntax.self)!
  }
  public var rightBracket: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withRightBracket(_ rightBracket: RawTokenSyntax, arena: SyntaxArena) -> RawKeyPathSubscriptComponentSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(rightBracket), arena: arena).as(RawKeyPathSubscriptComponentSyntax.self)!
  }
  public var unexpectedAfterRightBracket: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightBracket(_ unexpectedAfterRightBracket: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawKeyPathSubscriptComponentSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterRightBracket.map(RawSyntax.init), arena: arena).as(RawKeyPathSubscriptComponentSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawKeyPathOptionalComponentSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = KeyPathOptionalComponentSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .keyPathOptionalComponent
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeQuestionOrExclamationMark: RawUnexpectedNodesSyntax? = nil,
    questionOrExclamationMark: RawTokenSyntax,
    _ unexpectedAfterQuestionOrExclamationMark: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .keyPathOptionalComponent, uninitializedCount: 3, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeQuestionOrExclamationMark?.raw
      layout[1] = questionOrExclamationMark.raw
      layout[2] = unexpectedAfterQuestionOrExclamationMark?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeQuestionOrExclamationMark: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeQuestionOrExclamationMark(_ unexpectedBeforeQuestionOrExclamationMark: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawKeyPathOptionalComponentSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeQuestionOrExclamationMark.map(RawSyntax.init), arena: arena).as(RawKeyPathOptionalComponentSyntax.self)!
  }
  public var questionOrExclamationMark: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withQuestionOrExclamationMark(_ questionOrExclamationMark: RawTokenSyntax, arena: SyntaxArena) -> RawKeyPathOptionalComponentSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(questionOrExclamationMark), arena: arena).as(RawKeyPathOptionalComponentSyntax.self)!
  }
  public var unexpectedAfterQuestionOrExclamationMark: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterQuestionOrExclamationMark(_ unexpectedAfterQuestionOrExclamationMark: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawKeyPathOptionalComponentSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedAfterQuestionOrExclamationMark.map(RawSyntax.init), arena: arena).as(RawKeyPathOptionalComponentSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawOldKeyPathExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public enum RootExpr: RawSyntaxNodeProtocol {
    case `identifierExpr`(RawIdentifierExprSyntax)
    case `specializeExpr`(RawSpecializeExprSyntax)
    case `optionalChainingExpr`(RawOptionalChainingExprSyntax)

    public static func isKindOf(_ raw: RawSyntax) -> Bool {
      return RawIdentifierExprSyntax.isKindOf(raw) || RawSpecializeExprSyntax.isKindOf(raw) || RawOptionalChainingExprSyntax.isKindOf(raw)
    }

    public var raw: RawSyntax {
      switch self {
      case .identifierExpr(let node): return node.raw
      case .specializeExpr(let node): return node.raw
      case .optionalChainingExpr(let node): return node.raw
      }
    }

    public init?<T>(_ other: T) where T : RawSyntaxNodeProtocol {
      if let node = RawIdentifierExprSyntax(other) {
        self = .identifierExpr(node)
        return
      }
      if let node = RawSpecializeExprSyntax(other) {
        self = .specializeExpr(node)
        return
      }
      if let node = RawOptionalChainingExprSyntax(other) {
        self = .optionalChainingExpr(node)
        return
      }
      return nil
    }
  }

  public typealias SyntaxType = OldKeyPathExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .oldKeyPathExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeBackslash: RawUnexpectedNodesSyntax? = nil,
    backslash: RawTokenSyntax,
    _ unexpectedBetweenBackslashAndRootExpr: RawUnexpectedNodesSyntax? = nil,
    rootExpr: RootExpr?,
    _ unexpectedBetweenRootExprAndExpression: RawUnexpectedNodesSyntax? = nil,
    expression: RawExprSyntax,
    _ unexpectedAfterExpression: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .oldKeyPathExpr, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeBackslash?.raw
      layout[1] = backslash.raw
      layout[2] = unexpectedBetweenBackslashAndRootExpr?.raw
      layout[3] = rootExpr?.raw
      layout[4] = unexpectedBetweenRootExprAndExpression?.raw
      layout[5] = expression.raw
      layout[6] = unexpectedAfterExpression?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeBackslash: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeBackslash(_ unexpectedBeforeBackslash: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawOldKeyPathExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeBackslash.map(RawSyntax.init), arena: arena).as(RawOldKeyPathExprSyntax.self)!
  }
  public var backslash: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withBackslash(_ backslash: RawTokenSyntax, arena: SyntaxArena) -> RawOldKeyPathExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(backslash), arena: arena).as(RawOldKeyPathExprSyntax.self)!
  }
  public var unexpectedBetweenBackslashAndRootExpr: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenBackslashAndRootExpr(_ unexpectedBetweenBackslashAndRootExpr: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawOldKeyPathExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenBackslashAndRootExpr.map(RawSyntax.init), arena: arena).as(RawOldKeyPathExprSyntax.self)!
  }
  public var rootExpr: RawExprSyntax? {
    layoutView.children[3].map(RawExprSyntax.init(raw:))
  }
  public func withRootExpr(_ rootExpr: RawExprSyntax?, arena: SyntaxArena) -> RawOldKeyPathExprSyntax {
    return layoutView.replacingChild(at: 3, with: rootExpr.map(RawSyntax.init), arena: arena).as(RawOldKeyPathExprSyntax.self)!
  }
  public var unexpectedBetweenRootExprAndExpression: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenRootExprAndExpression(_ unexpectedBetweenRootExprAndExpression: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawOldKeyPathExprSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenRootExprAndExpression.map(RawSyntax.init), arena: arena).as(RawOldKeyPathExprSyntax.self)!
  }
  public var expression: RawExprSyntax {
    layoutView.children[5].map(RawExprSyntax.init(raw:))!
  }
  public func withExpression(_ expression: RawExprSyntax, arena: SyntaxArena) -> RawOldKeyPathExprSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(expression), arena: arena).as(RawOldKeyPathExprSyntax.self)!
  }
  public var unexpectedAfterExpression: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterExpression(_ unexpectedAfterExpression: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawOldKeyPathExprSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterExpression.map(RawSyntax.init), arena: arena).as(RawOldKeyPathExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawKeyPathBaseExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = KeyPathBaseExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .keyPathBaseExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforePeriod: RawUnexpectedNodesSyntax? = nil,
    period: RawTokenSyntax,
    _ unexpectedAfterPeriod: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .keyPathBaseExpr, uninitializedCount: 3, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforePeriod?.raw
      layout[1] = period.raw
      layout[2] = unexpectedAfterPeriod?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforePeriod: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforePeriod(_ unexpectedBeforePeriod: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawKeyPathBaseExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforePeriod.map(RawSyntax.init), arena: arena).as(RawKeyPathBaseExprSyntax.self)!
  }
  public var period: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withPeriod(_ period: RawTokenSyntax, arena: SyntaxArena) -> RawKeyPathBaseExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(period), arena: arena).as(RawKeyPathBaseExprSyntax.self)!
  }
  public var unexpectedAfterPeriod: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterPeriod(_ unexpectedAfterPeriod: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawKeyPathBaseExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedAfterPeriod.map(RawSyntax.init), arena: arena).as(RawKeyPathBaseExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawObjcNamePieceSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ObjcNamePieceSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .objcNamePiece
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeName: RawUnexpectedNodesSyntax? = nil,
    name: RawTokenSyntax,
    _ unexpectedBetweenNameAndDot: RawUnexpectedNodesSyntax? = nil,
    dot: RawTokenSyntax?,
    _ unexpectedAfterDot: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .objcNamePiece, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeName?.raw
      layout[1] = name.raw
      layout[2] = unexpectedBetweenNameAndDot?.raw
      layout[3] = dot?.raw
      layout[4] = unexpectedAfterDot?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeName: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeName(_ unexpectedBeforeName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawObjcNamePieceSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeName.map(RawSyntax.init), arena: arena).as(RawObjcNamePieceSyntax.self)!
  }
  public var name: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withName(_ name: RawTokenSyntax, arena: SyntaxArena) -> RawObjcNamePieceSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(name), arena: arena).as(RawObjcNamePieceSyntax.self)!
  }
  public var unexpectedBetweenNameAndDot: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenNameAndDot(_ unexpectedBetweenNameAndDot: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawObjcNamePieceSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenNameAndDot.map(RawSyntax.init), arena: arena).as(RawObjcNamePieceSyntax.self)!
  }
  public var dot: RawTokenSyntax? {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))
  }
  public func withDot(_ dot: RawTokenSyntax?, arena: SyntaxArena) -> RawObjcNamePieceSyntax {
    return layoutView.replacingChild(at: 3, with: dot.map(RawSyntax.init), arena: arena).as(RawObjcNamePieceSyntax.self)!
  }
  public var unexpectedAfterDot: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterDot(_ unexpectedAfterDot: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawObjcNamePieceSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterDot.map(RawSyntax.init), arena: arena).as(RawObjcNamePieceSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawObjcNameSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ObjcNameSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .objcName
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawObjcNamePieceSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .objcName, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawObjcNamePieceSyntax] {
    layoutView.children.map { RawObjcNamePieceSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawObjcKeyPathExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ObjcKeyPathExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .objcKeyPathExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeKeyPath: RawUnexpectedNodesSyntax? = nil,
    keyPath: RawTokenSyntax,
    _ unexpectedBetweenKeyPathAndLeftParen: RawUnexpectedNodesSyntax? = nil,
    leftParen: RawTokenSyntax,
    _ unexpectedBetweenLeftParenAndName: RawUnexpectedNodesSyntax? = nil,
    name: RawObjcNameSyntax,
    _ unexpectedBetweenNameAndRightParen: RawUnexpectedNodesSyntax? = nil,
    rightParen: RawTokenSyntax,
    _ unexpectedAfterRightParen: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .objcKeyPathExpr, uninitializedCount: 9, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeKeyPath?.raw
      layout[1] = keyPath.raw
      layout[2] = unexpectedBetweenKeyPathAndLeftParen?.raw
      layout[3] = leftParen.raw
      layout[4] = unexpectedBetweenLeftParenAndName?.raw
      layout[5] = name.raw
      layout[6] = unexpectedBetweenNameAndRightParen?.raw
      layout[7] = rightParen.raw
      layout[8] = unexpectedAfterRightParen?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeKeyPath: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeKeyPath(_ unexpectedBeforeKeyPath: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawObjcKeyPathExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeKeyPath.map(RawSyntax.init), arena: arena).as(RawObjcKeyPathExprSyntax.self)!
  }
  public var keyPath: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withKeyPath(_ keyPath: RawTokenSyntax, arena: SyntaxArena) -> RawObjcKeyPathExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(keyPath), arena: arena).as(RawObjcKeyPathExprSyntax.self)!
  }
  public var unexpectedBetweenKeyPathAndLeftParen: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenKeyPathAndLeftParen(_ unexpectedBetweenKeyPathAndLeftParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawObjcKeyPathExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenKeyPathAndLeftParen.map(RawSyntax.init), arena: arena).as(RawObjcKeyPathExprSyntax.self)!
  }
  public var leftParen: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeftParen(_ leftParen: RawTokenSyntax, arena: SyntaxArena) -> RawObjcKeyPathExprSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(leftParen), arena: arena).as(RawObjcKeyPathExprSyntax.self)!
  }
  public var unexpectedBetweenLeftParenAndName: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftParenAndName(_ unexpectedBetweenLeftParenAndName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawObjcKeyPathExprSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenLeftParenAndName.map(RawSyntax.init), arena: arena).as(RawObjcKeyPathExprSyntax.self)!
  }
  public var name: RawObjcNameSyntax {
    layoutView.children[5].map(RawObjcNameSyntax.init(raw:))!
  }
  public func withName(_ name: RawObjcNameSyntax, arena: SyntaxArena) -> RawObjcKeyPathExprSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(name), arena: arena).as(RawObjcKeyPathExprSyntax.self)!
  }
  public var unexpectedBetweenNameAndRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenNameAndRightParen(_ unexpectedBetweenNameAndRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawObjcKeyPathExprSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenNameAndRightParen.map(RawSyntax.init), arena: arena).as(RawObjcKeyPathExprSyntax.self)!
  }
  public var rightParen: RawTokenSyntax {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))!
  }
  public func withRightParen(_ rightParen: RawTokenSyntax, arena: SyntaxArena) -> RawObjcKeyPathExprSyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(rightParen), arena: arena).as(RawObjcKeyPathExprSyntax.self)!
  }
  public var unexpectedAfterRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightParen(_ unexpectedAfterRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawObjcKeyPathExprSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedAfterRightParen.map(RawSyntax.init), arena: arena).as(RawObjcKeyPathExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawObjcSelectorExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ObjcSelectorExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .objcSelectorExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforePoundSelector: RawUnexpectedNodesSyntax? = nil,
    poundSelector: RawTokenSyntax,
    _ unexpectedBetweenPoundSelectorAndLeftParen: RawUnexpectedNodesSyntax? = nil,
    leftParen: RawTokenSyntax,
    _ unexpectedBetweenLeftParenAndKind: RawUnexpectedNodesSyntax? = nil,
    kind: RawTokenSyntax?,
    _ unexpectedBetweenKindAndColon: RawUnexpectedNodesSyntax? = nil,
    colon: RawTokenSyntax?,
    _ unexpectedBetweenColonAndName: RawUnexpectedNodesSyntax? = nil,
    name: RawExprSyntax,
    _ unexpectedBetweenNameAndRightParen: RawUnexpectedNodesSyntax? = nil,
    rightParen: RawTokenSyntax,
    _ unexpectedAfterRightParen: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .objcSelectorExpr, uninitializedCount: 13, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforePoundSelector?.raw
      layout[1] = poundSelector.raw
      layout[2] = unexpectedBetweenPoundSelectorAndLeftParen?.raw
      layout[3] = leftParen.raw
      layout[4] = unexpectedBetweenLeftParenAndKind?.raw
      layout[5] = kind?.raw
      layout[6] = unexpectedBetweenKindAndColon?.raw
      layout[7] = colon?.raw
      layout[8] = unexpectedBetweenColonAndName?.raw
      layout[9] = name.raw
      layout[10] = unexpectedBetweenNameAndRightParen?.raw
      layout[11] = rightParen.raw
      layout[12] = unexpectedAfterRightParen?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforePoundSelector: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforePoundSelector(_ unexpectedBeforePoundSelector: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawObjcSelectorExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforePoundSelector.map(RawSyntax.init), arena: arena).as(RawObjcSelectorExprSyntax.self)!
  }
  public var poundSelector: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withPoundSelector(_ poundSelector: RawTokenSyntax, arena: SyntaxArena) -> RawObjcSelectorExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(poundSelector), arena: arena).as(RawObjcSelectorExprSyntax.self)!
  }
  public var unexpectedBetweenPoundSelectorAndLeftParen: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenPoundSelectorAndLeftParen(_ unexpectedBetweenPoundSelectorAndLeftParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawObjcSelectorExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenPoundSelectorAndLeftParen.map(RawSyntax.init), arena: arena).as(RawObjcSelectorExprSyntax.self)!
  }
  public var leftParen: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeftParen(_ leftParen: RawTokenSyntax, arena: SyntaxArena) -> RawObjcSelectorExprSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(leftParen), arena: arena).as(RawObjcSelectorExprSyntax.self)!
  }
  public var unexpectedBetweenLeftParenAndKind: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftParenAndKind(_ unexpectedBetweenLeftParenAndKind: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawObjcSelectorExprSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenLeftParenAndKind.map(RawSyntax.init), arena: arena).as(RawObjcSelectorExprSyntax.self)!
  }
  public var kind: RawTokenSyntax? {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))
  }
  public func withKind(_ kind: RawTokenSyntax?, arena: SyntaxArena) -> RawObjcSelectorExprSyntax {
    return layoutView.replacingChild(at: 5, with: kind.map(RawSyntax.init), arena: arena).as(RawObjcSelectorExprSyntax.self)!
  }
  public var unexpectedBetweenKindAndColon: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenKindAndColon(_ unexpectedBetweenKindAndColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawObjcSelectorExprSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenKindAndColon.map(RawSyntax.init), arena: arena).as(RawObjcSelectorExprSyntax.self)!
  }
  public var colon: RawTokenSyntax? {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))
  }
  public func withColon(_ colon: RawTokenSyntax?, arena: SyntaxArena) -> RawObjcSelectorExprSyntax {
    return layoutView.replacingChild(at: 7, with: colon.map(RawSyntax.init), arena: arena).as(RawObjcSelectorExprSyntax.self)!
  }
  public var unexpectedBetweenColonAndName: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenColonAndName(_ unexpectedBetweenColonAndName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawObjcSelectorExprSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenColonAndName.map(RawSyntax.init), arena: arena).as(RawObjcSelectorExprSyntax.self)!
  }
  public var name: RawExprSyntax {
    layoutView.children[9].map(RawExprSyntax.init(raw:))!
  }
  public func withName(_ name: RawExprSyntax, arena: SyntaxArena) -> RawObjcSelectorExprSyntax {
    return layoutView.replacingChild(at: 9, with: RawSyntax(name), arena: arena).as(RawObjcSelectorExprSyntax.self)!
  }
  public var unexpectedBetweenNameAndRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenNameAndRightParen(_ unexpectedBetweenNameAndRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawObjcSelectorExprSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedBetweenNameAndRightParen.map(RawSyntax.init), arena: arena).as(RawObjcSelectorExprSyntax.self)!
  }
  public var rightParen: RawTokenSyntax {
    layoutView.children[11].map(RawTokenSyntax.init(raw:))!
  }
  public func withRightParen(_ rightParen: RawTokenSyntax, arena: SyntaxArena) -> RawObjcSelectorExprSyntax {
    return layoutView.replacingChild(at: 11, with: RawSyntax(rightParen), arena: arena).as(RawObjcSelectorExprSyntax.self)!
  }
  public var unexpectedAfterRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[12].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightParen(_ unexpectedAfterRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawObjcSelectorExprSyntax {
    return layoutView.replacingChild(at: 12, with: unexpectedAfterRightParen.map(RawSyntax.init), arena: arena).as(RawObjcSelectorExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawMacroExpansionExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = MacroExpansionExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .macroExpansionExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforePoundToken: RawUnexpectedNodesSyntax? = nil,
    poundToken: RawTokenSyntax,
    _ unexpectedBetweenPoundTokenAndMacro: RawUnexpectedNodesSyntax? = nil,
    macro: RawTokenSyntax,
    _ unexpectedBetweenMacroAndLeftParen: RawUnexpectedNodesSyntax? = nil,
    leftParen: RawTokenSyntax?,
    _ unexpectedBetweenLeftParenAndArgumentList: RawUnexpectedNodesSyntax? = nil,
    argumentList: RawTupleExprElementListSyntax,
    _ unexpectedBetweenArgumentListAndRightParen: RawUnexpectedNodesSyntax? = nil,
    rightParen: RawTokenSyntax?,
    _ unexpectedBetweenRightParenAndTrailingClosure: RawUnexpectedNodesSyntax? = nil,
    trailingClosure: RawClosureExprSyntax?,
    _ unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: RawUnexpectedNodesSyntax? = nil,
    additionalTrailingClosures: RawMultipleTrailingClosureElementListSyntax?,
    _ unexpectedAfterAdditionalTrailingClosures: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .macroExpansionExpr, uninitializedCount: 15, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforePoundToken?.raw
      layout[1] = poundToken.raw
      layout[2] = unexpectedBetweenPoundTokenAndMacro?.raw
      layout[3] = macro.raw
      layout[4] = unexpectedBetweenMacroAndLeftParen?.raw
      layout[5] = leftParen?.raw
      layout[6] = unexpectedBetweenLeftParenAndArgumentList?.raw
      layout[7] = argumentList.raw
      layout[8] = unexpectedBetweenArgumentListAndRightParen?.raw
      layout[9] = rightParen?.raw
      layout[10] = unexpectedBetweenRightParenAndTrailingClosure?.raw
      layout[11] = trailingClosure?.raw
      layout[12] = unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures?.raw
      layout[13] = additionalTrailingClosures?.raw
      layout[14] = unexpectedAfterAdditionalTrailingClosures?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforePoundToken: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforePoundToken(_ unexpectedBeforePoundToken: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMacroExpansionExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforePoundToken.map(RawSyntax.init), arena: arena).as(RawMacroExpansionExprSyntax.self)!
  }
  public var poundToken: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withPoundToken(_ poundToken: RawTokenSyntax, arena: SyntaxArena) -> RawMacroExpansionExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(poundToken), arena: arena).as(RawMacroExpansionExprSyntax.self)!
  }
  public var unexpectedBetweenPoundTokenAndMacro: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenPoundTokenAndMacro(_ unexpectedBetweenPoundTokenAndMacro: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMacroExpansionExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenPoundTokenAndMacro.map(RawSyntax.init), arena: arena).as(RawMacroExpansionExprSyntax.self)!
  }
  public var macro: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withMacro(_ macro: RawTokenSyntax, arena: SyntaxArena) -> RawMacroExpansionExprSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(macro), arena: arena).as(RawMacroExpansionExprSyntax.self)!
  }
  public var unexpectedBetweenMacroAndLeftParen: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenMacroAndLeftParen(_ unexpectedBetweenMacroAndLeftParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMacroExpansionExprSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenMacroAndLeftParen.map(RawSyntax.init), arena: arena).as(RawMacroExpansionExprSyntax.self)!
  }
  public var leftParen: RawTokenSyntax? {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))
  }
  public func withLeftParen(_ leftParen: RawTokenSyntax?, arena: SyntaxArena) -> RawMacroExpansionExprSyntax {
    return layoutView.replacingChild(at: 5, with: leftParen.map(RawSyntax.init), arena: arena).as(RawMacroExpansionExprSyntax.self)!
  }
  public var unexpectedBetweenLeftParenAndArgumentList: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftParenAndArgumentList(_ unexpectedBetweenLeftParenAndArgumentList: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMacroExpansionExprSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenLeftParenAndArgumentList.map(RawSyntax.init), arena: arena).as(RawMacroExpansionExprSyntax.self)!
  }
  public var argumentList: RawTupleExprElementListSyntax {
    layoutView.children[7].map(RawTupleExprElementListSyntax.init(raw:))!
  }
  public func withArgumentList(_ argumentList: RawTupleExprElementListSyntax, arena: SyntaxArena) -> RawMacroExpansionExprSyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(argumentList), arena: arena).as(RawMacroExpansionExprSyntax.self)!
  }
  public var unexpectedBetweenArgumentListAndRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenArgumentListAndRightParen(_ unexpectedBetweenArgumentListAndRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMacroExpansionExprSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenArgumentListAndRightParen.map(RawSyntax.init), arena: arena).as(RawMacroExpansionExprSyntax.self)!
  }
  public var rightParen: RawTokenSyntax? {
    layoutView.children[9].map(RawTokenSyntax.init(raw:))
  }
  public func withRightParen(_ rightParen: RawTokenSyntax?, arena: SyntaxArena) -> RawMacroExpansionExprSyntax {
    return layoutView.replacingChild(at: 9, with: rightParen.map(RawSyntax.init), arena: arena).as(RawMacroExpansionExprSyntax.self)!
  }
  public var unexpectedBetweenRightParenAndTrailingClosure: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenRightParenAndTrailingClosure(_ unexpectedBetweenRightParenAndTrailingClosure: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMacroExpansionExprSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedBetweenRightParenAndTrailingClosure.map(RawSyntax.init), arena: arena).as(RawMacroExpansionExprSyntax.self)!
  }
  public var trailingClosure: RawClosureExprSyntax? {
    layoutView.children[11].map(RawClosureExprSyntax.init(raw:))
  }
  public func withTrailingClosure(_ trailingClosure: RawClosureExprSyntax?, arena: SyntaxArena) -> RawMacroExpansionExprSyntax {
    return layoutView.replacingChild(at: 11, with: trailingClosure.map(RawSyntax.init), arena: arena).as(RawMacroExpansionExprSyntax.self)!
  }
  public var unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: RawUnexpectedNodesSyntax? {
    layoutView.children[12].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenTrailingClosureAndAdditionalTrailingClosures(_ unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMacroExpansionExprSyntax {
    return layoutView.replacingChild(at: 12, with: unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures.map(RawSyntax.init), arena: arena).as(RawMacroExpansionExprSyntax.self)!
  }
  public var additionalTrailingClosures: RawMultipleTrailingClosureElementListSyntax? {
    layoutView.children[13].map(RawMultipleTrailingClosureElementListSyntax.init(raw:))
  }
  public func withAdditionalTrailingClosures(_ additionalTrailingClosures: RawMultipleTrailingClosureElementListSyntax?, arena: SyntaxArena) -> RawMacroExpansionExprSyntax {
    return layoutView.replacingChild(at: 13, with: additionalTrailingClosures.map(RawSyntax.init), arena: arena).as(RawMacroExpansionExprSyntax.self)!
  }
  public var unexpectedAfterAdditionalTrailingClosures: RawUnexpectedNodesSyntax? {
    layoutView.children[14].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterAdditionalTrailingClosures(_ unexpectedAfterAdditionalTrailingClosures: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMacroExpansionExprSyntax {
    return layoutView.replacingChild(at: 14, with: unexpectedAfterAdditionalTrailingClosures.map(RawSyntax.init), arena: arena).as(RawMacroExpansionExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawPostfixIfConfigExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = PostfixIfConfigExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .postfixIfConfigExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeBase: RawUnexpectedNodesSyntax? = nil,
    base: RawExprSyntax?,
    _ unexpectedBetweenBaseAndConfig: RawUnexpectedNodesSyntax? = nil,
    config: RawIfConfigDeclSyntax,
    _ unexpectedAfterConfig: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .postfixIfConfigExpr, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeBase?.raw
      layout[1] = base?.raw
      layout[2] = unexpectedBetweenBaseAndConfig?.raw
      layout[3] = config.raw
      layout[4] = unexpectedAfterConfig?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeBase: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeBase(_ unexpectedBeforeBase: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPostfixIfConfigExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeBase.map(RawSyntax.init), arena: arena).as(RawPostfixIfConfigExprSyntax.self)!
  }
  public var base: RawExprSyntax? {
    layoutView.children[1].map(RawExprSyntax.init(raw:))
  }
  public func withBase(_ base: RawExprSyntax?, arena: SyntaxArena) -> RawPostfixIfConfigExprSyntax {
    return layoutView.replacingChild(at: 1, with: base.map(RawSyntax.init), arena: arena).as(RawPostfixIfConfigExprSyntax.self)!
  }
  public var unexpectedBetweenBaseAndConfig: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenBaseAndConfig(_ unexpectedBetweenBaseAndConfig: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPostfixIfConfigExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenBaseAndConfig.map(RawSyntax.init), arena: arena).as(RawPostfixIfConfigExprSyntax.self)!
  }
  public var config: RawIfConfigDeclSyntax {
    layoutView.children[3].map(RawIfConfigDeclSyntax.init(raw:))!
  }
  public func withConfig(_ config: RawIfConfigDeclSyntax, arena: SyntaxArena) -> RawPostfixIfConfigExprSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(config), arena: arena).as(RawPostfixIfConfigExprSyntax.self)!
  }
  public var unexpectedAfterConfig: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterConfig(_ unexpectedAfterConfig: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPostfixIfConfigExprSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterConfig.map(RawSyntax.init), arena: arena).as(RawPostfixIfConfigExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawEditorPlaceholderExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = EditorPlaceholderExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .editorPlaceholderExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeIdentifier: RawUnexpectedNodesSyntax? = nil,
    identifier: RawTokenSyntax,
    _ unexpectedAfterIdentifier: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .editorPlaceholderExpr, uninitializedCount: 3, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeIdentifier?.raw
      layout[1] = identifier.raw
      layout[2] = unexpectedAfterIdentifier?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeIdentifier: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeIdentifier(_ unexpectedBeforeIdentifier: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawEditorPlaceholderExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeIdentifier.map(RawSyntax.init), arena: arena).as(RawEditorPlaceholderExprSyntax.self)!
  }
  public var identifier: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withIdentifier(_ identifier: RawTokenSyntax, arena: SyntaxArena) -> RawEditorPlaceholderExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(identifier), arena: arena).as(RawEditorPlaceholderExprSyntax.self)!
  }
  public var unexpectedAfterIdentifier: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterIdentifier(_ unexpectedAfterIdentifier: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawEditorPlaceholderExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedAfterIdentifier.map(RawSyntax.init), arena: arena).as(RawEditorPlaceholderExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawObjectLiteralExprSyntax: RawExprSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ObjectLiteralExprSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .objectLiteralExpr
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeIdentifier: RawUnexpectedNodesSyntax? = nil,
    identifier: RawTokenSyntax,
    _ unexpectedBetweenIdentifierAndLeftParen: RawUnexpectedNodesSyntax? = nil,
    leftParen: RawTokenSyntax,
    _ unexpectedBetweenLeftParenAndArguments: RawUnexpectedNodesSyntax? = nil,
    arguments: RawTupleExprElementListSyntax,
    _ unexpectedBetweenArgumentsAndRightParen: RawUnexpectedNodesSyntax? = nil,
    rightParen: RawTokenSyntax,
    _ unexpectedAfterRightParen: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .objectLiteralExpr, uninitializedCount: 9, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeIdentifier?.raw
      layout[1] = identifier.raw
      layout[2] = unexpectedBetweenIdentifierAndLeftParen?.raw
      layout[3] = leftParen.raw
      layout[4] = unexpectedBetweenLeftParenAndArguments?.raw
      layout[5] = arguments.raw
      layout[6] = unexpectedBetweenArgumentsAndRightParen?.raw
      layout[7] = rightParen.raw
      layout[8] = unexpectedAfterRightParen?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeIdentifier: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeIdentifier(_ unexpectedBeforeIdentifier: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawObjectLiteralExprSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeIdentifier.map(RawSyntax.init), arena: arena).as(RawObjectLiteralExprSyntax.self)!
  }
  public var identifier: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withIdentifier(_ identifier: RawTokenSyntax, arena: SyntaxArena) -> RawObjectLiteralExprSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(identifier), arena: arena).as(RawObjectLiteralExprSyntax.self)!
  }
  public var unexpectedBetweenIdentifierAndLeftParen: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenIdentifierAndLeftParen(_ unexpectedBetweenIdentifierAndLeftParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawObjectLiteralExprSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenIdentifierAndLeftParen.map(RawSyntax.init), arena: arena).as(RawObjectLiteralExprSyntax.self)!
  }
  public var leftParen: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeftParen(_ leftParen: RawTokenSyntax, arena: SyntaxArena) -> RawObjectLiteralExprSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(leftParen), arena: arena).as(RawObjectLiteralExprSyntax.self)!
  }
  public var unexpectedBetweenLeftParenAndArguments: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftParenAndArguments(_ unexpectedBetweenLeftParenAndArguments: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawObjectLiteralExprSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenLeftParenAndArguments.map(RawSyntax.init), arena: arena).as(RawObjectLiteralExprSyntax.self)!
  }
  public var arguments: RawTupleExprElementListSyntax {
    layoutView.children[5].map(RawTupleExprElementListSyntax.init(raw:))!
  }
  public func withArguments(_ arguments: RawTupleExprElementListSyntax, arena: SyntaxArena) -> RawObjectLiteralExprSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(arguments), arena: arena).as(RawObjectLiteralExprSyntax.self)!
  }
  public var unexpectedBetweenArgumentsAndRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenArgumentsAndRightParen(_ unexpectedBetweenArgumentsAndRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawObjectLiteralExprSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenArgumentsAndRightParen.map(RawSyntax.init), arena: arena).as(RawObjectLiteralExprSyntax.self)!
  }
  public var rightParen: RawTokenSyntax {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))!
  }
  public func withRightParen(_ rightParen: RawTokenSyntax, arena: SyntaxArena) -> RawObjectLiteralExprSyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(rightParen), arena: arena).as(RawObjectLiteralExprSyntax.self)!
  }
  public var unexpectedAfterRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightParen(_ unexpectedAfterRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawObjectLiteralExprSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedAfterRightParen.map(RawSyntax.init), arena: arena).as(RawObjectLiteralExprSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawYieldExprListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = YieldExprListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .yieldExprList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawYieldExprListElementSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .yieldExprList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawYieldExprListElementSyntax] {
    layoutView.children.map { RawYieldExprListElementSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawYieldExprListElementSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = YieldExprListElementSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .yieldExprListElement
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeExpression: RawUnexpectedNodesSyntax? = nil,
    expression: RawExprSyntax,
    _ unexpectedBetweenExpressionAndComma: RawUnexpectedNodesSyntax? = nil,
    comma: RawTokenSyntax?,
    _ unexpectedAfterComma: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .yieldExprListElement, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeExpression?.raw
      layout[1] = expression.raw
      layout[2] = unexpectedBetweenExpressionAndComma?.raw
      layout[3] = comma?.raw
      layout[4] = unexpectedAfterComma?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeExpression: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeExpression(_ unexpectedBeforeExpression: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawYieldExprListElementSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeExpression.map(RawSyntax.init), arena: arena).as(RawYieldExprListElementSyntax.self)!
  }
  public var expression: RawExprSyntax {
    layoutView.children[1].map(RawExprSyntax.init(raw:))!
  }
  public func withExpression(_ expression: RawExprSyntax, arena: SyntaxArena) -> RawYieldExprListElementSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(expression), arena: arena).as(RawYieldExprListElementSyntax.self)!
  }
  public var unexpectedBetweenExpressionAndComma: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenExpressionAndComma(_ unexpectedBetweenExpressionAndComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawYieldExprListElementSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenExpressionAndComma.map(RawSyntax.init), arena: arena).as(RawYieldExprListElementSyntax.self)!
  }
  public var comma: RawTokenSyntax? {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))
  }
  public func withComma(_ comma: RawTokenSyntax?, arena: SyntaxArena) -> RawYieldExprListElementSyntax {
    return layoutView.replacingChild(at: 3, with: comma.map(RawSyntax.init), arena: arena).as(RawYieldExprListElementSyntax.self)!
  }
  public var unexpectedAfterComma: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterComma(_ unexpectedAfterComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawYieldExprListElementSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterComma.map(RawSyntax.init), arena: arena).as(RawYieldExprListElementSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawTypeInitializerClauseSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = TypeInitializerClauseSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .typeInitializerClause
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeEqual: RawUnexpectedNodesSyntax? = nil,
    equal: RawTokenSyntax,
    _ unexpectedBetweenEqualAndValue: RawUnexpectedNodesSyntax? = nil,
    value: RawTypeSyntax,
    _ unexpectedAfterValue: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .typeInitializerClause, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeEqual?.raw
      layout[1] = equal.raw
      layout[2] = unexpectedBetweenEqualAndValue?.raw
      layout[3] = value.raw
      layout[4] = unexpectedAfterValue?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeEqual: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeEqual(_ unexpectedBeforeEqual: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTypeInitializerClauseSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeEqual.map(RawSyntax.init), arena: arena).as(RawTypeInitializerClauseSyntax.self)!
  }
  public var equal: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withEqual(_ equal: RawTokenSyntax, arena: SyntaxArena) -> RawTypeInitializerClauseSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(equal), arena: arena).as(RawTypeInitializerClauseSyntax.self)!
  }
  public var unexpectedBetweenEqualAndValue: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenEqualAndValue(_ unexpectedBetweenEqualAndValue: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTypeInitializerClauseSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenEqualAndValue.map(RawSyntax.init), arena: arena).as(RawTypeInitializerClauseSyntax.self)!
  }
  public var value: RawTypeSyntax {
    layoutView.children[3].map(RawTypeSyntax.init(raw:))!
  }
  public func withValue(_ value: RawTypeSyntax, arena: SyntaxArena) -> RawTypeInitializerClauseSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(value), arena: arena).as(RawTypeInitializerClauseSyntax.self)!
  }
  public var unexpectedAfterValue: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterValue(_ unexpectedAfterValue: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTypeInitializerClauseSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterValue.map(RawSyntax.init), arena: arena).as(RawTypeInitializerClauseSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawTypealiasDeclSyntax: RawDeclSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = TypealiasDeclSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .typealiasDecl
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? = nil,
    attributes: RawAttributeListSyntax?,
    _ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? = nil,
    modifiers: RawModifierListSyntax?,
    _ unexpectedBetweenModifiersAndTypealiasKeyword: RawUnexpectedNodesSyntax? = nil,
    typealiasKeyword: RawTokenSyntax,
    _ unexpectedBetweenTypealiasKeywordAndIdentifier: RawUnexpectedNodesSyntax? = nil,
    identifier: RawTokenSyntax,
    _ unexpectedBetweenIdentifierAndGenericParameterClause: RawUnexpectedNodesSyntax? = nil,
    genericParameterClause: RawGenericParameterClauseSyntax?,
    _ unexpectedBetweenGenericParameterClauseAndInitializer: RawUnexpectedNodesSyntax? = nil,
    initializer: RawTypeInitializerClauseSyntax,
    _ unexpectedBetweenInitializerAndGenericWhereClause: RawUnexpectedNodesSyntax? = nil,
    genericWhereClause: RawGenericWhereClauseSyntax?,
    _ unexpectedAfterGenericWhereClause: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .typealiasDecl, uninitializedCount: 15, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeAttributes?.raw
      layout[1] = attributes?.raw
      layout[2] = unexpectedBetweenAttributesAndModifiers?.raw
      layout[3] = modifiers?.raw
      layout[4] = unexpectedBetweenModifiersAndTypealiasKeyword?.raw
      layout[5] = typealiasKeyword.raw
      layout[6] = unexpectedBetweenTypealiasKeywordAndIdentifier?.raw
      layout[7] = identifier.raw
      layout[8] = unexpectedBetweenIdentifierAndGenericParameterClause?.raw
      layout[9] = genericParameterClause?.raw
      layout[10] = unexpectedBetweenGenericParameterClauseAndInitializer?.raw
      layout[11] = initializer.raw
      layout[12] = unexpectedBetweenInitializerAndGenericWhereClause?.raw
      layout[13] = genericWhereClause?.raw
      layout[14] = unexpectedAfterGenericWhereClause?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeAttributes(_ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTypealiasDeclSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeAttributes.map(RawSyntax.init), arena: arena).as(RawTypealiasDeclSyntax.self)!
  }
  public var attributes: RawAttributeListSyntax? {
    layoutView.children[1].map(RawAttributeListSyntax.init(raw:))
  }
  public func withAttributes(_ attributes: RawAttributeListSyntax?, arena: SyntaxArena) -> RawTypealiasDeclSyntax {
    return layoutView.replacingChild(at: 1, with: attributes.map(RawSyntax.init), arena: arena).as(RawTypealiasDeclSyntax.self)!
  }
  public var unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAttributesAndModifiers(_ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTypealiasDeclSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenAttributesAndModifiers.map(RawSyntax.init), arena: arena).as(RawTypealiasDeclSyntax.self)!
  }
  public var modifiers: RawModifierListSyntax? {
    layoutView.children[3].map(RawModifierListSyntax.init(raw:))
  }
  public func withModifiers(_ modifiers: RawModifierListSyntax?, arena: SyntaxArena) -> RawTypealiasDeclSyntax {
    return layoutView.replacingChild(at: 3, with: modifiers.map(RawSyntax.init), arena: arena).as(RawTypealiasDeclSyntax.self)!
  }
  public var unexpectedBetweenModifiersAndTypealiasKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenModifiersAndTypealiasKeyword(_ unexpectedBetweenModifiersAndTypealiasKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTypealiasDeclSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenModifiersAndTypealiasKeyword.map(RawSyntax.init), arena: arena).as(RawTypealiasDeclSyntax.self)!
  }
  public var typealiasKeyword: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withTypealiasKeyword(_ typealiasKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawTypealiasDeclSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(typealiasKeyword), arena: arena).as(RawTypealiasDeclSyntax.self)!
  }
  public var unexpectedBetweenTypealiasKeywordAndIdentifier: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenTypealiasKeywordAndIdentifier(_ unexpectedBetweenTypealiasKeywordAndIdentifier: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTypealiasDeclSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenTypealiasKeywordAndIdentifier.map(RawSyntax.init), arena: arena).as(RawTypealiasDeclSyntax.self)!
  }
  public var identifier: RawTokenSyntax {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))!
  }
  public func withIdentifier(_ identifier: RawTokenSyntax, arena: SyntaxArena) -> RawTypealiasDeclSyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(identifier), arena: arena).as(RawTypealiasDeclSyntax.self)!
  }
  public var unexpectedBetweenIdentifierAndGenericParameterClause: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenIdentifierAndGenericParameterClause(_ unexpectedBetweenIdentifierAndGenericParameterClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTypealiasDeclSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenIdentifierAndGenericParameterClause.map(RawSyntax.init), arena: arena).as(RawTypealiasDeclSyntax.self)!
  }
  public var genericParameterClause: RawGenericParameterClauseSyntax? {
    layoutView.children[9].map(RawGenericParameterClauseSyntax.init(raw:))
  }
  public func withGenericParameterClause(_ genericParameterClause: RawGenericParameterClauseSyntax?, arena: SyntaxArena) -> RawTypealiasDeclSyntax {
    return layoutView.replacingChild(at: 9, with: genericParameterClause.map(RawSyntax.init), arena: arena).as(RawTypealiasDeclSyntax.self)!
  }
  public var unexpectedBetweenGenericParameterClauseAndInitializer: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenGenericParameterClauseAndInitializer(_ unexpectedBetweenGenericParameterClauseAndInitializer: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTypealiasDeclSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedBetweenGenericParameterClauseAndInitializer.map(RawSyntax.init), arena: arena).as(RawTypealiasDeclSyntax.self)!
  }
  public var initializer: RawTypeInitializerClauseSyntax {
    layoutView.children[11].map(RawTypeInitializerClauseSyntax.init(raw:))!
  }
  public func withInitializer(_ initializer: RawTypeInitializerClauseSyntax, arena: SyntaxArena) -> RawTypealiasDeclSyntax {
    return layoutView.replacingChild(at: 11, with: RawSyntax(initializer), arena: arena).as(RawTypealiasDeclSyntax.self)!
  }
  public var unexpectedBetweenInitializerAndGenericWhereClause: RawUnexpectedNodesSyntax? {
    layoutView.children[12].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenInitializerAndGenericWhereClause(_ unexpectedBetweenInitializerAndGenericWhereClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTypealiasDeclSyntax {
    return layoutView.replacingChild(at: 12, with: unexpectedBetweenInitializerAndGenericWhereClause.map(RawSyntax.init), arena: arena).as(RawTypealiasDeclSyntax.self)!
  }
  public var genericWhereClause: RawGenericWhereClauseSyntax? {
    layoutView.children[13].map(RawGenericWhereClauseSyntax.init(raw:))
  }
  public func withGenericWhereClause(_ genericWhereClause: RawGenericWhereClauseSyntax?, arena: SyntaxArena) -> RawTypealiasDeclSyntax {
    return layoutView.replacingChild(at: 13, with: genericWhereClause.map(RawSyntax.init), arena: arena).as(RawTypealiasDeclSyntax.self)!
  }
  public var unexpectedAfterGenericWhereClause: RawUnexpectedNodesSyntax? {
    layoutView.children[14].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterGenericWhereClause(_ unexpectedAfterGenericWhereClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTypealiasDeclSyntax {
    return layoutView.replacingChild(at: 14, with: unexpectedAfterGenericWhereClause.map(RawSyntax.init), arena: arena).as(RawTypealiasDeclSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawAssociatedtypeDeclSyntax: RawDeclSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = AssociatedtypeDeclSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .associatedtypeDecl
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? = nil,
    attributes: RawAttributeListSyntax?,
    _ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? = nil,
    modifiers: RawModifierListSyntax?,
    _ unexpectedBetweenModifiersAndAssociatedtypeKeyword: RawUnexpectedNodesSyntax? = nil,
    associatedtypeKeyword: RawTokenSyntax,
    _ unexpectedBetweenAssociatedtypeKeywordAndIdentifier: RawUnexpectedNodesSyntax? = nil,
    identifier: RawTokenSyntax,
    _ unexpectedBetweenIdentifierAndInheritanceClause: RawUnexpectedNodesSyntax? = nil,
    inheritanceClause: RawTypeInheritanceClauseSyntax?,
    _ unexpectedBetweenInheritanceClauseAndInitializer: RawUnexpectedNodesSyntax? = nil,
    initializer: RawTypeInitializerClauseSyntax?,
    _ unexpectedBetweenInitializerAndGenericWhereClause: RawUnexpectedNodesSyntax? = nil,
    genericWhereClause: RawGenericWhereClauseSyntax?,
    _ unexpectedAfterGenericWhereClause: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .associatedtypeDecl, uninitializedCount: 15, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeAttributes?.raw
      layout[1] = attributes?.raw
      layout[2] = unexpectedBetweenAttributesAndModifiers?.raw
      layout[3] = modifiers?.raw
      layout[4] = unexpectedBetweenModifiersAndAssociatedtypeKeyword?.raw
      layout[5] = associatedtypeKeyword.raw
      layout[6] = unexpectedBetweenAssociatedtypeKeywordAndIdentifier?.raw
      layout[7] = identifier.raw
      layout[8] = unexpectedBetweenIdentifierAndInheritanceClause?.raw
      layout[9] = inheritanceClause?.raw
      layout[10] = unexpectedBetweenInheritanceClauseAndInitializer?.raw
      layout[11] = initializer?.raw
      layout[12] = unexpectedBetweenInitializerAndGenericWhereClause?.raw
      layout[13] = genericWhereClause?.raw
      layout[14] = unexpectedAfterGenericWhereClause?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeAttributes(_ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAssociatedtypeDeclSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeAttributes.map(RawSyntax.init), arena: arena).as(RawAssociatedtypeDeclSyntax.self)!
  }
  public var attributes: RawAttributeListSyntax? {
    layoutView.children[1].map(RawAttributeListSyntax.init(raw:))
  }
  public func withAttributes(_ attributes: RawAttributeListSyntax?, arena: SyntaxArena) -> RawAssociatedtypeDeclSyntax {
    return layoutView.replacingChild(at: 1, with: attributes.map(RawSyntax.init), arena: arena).as(RawAssociatedtypeDeclSyntax.self)!
  }
  public var unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAttributesAndModifiers(_ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAssociatedtypeDeclSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenAttributesAndModifiers.map(RawSyntax.init), arena: arena).as(RawAssociatedtypeDeclSyntax.self)!
  }
  public var modifiers: RawModifierListSyntax? {
    layoutView.children[3].map(RawModifierListSyntax.init(raw:))
  }
  public func withModifiers(_ modifiers: RawModifierListSyntax?, arena: SyntaxArena) -> RawAssociatedtypeDeclSyntax {
    return layoutView.replacingChild(at: 3, with: modifiers.map(RawSyntax.init), arena: arena).as(RawAssociatedtypeDeclSyntax.self)!
  }
  public var unexpectedBetweenModifiersAndAssociatedtypeKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenModifiersAndAssociatedtypeKeyword(_ unexpectedBetweenModifiersAndAssociatedtypeKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAssociatedtypeDeclSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenModifiersAndAssociatedtypeKeyword.map(RawSyntax.init), arena: arena).as(RawAssociatedtypeDeclSyntax.self)!
  }
  public var associatedtypeKeyword: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withAssociatedtypeKeyword(_ associatedtypeKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawAssociatedtypeDeclSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(associatedtypeKeyword), arena: arena).as(RawAssociatedtypeDeclSyntax.self)!
  }
  public var unexpectedBetweenAssociatedtypeKeywordAndIdentifier: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAssociatedtypeKeywordAndIdentifier(_ unexpectedBetweenAssociatedtypeKeywordAndIdentifier: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAssociatedtypeDeclSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenAssociatedtypeKeywordAndIdentifier.map(RawSyntax.init), arena: arena).as(RawAssociatedtypeDeclSyntax.self)!
  }
  public var identifier: RawTokenSyntax {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))!
  }
  public func withIdentifier(_ identifier: RawTokenSyntax, arena: SyntaxArena) -> RawAssociatedtypeDeclSyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(identifier), arena: arena).as(RawAssociatedtypeDeclSyntax.self)!
  }
  public var unexpectedBetweenIdentifierAndInheritanceClause: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenIdentifierAndInheritanceClause(_ unexpectedBetweenIdentifierAndInheritanceClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAssociatedtypeDeclSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenIdentifierAndInheritanceClause.map(RawSyntax.init), arena: arena).as(RawAssociatedtypeDeclSyntax.self)!
  }
  public var inheritanceClause: RawTypeInheritanceClauseSyntax? {
    layoutView.children[9].map(RawTypeInheritanceClauseSyntax.init(raw:))
  }
  public func withInheritanceClause(_ inheritanceClause: RawTypeInheritanceClauseSyntax?, arena: SyntaxArena) -> RawAssociatedtypeDeclSyntax {
    return layoutView.replacingChild(at: 9, with: inheritanceClause.map(RawSyntax.init), arena: arena).as(RawAssociatedtypeDeclSyntax.self)!
  }
  public var unexpectedBetweenInheritanceClauseAndInitializer: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenInheritanceClauseAndInitializer(_ unexpectedBetweenInheritanceClauseAndInitializer: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAssociatedtypeDeclSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedBetweenInheritanceClauseAndInitializer.map(RawSyntax.init), arena: arena).as(RawAssociatedtypeDeclSyntax.self)!
  }
  public var initializer: RawTypeInitializerClauseSyntax? {
    layoutView.children[11].map(RawTypeInitializerClauseSyntax.init(raw:))
  }
  public func withInitializer(_ initializer: RawTypeInitializerClauseSyntax?, arena: SyntaxArena) -> RawAssociatedtypeDeclSyntax {
    return layoutView.replacingChild(at: 11, with: initializer.map(RawSyntax.init), arena: arena).as(RawAssociatedtypeDeclSyntax.self)!
  }
  public var unexpectedBetweenInitializerAndGenericWhereClause: RawUnexpectedNodesSyntax? {
    layoutView.children[12].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenInitializerAndGenericWhereClause(_ unexpectedBetweenInitializerAndGenericWhereClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAssociatedtypeDeclSyntax {
    return layoutView.replacingChild(at: 12, with: unexpectedBetweenInitializerAndGenericWhereClause.map(RawSyntax.init), arena: arena).as(RawAssociatedtypeDeclSyntax.self)!
  }
  public var genericWhereClause: RawGenericWhereClauseSyntax? {
    layoutView.children[13].map(RawGenericWhereClauseSyntax.init(raw:))
  }
  public func withGenericWhereClause(_ genericWhereClause: RawGenericWhereClauseSyntax?, arena: SyntaxArena) -> RawAssociatedtypeDeclSyntax {
    return layoutView.replacingChild(at: 13, with: genericWhereClause.map(RawSyntax.init), arena: arena).as(RawAssociatedtypeDeclSyntax.self)!
  }
  public var unexpectedAfterGenericWhereClause: RawUnexpectedNodesSyntax? {
    layoutView.children[14].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterGenericWhereClause(_ unexpectedAfterGenericWhereClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAssociatedtypeDeclSyntax {
    return layoutView.replacingChild(at: 14, with: unexpectedAfterGenericWhereClause.map(RawSyntax.init), arena: arena).as(RawAssociatedtypeDeclSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawFunctionParameterListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = FunctionParameterListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .functionParameterList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawFunctionParameterSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .functionParameterList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawFunctionParameterSyntax] {
    layoutView.children.map { RawFunctionParameterSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawParameterClauseSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ParameterClauseSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .parameterClause
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeLeftParen: RawUnexpectedNodesSyntax? = nil,
    leftParen: RawTokenSyntax,
    _ unexpectedBetweenLeftParenAndParameterList: RawUnexpectedNodesSyntax? = nil,
    parameterList: RawFunctionParameterListSyntax,
    _ unexpectedBetweenParameterListAndRightParen: RawUnexpectedNodesSyntax? = nil,
    rightParen: RawTokenSyntax,
    _ unexpectedAfterRightParen: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .parameterClause, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeLeftParen?.raw
      layout[1] = leftParen.raw
      layout[2] = unexpectedBetweenLeftParenAndParameterList?.raw
      layout[3] = parameterList.raw
      layout[4] = unexpectedBetweenParameterListAndRightParen?.raw
      layout[5] = rightParen.raw
      layout[6] = unexpectedAfterRightParen?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeLeftParen: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeLeftParen(_ unexpectedBeforeLeftParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawParameterClauseSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeLeftParen.map(RawSyntax.init), arena: arena).as(RawParameterClauseSyntax.self)!
  }
  public var leftParen: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeftParen(_ leftParen: RawTokenSyntax, arena: SyntaxArena) -> RawParameterClauseSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(leftParen), arena: arena).as(RawParameterClauseSyntax.self)!
  }
  public var unexpectedBetweenLeftParenAndParameterList: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftParenAndParameterList(_ unexpectedBetweenLeftParenAndParameterList: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawParameterClauseSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenLeftParenAndParameterList.map(RawSyntax.init), arena: arena).as(RawParameterClauseSyntax.self)!
  }
  public var parameterList: RawFunctionParameterListSyntax {
    layoutView.children[3].map(RawFunctionParameterListSyntax.init(raw:))!
  }
  public func withParameterList(_ parameterList: RawFunctionParameterListSyntax, arena: SyntaxArena) -> RawParameterClauseSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(parameterList), arena: arena).as(RawParameterClauseSyntax.self)!
  }
  public var unexpectedBetweenParameterListAndRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenParameterListAndRightParen(_ unexpectedBetweenParameterListAndRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawParameterClauseSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenParameterListAndRightParen.map(RawSyntax.init), arena: arena).as(RawParameterClauseSyntax.self)!
  }
  public var rightParen: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withRightParen(_ rightParen: RawTokenSyntax, arena: SyntaxArena) -> RawParameterClauseSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(rightParen), arena: arena).as(RawParameterClauseSyntax.self)!
  }
  public var unexpectedAfterRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightParen(_ unexpectedAfterRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawParameterClauseSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterRightParen.map(RawSyntax.init), arena: arena).as(RawParameterClauseSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawReturnClauseSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ReturnClauseSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .returnClause
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeArrow: RawUnexpectedNodesSyntax? = nil,
    arrow: RawTokenSyntax,
    _ unexpectedBetweenArrowAndReturnType: RawUnexpectedNodesSyntax? = nil,
    returnType: RawTypeSyntax,
    _ unexpectedAfterReturnType: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .returnClause, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeArrow?.raw
      layout[1] = arrow.raw
      layout[2] = unexpectedBetweenArrowAndReturnType?.raw
      layout[3] = returnType.raw
      layout[4] = unexpectedAfterReturnType?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeArrow: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeArrow(_ unexpectedBeforeArrow: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawReturnClauseSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeArrow.map(RawSyntax.init), arena: arena).as(RawReturnClauseSyntax.self)!
  }
  public var arrow: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withArrow(_ arrow: RawTokenSyntax, arena: SyntaxArena) -> RawReturnClauseSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(arrow), arena: arena).as(RawReturnClauseSyntax.self)!
  }
  public var unexpectedBetweenArrowAndReturnType: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenArrowAndReturnType(_ unexpectedBetweenArrowAndReturnType: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawReturnClauseSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenArrowAndReturnType.map(RawSyntax.init), arena: arena).as(RawReturnClauseSyntax.self)!
  }
  public var returnType: RawTypeSyntax {
    layoutView.children[3].map(RawTypeSyntax.init(raw:))!
  }
  public func withReturnType(_ returnType: RawTypeSyntax, arena: SyntaxArena) -> RawReturnClauseSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(returnType), arena: arena).as(RawReturnClauseSyntax.self)!
  }
  public var unexpectedAfterReturnType: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterReturnType(_ unexpectedAfterReturnType: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawReturnClauseSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterReturnType.map(RawSyntax.init), arena: arena).as(RawReturnClauseSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawFunctionSignatureSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = FunctionSignatureSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .functionSignature
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeInput: RawUnexpectedNodesSyntax? = nil,
    input: RawParameterClauseSyntax,
    _ unexpectedBetweenInputAndAsyncOrReasyncKeyword: RawUnexpectedNodesSyntax? = nil,
    asyncOrReasyncKeyword: RawTokenSyntax?,
    _ unexpectedBetweenAsyncOrReasyncKeywordAndThrowsOrRethrowsKeyword: RawUnexpectedNodesSyntax? = nil,
    throwsOrRethrowsKeyword: RawTokenSyntax?,
    _ unexpectedBetweenThrowsOrRethrowsKeywordAndOutput: RawUnexpectedNodesSyntax? = nil,
    output: RawReturnClauseSyntax?,
    _ unexpectedAfterOutput: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .functionSignature, uninitializedCount: 9, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeInput?.raw
      layout[1] = input.raw
      layout[2] = unexpectedBetweenInputAndAsyncOrReasyncKeyword?.raw
      layout[3] = asyncOrReasyncKeyword?.raw
      layout[4] = unexpectedBetweenAsyncOrReasyncKeywordAndThrowsOrRethrowsKeyword?.raw
      layout[5] = throwsOrRethrowsKeyword?.raw
      layout[6] = unexpectedBetweenThrowsOrRethrowsKeywordAndOutput?.raw
      layout[7] = output?.raw
      layout[8] = unexpectedAfterOutput?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeInput: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeInput(_ unexpectedBeforeInput: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionSignatureSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeInput.map(RawSyntax.init), arena: arena).as(RawFunctionSignatureSyntax.self)!
  }
  public var input: RawParameterClauseSyntax {
    layoutView.children[1].map(RawParameterClauseSyntax.init(raw:))!
  }
  public func withInput(_ input: RawParameterClauseSyntax, arena: SyntaxArena) -> RawFunctionSignatureSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(input), arena: arena).as(RawFunctionSignatureSyntax.self)!
  }
  public var unexpectedBetweenInputAndAsyncOrReasyncKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenInputAndAsyncOrReasyncKeyword(_ unexpectedBetweenInputAndAsyncOrReasyncKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionSignatureSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenInputAndAsyncOrReasyncKeyword.map(RawSyntax.init), arena: arena).as(RawFunctionSignatureSyntax.self)!
  }
  public var asyncOrReasyncKeyword: RawTokenSyntax? {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))
  }
  public func withAsyncOrReasyncKeyword(_ asyncOrReasyncKeyword: RawTokenSyntax?, arena: SyntaxArena) -> RawFunctionSignatureSyntax {
    return layoutView.replacingChild(at: 3, with: asyncOrReasyncKeyword.map(RawSyntax.init), arena: arena).as(RawFunctionSignatureSyntax.self)!
  }
  public var unexpectedBetweenAsyncOrReasyncKeywordAndThrowsOrRethrowsKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAsyncOrReasyncKeywordAndThrowsOrRethrowsKeyword(_ unexpectedBetweenAsyncOrReasyncKeywordAndThrowsOrRethrowsKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionSignatureSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenAsyncOrReasyncKeywordAndThrowsOrRethrowsKeyword.map(RawSyntax.init), arena: arena).as(RawFunctionSignatureSyntax.self)!
  }
  public var throwsOrRethrowsKeyword: RawTokenSyntax? {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))
  }
  public func withThrowsOrRethrowsKeyword(_ throwsOrRethrowsKeyword: RawTokenSyntax?, arena: SyntaxArena) -> RawFunctionSignatureSyntax {
    return layoutView.replacingChild(at: 5, with: throwsOrRethrowsKeyword.map(RawSyntax.init), arena: arena).as(RawFunctionSignatureSyntax.self)!
  }
  public var unexpectedBetweenThrowsOrRethrowsKeywordAndOutput: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenThrowsOrRethrowsKeywordAndOutput(_ unexpectedBetweenThrowsOrRethrowsKeywordAndOutput: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionSignatureSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenThrowsOrRethrowsKeywordAndOutput.map(RawSyntax.init), arena: arena).as(RawFunctionSignatureSyntax.self)!
  }
  public var output: RawReturnClauseSyntax? {
    layoutView.children[7].map(RawReturnClauseSyntax.init(raw:))
  }
  public func withOutput(_ output: RawReturnClauseSyntax?, arena: SyntaxArena) -> RawFunctionSignatureSyntax {
    return layoutView.replacingChild(at: 7, with: output.map(RawSyntax.init), arena: arena).as(RawFunctionSignatureSyntax.self)!
  }
  public var unexpectedAfterOutput: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterOutput(_ unexpectedAfterOutput: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionSignatureSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedAfterOutput.map(RawSyntax.init), arena: arena).as(RawFunctionSignatureSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawIfConfigClauseSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public enum Elements: RawSyntaxNodeProtocol {
    case `statements`(RawCodeBlockItemListSyntax)
    case `switchCases`(RawSwitchCaseListSyntax)
    case `decls`(RawMemberDeclListSyntax)
    case `postfixExpression`(RawExprSyntax)
    case `attributes`(RawAttributeListSyntax)

    public static func isKindOf(_ raw: RawSyntax) -> Bool {
      return RawCodeBlockItemListSyntax.isKindOf(raw) || RawSwitchCaseListSyntax.isKindOf(raw) || RawMemberDeclListSyntax.isKindOf(raw) || RawExprSyntax.isKindOf(raw) || RawAttributeListSyntax.isKindOf(raw)
    }

    public var raw: RawSyntax {
      switch self {
      case .statements(let node): return node.raw
      case .switchCases(let node): return node.raw
      case .decls(let node): return node.raw
      case .postfixExpression(let node): return node.raw
      case .attributes(let node): return node.raw
      }
    }

    public init?<T>(_ other: T) where T : RawSyntaxNodeProtocol {
      if let node = RawCodeBlockItemListSyntax(other) {
        self = .statements(node)
        return
      }
      if let node = RawSwitchCaseListSyntax(other) {
        self = .switchCases(node)
        return
      }
      if let node = RawMemberDeclListSyntax(other) {
        self = .decls(node)
        return
      }
      if let node = RawExprSyntax(other) {
        self = .postfixExpression(node)
        return
      }
      if let node = RawAttributeListSyntax(other) {
        self = .attributes(node)
        return
      }
      return nil
    }
  }

  public typealias SyntaxType = IfConfigClauseSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .ifConfigClause
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforePoundKeyword: RawUnexpectedNodesSyntax? = nil,
    poundKeyword: RawTokenSyntax,
    _ unexpectedBetweenPoundKeywordAndCondition: RawUnexpectedNodesSyntax? = nil,
    condition: RawExprSyntax?,
    _ unexpectedBetweenConditionAndElements: RawUnexpectedNodesSyntax? = nil,
    elements: Elements?,
    _ unexpectedAfterElements: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .ifConfigClause, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforePoundKeyword?.raw
      layout[1] = poundKeyword.raw
      layout[2] = unexpectedBetweenPoundKeywordAndCondition?.raw
      layout[3] = condition?.raw
      layout[4] = unexpectedBetweenConditionAndElements?.raw
      layout[5] = elements?.raw
      layout[6] = unexpectedAfterElements?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforePoundKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforePoundKeyword(_ unexpectedBeforePoundKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawIfConfigClauseSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforePoundKeyword.map(RawSyntax.init), arena: arena).as(RawIfConfigClauseSyntax.self)!
  }
  public var poundKeyword: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withPoundKeyword(_ poundKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawIfConfigClauseSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(poundKeyword), arena: arena).as(RawIfConfigClauseSyntax.self)!
  }
  public var unexpectedBetweenPoundKeywordAndCondition: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenPoundKeywordAndCondition(_ unexpectedBetweenPoundKeywordAndCondition: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawIfConfigClauseSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenPoundKeywordAndCondition.map(RawSyntax.init), arena: arena).as(RawIfConfigClauseSyntax.self)!
  }
  public var condition: RawExprSyntax? {
    layoutView.children[3].map(RawExprSyntax.init(raw:))
  }
  public func withCondition(_ condition: RawExprSyntax?, arena: SyntaxArena) -> RawIfConfigClauseSyntax {
    return layoutView.replacingChild(at: 3, with: condition.map(RawSyntax.init), arena: arena).as(RawIfConfigClauseSyntax.self)!
  }
  public var unexpectedBetweenConditionAndElements: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenConditionAndElements(_ unexpectedBetweenConditionAndElements: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawIfConfigClauseSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenConditionAndElements.map(RawSyntax.init), arena: arena).as(RawIfConfigClauseSyntax.self)!
  }
  public var elements: RawSyntax? {
    layoutView.children[5]
  }
  public func withElements(_ elements: RawSyntax?, arena: SyntaxArena) -> RawIfConfigClauseSyntax {
    return layoutView.replacingChild(at: 5, with: elements.map(RawSyntax.init), arena: arena).as(RawIfConfigClauseSyntax.self)!
  }
  public var unexpectedAfterElements: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterElements(_ unexpectedAfterElements: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawIfConfigClauseSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterElements.map(RawSyntax.init), arena: arena).as(RawIfConfigClauseSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawIfConfigClauseListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = IfConfigClauseListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .ifConfigClauseList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawIfConfigClauseSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .ifConfigClauseList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawIfConfigClauseSyntax] {
    layoutView.children.map { RawIfConfigClauseSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawIfConfigDeclSyntax: RawDeclSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = IfConfigDeclSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .ifConfigDecl
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeClauses: RawUnexpectedNodesSyntax? = nil,
    clauses: RawIfConfigClauseListSyntax,
    _ unexpectedBetweenClausesAndPoundEndif: RawUnexpectedNodesSyntax? = nil,
    poundEndif: RawTokenSyntax,
    _ unexpectedAfterPoundEndif: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .ifConfigDecl, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeClauses?.raw
      layout[1] = clauses.raw
      layout[2] = unexpectedBetweenClausesAndPoundEndif?.raw
      layout[3] = poundEndif.raw
      layout[4] = unexpectedAfterPoundEndif?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeClauses: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeClauses(_ unexpectedBeforeClauses: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawIfConfigDeclSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeClauses.map(RawSyntax.init), arena: arena).as(RawIfConfigDeclSyntax.self)!
  }
  public var clauses: RawIfConfigClauseListSyntax {
    layoutView.children[1].map(RawIfConfigClauseListSyntax.init(raw:))!
  }
  public func withClauses(_ clauses: RawIfConfigClauseListSyntax, arena: SyntaxArena) -> RawIfConfigDeclSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(clauses), arena: arena).as(RawIfConfigDeclSyntax.self)!
  }
  public var unexpectedBetweenClausesAndPoundEndif: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenClausesAndPoundEndif(_ unexpectedBetweenClausesAndPoundEndif: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawIfConfigDeclSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenClausesAndPoundEndif.map(RawSyntax.init), arena: arena).as(RawIfConfigDeclSyntax.self)!
  }
  public var poundEndif: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withPoundEndif(_ poundEndif: RawTokenSyntax, arena: SyntaxArena) -> RawIfConfigDeclSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(poundEndif), arena: arena).as(RawIfConfigDeclSyntax.self)!
  }
  public var unexpectedAfterPoundEndif: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterPoundEndif(_ unexpectedAfterPoundEndif: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawIfConfigDeclSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterPoundEndif.map(RawSyntax.init), arena: arena).as(RawIfConfigDeclSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawPoundErrorDeclSyntax: RawDeclSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = PoundErrorDeclSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .poundErrorDecl
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforePoundError: RawUnexpectedNodesSyntax? = nil,
    poundError: RawTokenSyntax,
    _ unexpectedBetweenPoundErrorAndLeftParen: RawUnexpectedNodesSyntax? = nil,
    leftParen: RawTokenSyntax,
    _ unexpectedBetweenLeftParenAndMessage: RawUnexpectedNodesSyntax? = nil,
    message: RawStringLiteralExprSyntax,
    _ unexpectedBetweenMessageAndRightParen: RawUnexpectedNodesSyntax? = nil,
    rightParen: RawTokenSyntax,
    _ unexpectedAfterRightParen: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .poundErrorDecl, uninitializedCount: 9, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforePoundError?.raw
      layout[1] = poundError.raw
      layout[2] = unexpectedBetweenPoundErrorAndLeftParen?.raw
      layout[3] = leftParen.raw
      layout[4] = unexpectedBetweenLeftParenAndMessage?.raw
      layout[5] = message.raw
      layout[6] = unexpectedBetweenMessageAndRightParen?.raw
      layout[7] = rightParen.raw
      layout[8] = unexpectedAfterRightParen?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforePoundError: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforePoundError(_ unexpectedBeforePoundError: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundErrorDeclSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforePoundError.map(RawSyntax.init), arena: arena).as(RawPoundErrorDeclSyntax.self)!
  }
  public var poundError: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withPoundError(_ poundError: RawTokenSyntax, arena: SyntaxArena) -> RawPoundErrorDeclSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(poundError), arena: arena).as(RawPoundErrorDeclSyntax.self)!
  }
  public var unexpectedBetweenPoundErrorAndLeftParen: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenPoundErrorAndLeftParen(_ unexpectedBetweenPoundErrorAndLeftParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundErrorDeclSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenPoundErrorAndLeftParen.map(RawSyntax.init), arena: arena).as(RawPoundErrorDeclSyntax.self)!
  }
  public var leftParen: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeftParen(_ leftParen: RawTokenSyntax, arena: SyntaxArena) -> RawPoundErrorDeclSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(leftParen), arena: arena).as(RawPoundErrorDeclSyntax.self)!
  }
  public var unexpectedBetweenLeftParenAndMessage: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftParenAndMessage(_ unexpectedBetweenLeftParenAndMessage: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundErrorDeclSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenLeftParenAndMessage.map(RawSyntax.init), arena: arena).as(RawPoundErrorDeclSyntax.self)!
  }
  public var message: RawStringLiteralExprSyntax {
    layoutView.children[5].map(RawStringLiteralExprSyntax.init(raw:))!
  }
  public func withMessage(_ message: RawStringLiteralExprSyntax, arena: SyntaxArena) -> RawPoundErrorDeclSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(message), arena: arena).as(RawPoundErrorDeclSyntax.self)!
  }
  public var unexpectedBetweenMessageAndRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenMessageAndRightParen(_ unexpectedBetweenMessageAndRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundErrorDeclSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenMessageAndRightParen.map(RawSyntax.init), arena: arena).as(RawPoundErrorDeclSyntax.self)!
  }
  public var rightParen: RawTokenSyntax {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))!
  }
  public func withRightParen(_ rightParen: RawTokenSyntax, arena: SyntaxArena) -> RawPoundErrorDeclSyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(rightParen), arena: arena).as(RawPoundErrorDeclSyntax.self)!
  }
  public var unexpectedAfterRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightParen(_ unexpectedAfterRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundErrorDeclSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedAfterRightParen.map(RawSyntax.init), arena: arena).as(RawPoundErrorDeclSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawPoundWarningDeclSyntax: RawDeclSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = PoundWarningDeclSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .poundWarningDecl
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforePoundWarning: RawUnexpectedNodesSyntax? = nil,
    poundWarning: RawTokenSyntax,
    _ unexpectedBetweenPoundWarningAndLeftParen: RawUnexpectedNodesSyntax? = nil,
    leftParen: RawTokenSyntax,
    _ unexpectedBetweenLeftParenAndMessage: RawUnexpectedNodesSyntax? = nil,
    message: RawStringLiteralExprSyntax,
    _ unexpectedBetweenMessageAndRightParen: RawUnexpectedNodesSyntax? = nil,
    rightParen: RawTokenSyntax,
    _ unexpectedAfterRightParen: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .poundWarningDecl, uninitializedCount: 9, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforePoundWarning?.raw
      layout[1] = poundWarning.raw
      layout[2] = unexpectedBetweenPoundWarningAndLeftParen?.raw
      layout[3] = leftParen.raw
      layout[4] = unexpectedBetweenLeftParenAndMessage?.raw
      layout[5] = message.raw
      layout[6] = unexpectedBetweenMessageAndRightParen?.raw
      layout[7] = rightParen.raw
      layout[8] = unexpectedAfterRightParen?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforePoundWarning: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforePoundWarning(_ unexpectedBeforePoundWarning: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundWarningDeclSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforePoundWarning.map(RawSyntax.init), arena: arena).as(RawPoundWarningDeclSyntax.self)!
  }
  public var poundWarning: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withPoundWarning(_ poundWarning: RawTokenSyntax, arena: SyntaxArena) -> RawPoundWarningDeclSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(poundWarning), arena: arena).as(RawPoundWarningDeclSyntax.self)!
  }
  public var unexpectedBetweenPoundWarningAndLeftParen: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenPoundWarningAndLeftParen(_ unexpectedBetweenPoundWarningAndLeftParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundWarningDeclSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenPoundWarningAndLeftParen.map(RawSyntax.init), arena: arena).as(RawPoundWarningDeclSyntax.self)!
  }
  public var leftParen: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeftParen(_ leftParen: RawTokenSyntax, arena: SyntaxArena) -> RawPoundWarningDeclSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(leftParen), arena: arena).as(RawPoundWarningDeclSyntax.self)!
  }
  public var unexpectedBetweenLeftParenAndMessage: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftParenAndMessage(_ unexpectedBetweenLeftParenAndMessage: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundWarningDeclSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenLeftParenAndMessage.map(RawSyntax.init), arena: arena).as(RawPoundWarningDeclSyntax.self)!
  }
  public var message: RawStringLiteralExprSyntax {
    layoutView.children[5].map(RawStringLiteralExprSyntax.init(raw:))!
  }
  public func withMessage(_ message: RawStringLiteralExprSyntax, arena: SyntaxArena) -> RawPoundWarningDeclSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(message), arena: arena).as(RawPoundWarningDeclSyntax.self)!
  }
  public var unexpectedBetweenMessageAndRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenMessageAndRightParen(_ unexpectedBetweenMessageAndRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundWarningDeclSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenMessageAndRightParen.map(RawSyntax.init), arena: arena).as(RawPoundWarningDeclSyntax.self)!
  }
  public var rightParen: RawTokenSyntax {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))!
  }
  public func withRightParen(_ rightParen: RawTokenSyntax, arena: SyntaxArena) -> RawPoundWarningDeclSyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(rightParen), arena: arena).as(RawPoundWarningDeclSyntax.self)!
  }
  public var unexpectedAfterRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightParen(_ unexpectedAfterRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundWarningDeclSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedAfterRightParen.map(RawSyntax.init), arena: arena).as(RawPoundWarningDeclSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawPoundSourceLocationSyntax: RawDeclSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = PoundSourceLocationSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .poundSourceLocation
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforePoundSourceLocation: RawUnexpectedNodesSyntax? = nil,
    poundSourceLocation: RawTokenSyntax,
    _ unexpectedBetweenPoundSourceLocationAndLeftParen: RawUnexpectedNodesSyntax? = nil,
    leftParen: RawTokenSyntax,
    _ unexpectedBetweenLeftParenAndArgs: RawUnexpectedNodesSyntax? = nil,
    args: RawPoundSourceLocationArgsSyntax?,
    _ unexpectedBetweenArgsAndRightParen: RawUnexpectedNodesSyntax? = nil,
    rightParen: RawTokenSyntax,
    _ unexpectedAfterRightParen: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .poundSourceLocation, uninitializedCount: 9, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforePoundSourceLocation?.raw
      layout[1] = poundSourceLocation.raw
      layout[2] = unexpectedBetweenPoundSourceLocationAndLeftParen?.raw
      layout[3] = leftParen.raw
      layout[4] = unexpectedBetweenLeftParenAndArgs?.raw
      layout[5] = args?.raw
      layout[6] = unexpectedBetweenArgsAndRightParen?.raw
      layout[7] = rightParen.raw
      layout[8] = unexpectedAfterRightParen?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforePoundSourceLocation: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforePoundSourceLocation(_ unexpectedBeforePoundSourceLocation: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundSourceLocationSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforePoundSourceLocation.map(RawSyntax.init), arena: arena).as(RawPoundSourceLocationSyntax.self)!
  }
  public var poundSourceLocation: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withPoundSourceLocation(_ poundSourceLocation: RawTokenSyntax, arena: SyntaxArena) -> RawPoundSourceLocationSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(poundSourceLocation), arena: arena).as(RawPoundSourceLocationSyntax.self)!
  }
  public var unexpectedBetweenPoundSourceLocationAndLeftParen: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenPoundSourceLocationAndLeftParen(_ unexpectedBetweenPoundSourceLocationAndLeftParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundSourceLocationSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenPoundSourceLocationAndLeftParen.map(RawSyntax.init), arena: arena).as(RawPoundSourceLocationSyntax.self)!
  }
  public var leftParen: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeftParen(_ leftParen: RawTokenSyntax, arena: SyntaxArena) -> RawPoundSourceLocationSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(leftParen), arena: arena).as(RawPoundSourceLocationSyntax.self)!
  }
  public var unexpectedBetweenLeftParenAndArgs: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftParenAndArgs(_ unexpectedBetweenLeftParenAndArgs: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundSourceLocationSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenLeftParenAndArgs.map(RawSyntax.init), arena: arena).as(RawPoundSourceLocationSyntax.self)!
  }
  public var args: RawPoundSourceLocationArgsSyntax? {
    layoutView.children[5].map(RawPoundSourceLocationArgsSyntax.init(raw:))
  }
  public func withArgs(_ args: RawPoundSourceLocationArgsSyntax?, arena: SyntaxArena) -> RawPoundSourceLocationSyntax {
    return layoutView.replacingChild(at: 5, with: args.map(RawSyntax.init), arena: arena).as(RawPoundSourceLocationSyntax.self)!
  }
  public var unexpectedBetweenArgsAndRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenArgsAndRightParen(_ unexpectedBetweenArgsAndRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundSourceLocationSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenArgsAndRightParen.map(RawSyntax.init), arena: arena).as(RawPoundSourceLocationSyntax.self)!
  }
  public var rightParen: RawTokenSyntax {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))!
  }
  public func withRightParen(_ rightParen: RawTokenSyntax, arena: SyntaxArena) -> RawPoundSourceLocationSyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(rightParen), arena: arena).as(RawPoundSourceLocationSyntax.self)!
  }
  public var unexpectedAfterRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightParen(_ unexpectedAfterRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundSourceLocationSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedAfterRightParen.map(RawSyntax.init), arena: arena).as(RawPoundSourceLocationSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawPoundSourceLocationArgsSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = PoundSourceLocationArgsSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .poundSourceLocationArgs
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeFileArgLabel: RawUnexpectedNodesSyntax? = nil,
    fileArgLabel: RawTokenSyntax,
    _ unexpectedBetweenFileArgLabelAndFileArgColon: RawUnexpectedNodesSyntax? = nil,
    fileArgColon: RawTokenSyntax,
    _ unexpectedBetweenFileArgColonAndFileName: RawUnexpectedNodesSyntax? = nil,
    fileName: RawTokenSyntax,
    _ unexpectedBetweenFileNameAndComma: RawUnexpectedNodesSyntax? = nil,
    comma: RawTokenSyntax,
    _ unexpectedBetweenCommaAndLineArgLabel: RawUnexpectedNodesSyntax? = nil,
    lineArgLabel: RawTokenSyntax,
    _ unexpectedBetweenLineArgLabelAndLineArgColon: RawUnexpectedNodesSyntax? = nil,
    lineArgColon: RawTokenSyntax,
    _ unexpectedBetweenLineArgColonAndLineNumber: RawUnexpectedNodesSyntax? = nil,
    lineNumber: RawTokenSyntax,
    _ unexpectedAfterLineNumber: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .poundSourceLocationArgs, uninitializedCount: 15, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeFileArgLabel?.raw
      layout[1] = fileArgLabel.raw
      layout[2] = unexpectedBetweenFileArgLabelAndFileArgColon?.raw
      layout[3] = fileArgColon.raw
      layout[4] = unexpectedBetweenFileArgColonAndFileName?.raw
      layout[5] = fileName.raw
      layout[6] = unexpectedBetweenFileNameAndComma?.raw
      layout[7] = comma.raw
      layout[8] = unexpectedBetweenCommaAndLineArgLabel?.raw
      layout[9] = lineArgLabel.raw
      layout[10] = unexpectedBetweenLineArgLabelAndLineArgColon?.raw
      layout[11] = lineArgColon.raw
      layout[12] = unexpectedBetweenLineArgColonAndLineNumber?.raw
      layout[13] = lineNumber.raw
      layout[14] = unexpectedAfterLineNumber?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeFileArgLabel: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeFileArgLabel(_ unexpectedBeforeFileArgLabel: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundSourceLocationArgsSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeFileArgLabel.map(RawSyntax.init), arena: arena).as(RawPoundSourceLocationArgsSyntax.self)!
  }
  public var fileArgLabel: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withFileArgLabel(_ fileArgLabel: RawTokenSyntax, arena: SyntaxArena) -> RawPoundSourceLocationArgsSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(fileArgLabel), arena: arena).as(RawPoundSourceLocationArgsSyntax.self)!
  }
  public var unexpectedBetweenFileArgLabelAndFileArgColon: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenFileArgLabelAndFileArgColon(_ unexpectedBetweenFileArgLabelAndFileArgColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundSourceLocationArgsSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenFileArgLabelAndFileArgColon.map(RawSyntax.init), arena: arena).as(RawPoundSourceLocationArgsSyntax.self)!
  }
  public var fileArgColon: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withFileArgColon(_ fileArgColon: RawTokenSyntax, arena: SyntaxArena) -> RawPoundSourceLocationArgsSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(fileArgColon), arena: arena).as(RawPoundSourceLocationArgsSyntax.self)!
  }
  public var unexpectedBetweenFileArgColonAndFileName: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenFileArgColonAndFileName(_ unexpectedBetweenFileArgColonAndFileName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundSourceLocationArgsSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenFileArgColonAndFileName.map(RawSyntax.init), arena: arena).as(RawPoundSourceLocationArgsSyntax.self)!
  }
  public var fileName: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withFileName(_ fileName: RawTokenSyntax, arena: SyntaxArena) -> RawPoundSourceLocationArgsSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(fileName), arena: arena).as(RawPoundSourceLocationArgsSyntax.self)!
  }
  public var unexpectedBetweenFileNameAndComma: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenFileNameAndComma(_ unexpectedBetweenFileNameAndComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundSourceLocationArgsSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenFileNameAndComma.map(RawSyntax.init), arena: arena).as(RawPoundSourceLocationArgsSyntax.self)!
  }
  public var comma: RawTokenSyntax {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))!
  }
  public func withComma(_ comma: RawTokenSyntax, arena: SyntaxArena) -> RawPoundSourceLocationArgsSyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(comma), arena: arena).as(RawPoundSourceLocationArgsSyntax.self)!
  }
  public var unexpectedBetweenCommaAndLineArgLabel: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenCommaAndLineArgLabel(_ unexpectedBetweenCommaAndLineArgLabel: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundSourceLocationArgsSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenCommaAndLineArgLabel.map(RawSyntax.init), arena: arena).as(RawPoundSourceLocationArgsSyntax.self)!
  }
  public var lineArgLabel: RawTokenSyntax {
    layoutView.children[9].map(RawTokenSyntax.init(raw:))!
  }
  public func withLineArgLabel(_ lineArgLabel: RawTokenSyntax, arena: SyntaxArena) -> RawPoundSourceLocationArgsSyntax {
    return layoutView.replacingChild(at: 9, with: RawSyntax(lineArgLabel), arena: arena).as(RawPoundSourceLocationArgsSyntax.self)!
  }
  public var unexpectedBetweenLineArgLabelAndLineArgColon: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLineArgLabelAndLineArgColon(_ unexpectedBetweenLineArgLabelAndLineArgColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundSourceLocationArgsSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedBetweenLineArgLabelAndLineArgColon.map(RawSyntax.init), arena: arena).as(RawPoundSourceLocationArgsSyntax.self)!
  }
  public var lineArgColon: RawTokenSyntax {
    layoutView.children[11].map(RawTokenSyntax.init(raw:))!
  }
  public func withLineArgColon(_ lineArgColon: RawTokenSyntax, arena: SyntaxArena) -> RawPoundSourceLocationArgsSyntax {
    return layoutView.replacingChild(at: 11, with: RawSyntax(lineArgColon), arena: arena).as(RawPoundSourceLocationArgsSyntax.self)!
  }
  public var unexpectedBetweenLineArgColonAndLineNumber: RawUnexpectedNodesSyntax? {
    layoutView.children[12].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLineArgColonAndLineNumber(_ unexpectedBetweenLineArgColonAndLineNumber: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundSourceLocationArgsSyntax {
    return layoutView.replacingChild(at: 12, with: unexpectedBetweenLineArgColonAndLineNumber.map(RawSyntax.init), arena: arena).as(RawPoundSourceLocationArgsSyntax.self)!
  }
  public var lineNumber: RawTokenSyntax {
    layoutView.children[13].map(RawTokenSyntax.init(raw:))!
  }
  public func withLineNumber(_ lineNumber: RawTokenSyntax, arena: SyntaxArena) -> RawPoundSourceLocationArgsSyntax {
    return layoutView.replacingChild(at: 13, with: RawSyntax(lineNumber), arena: arena).as(RawPoundSourceLocationArgsSyntax.self)!
  }
  public var unexpectedAfterLineNumber: RawUnexpectedNodesSyntax? {
    layoutView.children[14].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterLineNumber(_ unexpectedAfterLineNumber: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundSourceLocationArgsSyntax {
    return layoutView.replacingChild(at: 14, with: unexpectedAfterLineNumber.map(RawSyntax.init), arena: arena).as(RawPoundSourceLocationArgsSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawDeclModifierDetailSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = DeclModifierDetailSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .declModifierDetail
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeLeftParen: RawUnexpectedNodesSyntax? = nil,
    leftParen: RawTokenSyntax,
    _ unexpectedBetweenLeftParenAndDetail: RawUnexpectedNodesSyntax? = nil,
    detail: RawTokenSyntax,
    _ unexpectedBetweenDetailAndRightParen: RawUnexpectedNodesSyntax? = nil,
    rightParen: RawTokenSyntax,
    _ unexpectedAfterRightParen: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .declModifierDetail, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeLeftParen?.raw
      layout[1] = leftParen.raw
      layout[2] = unexpectedBetweenLeftParenAndDetail?.raw
      layout[3] = detail.raw
      layout[4] = unexpectedBetweenDetailAndRightParen?.raw
      layout[5] = rightParen.raw
      layout[6] = unexpectedAfterRightParen?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeLeftParen: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeLeftParen(_ unexpectedBeforeLeftParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDeclModifierDetailSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeLeftParen.map(RawSyntax.init), arena: arena).as(RawDeclModifierDetailSyntax.self)!
  }
  public var leftParen: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeftParen(_ leftParen: RawTokenSyntax, arena: SyntaxArena) -> RawDeclModifierDetailSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(leftParen), arena: arena).as(RawDeclModifierDetailSyntax.self)!
  }
  public var unexpectedBetweenLeftParenAndDetail: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftParenAndDetail(_ unexpectedBetweenLeftParenAndDetail: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDeclModifierDetailSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenLeftParenAndDetail.map(RawSyntax.init), arena: arena).as(RawDeclModifierDetailSyntax.self)!
  }
  public var detail: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withDetail(_ detail: RawTokenSyntax, arena: SyntaxArena) -> RawDeclModifierDetailSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(detail), arena: arena).as(RawDeclModifierDetailSyntax.self)!
  }
  public var unexpectedBetweenDetailAndRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenDetailAndRightParen(_ unexpectedBetweenDetailAndRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDeclModifierDetailSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenDetailAndRightParen.map(RawSyntax.init), arena: arena).as(RawDeclModifierDetailSyntax.self)!
  }
  public var rightParen: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withRightParen(_ rightParen: RawTokenSyntax, arena: SyntaxArena) -> RawDeclModifierDetailSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(rightParen), arena: arena).as(RawDeclModifierDetailSyntax.self)!
  }
  public var unexpectedAfterRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightParen(_ unexpectedAfterRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDeclModifierDetailSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterRightParen.map(RawSyntax.init), arena: arena).as(RawDeclModifierDetailSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawDeclModifierSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = DeclModifierSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .declModifier
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeName: RawUnexpectedNodesSyntax? = nil,
    name: RawTokenSyntax,
    _ unexpectedBetweenNameAndDetail: RawUnexpectedNodesSyntax? = nil,
    detail: RawDeclModifierDetailSyntax?,
    _ unexpectedAfterDetail: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .declModifier, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeName?.raw
      layout[1] = name.raw
      layout[2] = unexpectedBetweenNameAndDetail?.raw
      layout[3] = detail?.raw
      layout[4] = unexpectedAfterDetail?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeName: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeName(_ unexpectedBeforeName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDeclModifierSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeName.map(RawSyntax.init), arena: arena).as(RawDeclModifierSyntax.self)!
  }
  public var name: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withName(_ name: RawTokenSyntax, arena: SyntaxArena) -> RawDeclModifierSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(name), arena: arena).as(RawDeclModifierSyntax.self)!
  }
  public var unexpectedBetweenNameAndDetail: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenNameAndDetail(_ unexpectedBetweenNameAndDetail: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDeclModifierSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenNameAndDetail.map(RawSyntax.init), arena: arena).as(RawDeclModifierSyntax.self)!
  }
  public var detail: RawDeclModifierDetailSyntax? {
    layoutView.children[3].map(RawDeclModifierDetailSyntax.init(raw:))
  }
  public func withDetail(_ detail: RawDeclModifierDetailSyntax?, arena: SyntaxArena) -> RawDeclModifierSyntax {
    return layoutView.replacingChild(at: 3, with: detail.map(RawSyntax.init), arena: arena).as(RawDeclModifierSyntax.self)!
  }
  public var unexpectedAfterDetail: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterDetail(_ unexpectedAfterDetail: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDeclModifierSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterDetail.map(RawSyntax.init), arena: arena).as(RawDeclModifierSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawInheritedTypeSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = InheritedTypeSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .inheritedType
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeTypeName: RawUnexpectedNodesSyntax? = nil,
    typeName: RawTypeSyntax,
    _ unexpectedBetweenTypeNameAndTrailingComma: RawUnexpectedNodesSyntax? = nil,
    trailingComma: RawTokenSyntax?,
    _ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .inheritedType, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeTypeName?.raw
      layout[1] = typeName.raw
      layout[2] = unexpectedBetweenTypeNameAndTrailingComma?.raw
      layout[3] = trailingComma?.raw
      layout[4] = unexpectedAfterTrailingComma?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeTypeName: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeTypeName(_ unexpectedBeforeTypeName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawInheritedTypeSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeTypeName.map(RawSyntax.init), arena: arena).as(RawInheritedTypeSyntax.self)!
  }
  public var typeName: RawTypeSyntax {
    layoutView.children[1].map(RawTypeSyntax.init(raw:))!
  }
  public func withTypeName(_ typeName: RawTypeSyntax, arena: SyntaxArena) -> RawInheritedTypeSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(typeName), arena: arena).as(RawInheritedTypeSyntax.self)!
  }
  public var unexpectedBetweenTypeNameAndTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenTypeNameAndTrailingComma(_ unexpectedBetweenTypeNameAndTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawInheritedTypeSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenTypeNameAndTrailingComma.map(RawSyntax.init), arena: arena).as(RawInheritedTypeSyntax.self)!
  }
  public var trailingComma: RawTokenSyntax? {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))
  }
  public func withTrailingComma(_ trailingComma: RawTokenSyntax?, arena: SyntaxArena) -> RawInheritedTypeSyntax {
    return layoutView.replacingChild(at: 3, with: trailingComma.map(RawSyntax.init), arena: arena).as(RawInheritedTypeSyntax.self)!
  }
  public var unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterTrailingComma(_ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawInheritedTypeSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterTrailingComma.map(RawSyntax.init), arena: arena).as(RawInheritedTypeSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawInheritedTypeListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = InheritedTypeListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .inheritedTypeList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawInheritedTypeSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .inheritedTypeList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawInheritedTypeSyntax] {
    layoutView.children.map { RawInheritedTypeSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawTypeInheritanceClauseSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = TypeInheritanceClauseSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .typeInheritanceClause
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeColon: RawUnexpectedNodesSyntax? = nil,
    colon: RawTokenSyntax,
    _ unexpectedBetweenColonAndInheritedTypeCollection: RawUnexpectedNodesSyntax? = nil,
    inheritedTypeCollection: RawInheritedTypeListSyntax,
    _ unexpectedAfterInheritedTypeCollection: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .typeInheritanceClause, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeColon?.raw
      layout[1] = colon.raw
      layout[2] = unexpectedBetweenColonAndInheritedTypeCollection?.raw
      layout[3] = inheritedTypeCollection.raw
      layout[4] = unexpectedAfterInheritedTypeCollection?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeColon: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeColon(_ unexpectedBeforeColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTypeInheritanceClauseSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeColon.map(RawSyntax.init), arena: arena).as(RawTypeInheritanceClauseSyntax.self)!
  }
  public var colon: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withColon(_ colon: RawTokenSyntax, arena: SyntaxArena) -> RawTypeInheritanceClauseSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(colon), arena: arena).as(RawTypeInheritanceClauseSyntax.self)!
  }
  public var unexpectedBetweenColonAndInheritedTypeCollection: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenColonAndInheritedTypeCollection(_ unexpectedBetweenColonAndInheritedTypeCollection: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTypeInheritanceClauseSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenColonAndInheritedTypeCollection.map(RawSyntax.init), arena: arena).as(RawTypeInheritanceClauseSyntax.self)!
  }
  public var inheritedTypeCollection: RawInheritedTypeListSyntax {
    layoutView.children[3].map(RawInheritedTypeListSyntax.init(raw:))!
  }
  public func withInheritedTypeCollection(_ inheritedTypeCollection: RawInheritedTypeListSyntax, arena: SyntaxArena) -> RawTypeInheritanceClauseSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(inheritedTypeCollection), arena: arena).as(RawTypeInheritanceClauseSyntax.self)!
  }
  public var unexpectedAfterInheritedTypeCollection: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterInheritedTypeCollection(_ unexpectedAfterInheritedTypeCollection: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTypeInheritanceClauseSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterInheritedTypeCollection.map(RawSyntax.init), arena: arena).as(RawTypeInheritanceClauseSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawClassDeclSyntax: RawDeclSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ClassDeclSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .classDecl
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? = nil,
    attributes: RawAttributeListSyntax?,
    _ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? = nil,
    modifiers: RawModifierListSyntax?,
    _ unexpectedBetweenModifiersAndClassKeyword: RawUnexpectedNodesSyntax? = nil,
    classKeyword: RawTokenSyntax,
    _ unexpectedBetweenClassKeywordAndIdentifier: RawUnexpectedNodesSyntax? = nil,
    identifier: RawTokenSyntax,
    _ unexpectedBetweenIdentifierAndGenericParameterClause: RawUnexpectedNodesSyntax? = nil,
    genericParameterClause: RawGenericParameterClauseSyntax?,
    _ unexpectedBetweenGenericParameterClauseAndInheritanceClause: RawUnexpectedNodesSyntax? = nil,
    inheritanceClause: RawTypeInheritanceClauseSyntax?,
    _ unexpectedBetweenInheritanceClauseAndGenericWhereClause: RawUnexpectedNodesSyntax? = nil,
    genericWhereClause: RawGenericWhereClauseSyntax?,
    _ unexpectedBetweenGenericWhereClauseAndMembers: RawUnexpectedNodesSyntax? = nil,
    members: RawMemberDeclBlockSyntax,
    _ unexpectedAfterMembers: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .classDecl, uninitializedCount: 17, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeAttributes?.raw
      layout[1] = attributes?.raw
      layout[2] = unexpectedBetweenAttributesAndModifiers?.raw
      layout[3] = modifiers?.raw
      layout[4] = unexpectedBetweenModifiersAndClassKeyword?.raw
      layout[5] = classKeyword.raw
      layout[6] = unexpectedBetweenClassKeywordAndIdentifier?.raw
      layout[7] = identifier.raw
      layout[8] = unexpectedBetweenIdentifierAndGenericParameterClause?.raw
      layout[9] = genericParameterClause?.raw
      layout[10] = unexpectedBetweenGenericParameterClauseAndInheritanceClause?.raw
      layout[11] = inheritanceClause?.raw
      layout[12] = unexpectedBetweenInheritanceClauseAndGenericWhereClause?.raw
      layout[13] = genericWhereClause?.raw
      layout[14] = unexpectedBetweenGenericWhereClauseAndMembers?.raw
      layout[15] = members.raw
      layout[16] = unexpectedAfterMembers?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeAttributes(_ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawClassDeclSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeAttributes.map(RawSyntax.init), arena: arena).as(RawClassDeclSyntax.self)!
  }
  public var attributes: RawAttributeListSyntax? {
    layoutView.children[1].map(RawAttributeListSyntax.init(raw:))
  }
  public func withAttributes(_ attributes: RawAttributeListSyntax?, arena: SyntaxArena) -> RawClassDeclSyntax {
    return layoutView.replacingChild(at: 1, with: attributes.map(RawSyntax.init), arena: arena).as(RawClassDeclSyntax.self)!
  }
  public var unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAttributesAndModifiers(_ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawClassDeclSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenAttributesAndModifiers.map(RawSyntax.init), arena: arena).as(RawClassDeclSyntax.self)!
  }
  public var modifiers: RawModifierListSyntax? {
    layoutView.children[3].map(RawModifierListSyntax.init(raw:))
  }
  public func withModifiers(_ modifiers: RawModifierListSyntax?, arena: SyntaxArena) -> RawClassDeclSyntax {
    return layoutView.replacingChild(at: 3, with: modifiers.map(RawSyntax.init), arena: arena).as(RawClassDeclSyntax.self)!
  }
  public var unexpectedBetweenModifiersAndClassKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenModifiersAndClassKeyword(_ unexpectedBetweenModifiersAndClassKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawClassDeclSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenModifiersAndClassKeyword.map(RawSyntax.init), arena: arena).as(RawClassDeclSyntax.self)!
  }
  public var classKeyword: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withClassKeyword(_ classKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawClassDeclSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(classKeyword), arena: arena).as(RawClassDeclSyntax.self)!
  }
  public var unexpectedBetweenClassKeywordAndIdentifier: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenClassKeywordAndIdentifier(_ unexpectedBetweenClassKeywordAndIdentifier: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawClassDeclSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenClassKeywordAndIdentifier.map(RawSyntax.init), arena: arena).as(RawClassDeclSyntax.self)!
  }
  public var identifier: RawTokenSyntax {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))!
  }
  public func withIdentifier(_ identifier: RawTokenSyntax, arena: SyntaxArena) -> RawClassDeclSyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(identifier), arena: arena).as(RawClassDeclSyntax.self)!
  }
  public var unexpectedBetweenIdentifierAndGenericParameterClause: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenIdentifierAndGenericParameterClause(_ unexpectedBetweenIdentifierAndGenericParameterClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawClassDeclSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenIdentifierAndGenericParameterClause.map(RawSyntax.init), arena: arena).as(RawClassDeclSyntax.self)!
  }
  public var genericParameterClause: RawGenericParameterClauseSyntax? {
    layoutView.children[9].map(RawGenericParameterClauseSyntax.init(raw:))
  }
  public func withGenericParameterClause(_ genericParameterClause: RawGenericParameterClauseSyntax?, arena: SyntaxArena) -> RawClassDeclSyntax {
    return layoutView.replacingChild(at: 9, with: genericParameterClause.map(RawSyntax.init), arena: arena).as(RawClassDeclSyntax.self)!
  }
  public var unexpectedBetweenGenericParameterClauseAndInheritanceClause: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenGenericParameterClauseAndInheritanceClause(_ unexpectedBetweenGenericParameterClauseAndInheritanceClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawClassDeclSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedBetweenGenericParameterClauseAndInheritanceClause.map(RawSyntax.init), arena: arena).as(RawClassDeclSyntax.self)!
  }
  public var inheritanceClause: RawTypeInheritanceClauseSyntax? {
    layoutView.children[11].map(RawTypeInheritanceClauseSyntax.init(raw:))
  }
  public func withInheritanceClause(_ inheritanceClause: RawTypeInheritanceClauseSyntax?, arena: SyntaxArena) -> RawClassDeclSyntax {
    return layoutView.replacingChild(at: 11, with: inheritanceClause.map(RawSyntax.init), arena: arena).as(RawClassDeclSyntax.self)!
  }
  public var unexpectedBetweenInheritanceClauseAndGenericWhereClause: RawUnexpectedNodesSyntax? {
    layoutView.children[12].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenInheritanceClauseAndGenericWhereClause(_ unexpectedBetweenInheritanceClauseAndGenericWhereClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawClassDeclSyntax {
    return layoutView.replacingChild(at: 12, with: unexpectedBetweenInheritanceClauseAndGenericWhereClause.map(RawSyntax.init), arena: arena).as(RawClassDeclSyntax.self)!
  }
  public var genericWhereClause: RawGenericWhereClauseSyntax? {
    layoutView.children[13].map(RawGenericWhereClauseSyntax.init(raw:))
  }
  public func withGenericWhereClause(_ genericWhereClause: RawGenericWhereClauseSyntax?, arena: SyntaxArena) -> RawClassDeclSyntax {
    return layoutView.replacingChild(at: 13, with: genericWhereClause.map(RawSyntax.init), arena: arena).as(RawClassDeclSyntax.self)!
  }
  public var unexpectedBetweenGenericWhereClauseAndMembers: RawUnexpectedNodesSyntax? {
    layoutView.children[14].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenGenericWhereClauseAndMembers(_ unexpectedBetweenGenericWhereClauseAndMembers: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawClassDeclSyntax {
    return layoutView.replacingChild(at: 14, with: unexpectedBetweenGenericWhereClauseAndMembers.map(RawSyntax.init), arena: arena).as(RawClassDeclSyntax.self)!
  }
  public var members: RawMemberDeclBlockSyntax {
    layoutView.children[15].map(RawMemberDeclBlockSyntax.init(raw:))!
  }
  public func withMembers(_ members: RawMemberDeclBlockSyntax, arena: SyntaxArena) -> RawClassDeclSyntax {
    return layoutView.replacingChild(at: 15, with: RawSyntax(members), arena: arena).as(RawClassDeclSyntax.self)!
  }
  public var unexpectedAfterMembers: RawUnexpectedNodesSyntax? {
    layoutView.children[16].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterMembers(_ unexpectedAfterMembers: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawClassDeclSyntax {
    return layoutView.replacingChild(at: 16, with: unexpectedAfterMembers.map(RawSyntax.init), arena: arena).as(RawClassDeclSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawActorDeclSyntax: RawDeclSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ActorDeclSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .actorDecl
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? = nil,
    attributes: RawAttributeListSyntax?,
    _ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? = nil,
    modifiers: RawModifierListSyntax?,
    _ unexpectedBetweenModifiersAndActorKeyword: RawUnexpectedNodesSyntax? = nil,
    actorKeyword: RawTokenSyntax,
    _ unexpectedBetweenActorKeywordAndIdentifier: RawUnexpectedNodesSyntax? = nil,
    identifier: RawTokenSyntax,
    _ unexpectedBetweenIdentifierAndGenericParameterClause: RawUnexpectedNodesSyntax? = nil,
    genericParameterClause: RawGenericParameterClauseSyntax?,
    _ unexpectedBetweenGenericParameterClauseAndInheritanceClause: RawUnexpectedNodesSyntax? = nil,
    inheritanceClause: RawTypeInheritanceClauseSyntax?,
    _ unexpectedBetweenInheritanceClauseAndGenericWhereClause: RawUnexpectedNodesSyntax? = nil,
    genericWhereClause: RawGenericWhereClauseSyntax?,
    _ unexpectedBetweenGenericWhereClauseAndMembers: RawUnexpectedNodesSyntax? = nil,
    members: RawMemberDeclBlockSyntax,
    _ unexpectedAfterMembers: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .actorDecl, uninitializedCount: 17, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeAttributes?.raw
      layout[1] = attributes?.raw
      layout[2] = unexpectedBetweenAttributesAndModifiers?.raw
      layout[3] = modifiers?.raw
      layout[4] = unexpectedBetweenModifiersAndActorKeyword?.raw
      layout[5] = actorKeyword.raw
      layout[6] = unexpectedBetweenActorKeywordAndIdentifier?.raw
      layout[7] = identifier.raw
      layout[8] = unexpectedBetweenIdentifierAndGenericParameterClause?.raw
      layout[9] = genericParameterClause?.raw
      layout[10] = unexpectedBetweenGenericParameterClauseAndInheritanceClause?.raw
      layout[11] = inheritanceClause?.raw
      layout[12] = unexpectedBetweenInheritanceClauseAndGenericWhereClause?.raw
      layout[13] = genericWhereClause?.raw
      layout[14] = unexpectedBetweenGenericWhereClauseAndMembers?.raw
      layout[15] = members.raw
      layout[16] = unexpectedAfterMembers?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeAttributes(_ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawActorDeclSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeAttributes.map(RawSyntax.init), arena: arena).as(RawActorDeclSyntax.self)!
  }
  public var attributes: RawAttributeListSyntax? {
    layoutView.children[1].map(RawAttributeListSyntax.init(raw:))
  }
  public func withAttributes(_ attributes: RawAttributeListSyntax?, arena: SyntaxArena) -> RawActorDeclSyntax {
    return layoutView.replacingChild(at: 1, with: attributes.map(RawSyntax.init), arena: arena).as(RawActorDeclSyntax.self)!
  }
  public var unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAttributesAndModifiers(_ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawActorDeclSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenAttributesAndModifiers.map(RawSyntax.init), arena: arena).as(RawActorDeclSyntax.self)!
  }
  public var modifiers: RawModifierListSyntax? {
    layoutView.children[3].map(RawModifierListSyntax.init(raw:))
  }
  public func withModifiers(_ modifiers: RawModifierListSyntax?, arena: SyntaxArena) -> RawActorDeclSyntax {
    return layoutView.replacingChild(at: 3, with: modifiers.map(RawSyntax.init), arena: arena).as(RawActorDeclSyntax.self)!
  }
  public var unexpectedBetweenModifiersAndActorKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenModifiersAndActorKeyword(_ unexpectedBetweenModifiersAndActorKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawActorDeclSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenModifiersAndActorKeyword.map(RawSyntax.init), arena: arena).as(RawActorDeclSyntax.self)!
  }
  public var actorKeyword: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withActorKeyword(_ actorKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawActorDeclSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(actorKeyword), arena: arena).as(RawActorDeclSyntax.self)!
  }
  public var unexpectedBetweenActorKeywordAndIdentifier: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenActorKeywordAndIdentifier(_ unexpectedBetweenActorKeywordAndIdentifier: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawActorDeclSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenActorKeywordAndIdentifier.map(RawSyntax.init), arena: arena).as(RawActorDeclSyntax.self)!
  }
  public var identifier: RawTokenSyntax {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))!
  }
  public func withIdentifier(_ identifier: RawTokenSyntax, arena: SyntaxArena) -> RawActorDeclSyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(identifier), arena: arena).as(RawActorDeclSyntax.self)!
  }
  public var unexpectedBetweenIdentifierAndGenericParameterClause: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenIdentifierAndGenericParameterClause(_ unexpectedBetweenIdentifierAndGenericParameterClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawActorDeclSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenIdentifierAndGenericParameterClause.map(RawSyntax.init), arena: arena).as(RawActorDeclSyntax.self)!
  }
  public var genericParameterClause: RawGenericParameterClauseSyntax? {
    layoutView.children[9].map(RawGenericParameterClauseSyntax.init(raw:))
  }
  public func withGenericParameterClause(_ genericParameterClause: RawGenericParameterClauseSyntax?, arena: SyntaxArena) -> RawActorDeclSyntax {
    return layoutView.replacingChild(at: 9, with: genericParameterClause.map(RawSyntax.init), arena: arena).as(RawActorDeclSyntax.self)!
  }
  public var unexpectedBetweenGenericParameterClauseAndInheritanceClause: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenGenericParameterClauseAndInheritanceClause(_ unexpectedBetweenGenericParameterClauseAndInheritanceClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawActorDeclSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedBetweenGenericParameterClauseAndInheritanceClause.map(RawSyntax.init), arena: arena).as(RawActorDeclSyntax.self)!
  }
  public var inheritanceClause: RawTypeInheritanceClauseSyntax? {
    layoutView.children[11].map(RawTypeInheritanceClauseSyntax.init(raw:))
  }
  public func withInheritanceClause(_ inheritanceClause: RawTypeInheritanceClauseSyntax?, arena: SyntaxArena) -> RawActorDeclSyntax {
    return layoutView.replacingChild(at: 11, with: inheritanceClause.map(RawSyntax.init), arena: arena).as(RawActorDeclSyntax.self)!
  }
  public var unexpectedBetweenInheritanceClauseAndGenericWhereClause: RawUnexpectedNodesSyntax? {
    layoutView.children[12].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenInheritanceClauseAndGenericWhereClause(_ unexpectedBetweenInheritanceClauseAndGenericWhereClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawActorDeclSyntax {
    return layoutView.replacingChild(at: 12, with: unexpectedBetweenInheritanceClauseAndGenericWhereClause.map(RawSyntax.init), arena: arena).as(RawActorDeclSyntax.self)!
  }
  public var genericWhereClause: RawGenericWhereClauseSyntax? {
    layoutView.children[13].map(RawGenericWhereClauseSyntax.init(raw:))
  }
  public func withGenericWhereClause(_ genericWhereClause: RawGenericWhereClauseSyntax?, arena: SyntaxArena) -> RawActorDeclSyntax {
    return layoutView.replacingChild(at: 13, with: genericWhereClause.map(RawSyntax.init), arena: arena).as(RawActorDeclSyntax.self)!
  }
  public var unexpectedBetweenGenericWhereClauseAndMembers: RawUnexpectedNodesSyntax? {
    layoutView.children[14].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenGenericWhereClauseAndMembers(_ unexpectedBetweenGenericWhereClauseAndMembers: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawActorDeclSyntax {
    return layoutView.replacingChild(at: 14, with: unexpectedBetweenGenericWhereClauseAndMembers.map(RawSyntax.init), arena: arena).as(RawActorDeclSyntax.self)!
  }
  public var members: RawMemberDeclBlockSyntax {
    layoutView.children[15].map(RawMemberDeclBlockSyntax.init(raw:))!
  }
  public func withMembers(_ members: RawMemberDeclBlockSyntax, arena: SyntaxArena) -> RawActorDeclSyntax {
    return layoutView.replacingChild(at: 15, with: RawSyntax(members), arena: arena).as(RawActorDeclSyntax.self)!
  }
  public var unexpectedAfterMembers: RawUnexpectedNodesSyntax? {
    layoutView.children[16].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterMembers(_ unexpectedAfterMembers: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawActorDeclSyntax {
    return layoutView.replacingChild(at: 16, with: unexpectedAfterMembers.map(RawSyntax.init), arena: arena).as(RawActorDeclSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawStructDeclSyntax: RawDeclSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = StructDeclSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .structDecl
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? = nil,
    attributes: RawAttributeListSyntax?,
    _ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? = nil,
    modifiers: RawModifierListSyntax?,
    _ unexpectedBetweenModifiersAndStructKeyword: RawUnexpectedNodesSyntax? = nil,
    structKeyword: RawTokenSyntax,
    _ unexpectedBetweenStructKeywordAndIdentifier: RawUnexpectedNodesSyntax? = nil,
    identifier: RawTokenSyntax,
    _ unexpectedBetweenIdentifierAndGenericParameterClause: RawUnexpectedNodesSyntax? = nil,
    genericParameterClause: RawGenericParameterClauseSyntax?,
    _ unexpectedBetweenGenericParameterClauseAndInheritanceClause: RawUnexpectedNodesSyntax? = nil,
    inheritanceClause: RawTypeInheritanceClauseSyntax?,
    _ unexpectedBetweenInheritanceClauseAndGenericWhereClause: RawUnexpectedNodesSyntax? = nil,
    genericWhereClause: RawGenericWhereClauseSyntax?,
    _ unexpectedBetweenGenericWhereClauseAndMembers: RawUnexpectedNodesSyntax? = nil,
    members: RawMemberDeclBlockSyntax,
    _ unexpectedAfterMembers: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .structDecl, uninitializedCount: 17, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeAttributes?.raw
      layout[1] = attributes?.raw
      layout[2] = unexpectedBetweenAttributesAndModifiers?.raw
      layout[3] = modifiers?.raw
      layout[4] = unexpectedBetweenModifiersAndStructKeyword?.raw
      layout[5] = structKeyword.raw
      layout[6] = unexpectedBetweenStructKeywordAndIdentifier?.raw
      layout[7] = identifier.raw
      layout[8] = unexpectedBetweenIdentifierAndGenericParameterClause?.raw
      layout[9] = genericParameterClause?.raw
      layout[10] = unexpectedBetweenGenericParameterClauseAndInheritanceClause?.raw
      layout[11] = inheritanceClause?.raw
      layout[12] = unexpectedBetweenInheritanceClauseAndGenericWhereClause?.raw
      layout[13] = genericWhereClause?.raw
      layout[14] = unexpectedBetweenGenericWhereClauseAndMembers?.raw
      layout[15] = members.raw
      layout[16] = unexpectedAfterMembers?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeAttributes(_ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawStructDeclSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeAttributes.map(RawSyntax.init), arena: arena).as(RawStructDeclSyntax.self)!
  }
  public var attributes: RawAttributeListSyntax? {
    layoutView.children[1].map(RawAttributeListSyntax.init(raw:))
  }
  public func withAttributes(_ attributes: RawAttributeListSyntax?, arena: SyntaxArena) -> RawStructDeclSyntax {
    return layoutView.replacingChild(at: 1, with: attributes.map(RawSyntax.init), arena: arena).as(RawStructDeclSyntax.self)!
  }
  public var unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAttributesAndModifiers(_ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawStructDeclSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenAttributesAndModifiers.map(RawSyntax.init), arena: arena).as(RawStructDeclSyntax.self)!
  }
  public var modifiers: RawModifierListSyntax? {
    layoutView.children[3].map(RawModifierListSyntax.init(raw:))
  }
  public func withModifiers(_ modifiers: RawModifierListSyntax?, arena: SyntaxArena) -> RawStructDeclSyntax {
    return layoutView.replacingChild(at: 3, with: modifiers.map(RawSyntax.init), arena: arena).as(RawStructDeclSyntax.self)!
  }
  public var unexpectedBetweenModifiersAndStructKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenModifiersAndStructKeyword(_ unexpectedBetweenModifiersAndStructKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawStructDeclSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenModifiersAndStructKeyword.map(RawSyntax.init), arena: arena).as(RawStructDeclSyntax.self)!
  }
  public var structKeyword: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withStructKeyword(_ structKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawStructDeclSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(structKeyword), arena: arena).as(RawStructDeclSyntax.self)!
  }
  public var unexpectedBetweenStructKeywordAndIdentifier: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenStructKeywordAndIdentifier(_ unexpectedBetweenStructKeywordAndIdentifier: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawStructDeclSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenStructKeywordAndIdentifier.map(RawSyntax.init), arena: arena).as(RawStructDeclSyntax.self)!
  }
  public var identifier: RawTokenSyntax {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))!
  }
  public func withIdentifier(_ identifier: RawTokenSyntax, arena: SyntaxArena) -> RawStructDeclSyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(identifier), arena: arena).as(RawStructDeclSyntax.self)!
  }
  public var unexpectedBetweenIdentifierAndGenericParameterClause: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenIdentifierAndGenericParameterClause(_ unexpectedBetweenIdentifierAndGenericParameterClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawStructDeclSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenIdentifierAndGenericParameterClause.map(RawSyntax.init), arena: arena).as(RawStructDeclSyntax.self)!
  }
  public var genericParameterClause: RawGenericParameterClauseSyntax? {
    layoutView.children[9].map(RawGenericParameterClauseSyntax.init(raw:))
  }
  public func withGenericParameterClause(_ genericParameterClause: RawGenericParameterClauseSyntax?, arena: SyntaxArena) -> RawStructDeclSyntax {
    return layoutView.replacingChild(at: 9, with: genericParameterClause.map(RawSyntax.init), arena: arena).as(RawStructDeclSyntax.self)!
  }
  public var unexpectedBetweenGenericParameterClauseAndInheritanceClause: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenGenericParameterClauseAndInheritanceClause(_ unexpectedBetweenGenericParameterClauseAndInheritanceClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawStructDeclSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedBetweenGenericParameterClauseAndInheritanceClause.map(RawSyntax.init), arena: arena).as(RawStructDeclSyntax.self)!
  }
  public var inheritanceClause: RawTypeInheritanceClauseSyntax? {
    layoutView.children[11].map(RawTypeInheritanceClauseSyntax.init(raw:))
  }
  public func withInheritanceClause(_ inheritanceClause: RawTypeInheritanceClauseSyntax?, arena: SyntaxArena) -> RawStructDeclSyntax {
    return layoutView.replacingChild(at: 11, with: inheritanceClause.map(RawSyntax.init), arena: arena).as(RawStructDeclSyntax.self)!
  }
  public var unexpectedBetweenInheritanceClauseAndGenericWhereClause: RawUnexpectedNodesSyntax? {
    layoutView.children[12].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenInheritanceClauseAndGenericWhereClause(_ unexpectedBetweenInheritanceClauseAndGenericWhereClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawStructDeclSyntax {
    return layoutView.replacingChild(at: 12, with: unexpectedBetweenInheritanceClauseAndGenericWhereClause.map(RawSyntax.init), arena: arena).as(RawStructDeclSyntax.self)!
  }
  public var genericWhereClause: RawGenericWhereClauseSyntax? {
    layoutView.children[13].map(RawGenericWhereClauseSyntax.init(raw:))
  }
  public func withGenericWhereClause(_ genericWhereClause: RawGenericWhereClauseSyntax?, arena: SyntaxArena) -> RawStructDeclSyntax {
    return layoutView.replacingChild(at: 13, with: genericWhereClause.map(RawSyntax.init), arena: arena).as(RawStructDeclSyntax.self)!
  }
  public var unexpectedBetweenGenericWhereClauseAndMembers: RawUnexpectedNodesSyntax? {
    layoutView.children[14].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenGenericWhereClauseAndMembers(_ unexpectedBetweenGenericWhereClauseAndMembers: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawStructDeclSyntax {
    return layoutView.replacingChild(at: 14, with: unexpectedBetweenGenericWhereClauseAndMembers.map(RawSyntax.init), arena: arena).as(RawStructDeclSyntax.self)!
  }
  public var members: RawMemberDeclBlockSyntax {
    layoutView.children[15].map(RawMemberDeclBlockSyntax.init(raw:))!
  }
  public func withMembers(_ members: RawMemberDeclBlockSyntax, arena: SyntaxArena) -> RawStructDeclSyntax {
    return layoutView.replacingChild(at: 15, with: RawSyntax(members), arena: arena).as(RawStructDeclSyntax.self)!
  }
  public var unexpectedAfterMembers: RawUnexpectedNodesSyntax? {
    layoutView.children[16].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterMembers(_ unexpectedAfterMembers: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawStructDeclSyntax {
    return layoutView.replacingChild(at: 16, with: unexpectedAfterMembers.map(RawSyntax.init), arena: arena).as(RawStructDeclSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawProtocolDeclSyntax: RawDeclSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ProtocolDeclSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .protocolDecl
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? = nil,
    attributes: RawAttributeListSyntax?,
    _ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? = nil,
    modifiers: RawModifierListSyntax?,
    _ unexpectedBetweenModifiersAndProtocolKeyword: RawUnexpectedNodesSyntax? = nil,
    protocolKeyword: RawTokenSyntax,
    _ unexpectedBetweenProtocolKeywordAndIdentifier: RawUnexpectedNodesSyntax? = nil,
    identifier: RawTokenSyntax,
    _ unexpectedBetweenIdentifierAndPrimaryAssociatedTypeClause: RawUnexpectedNodesSyntax? = nil,
    primaryAssociatedTypeClause: RawPrimaryAssociatedTypeClauseSyntax?,
    _ unexpectedBetweenPrimaryAssociatedTypeClauseAndInheritanceClause: RawUnexpectedNodesSyntax? = nil,
    inheritanceClause: RawTypeInheritanceClauseSyntax?,
    _ unexpectedBetweenInheritanceClauseAndGenericWhereClause: RawUnexpectedNodesSyntax? = nil,
    genericWhereClause: RawGenericWhereClauseSyntax?,
    _ unexpectedBetweenGenericWhereClauseAndMembers: RawUnexpectedNodesSyntax? = nil,
    members: RawMemberDeclBlockSyntax,
    _ unexpectedAfterMembers: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .protocolDecl, uninitializedCount: 17, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeAttributes?.raw
      layout[1] = attributes?.raw
      layout[2] = unexpectedBetweenAttributesAndModifiers?.raw
      layout[3] = modifiers?.raw
      layout[4] = unexpectedBetweenModifiersAndProtocolKeyword?.raw
      layout[5] = protocolKeyword.raw
      layout[6] = unexpectedBetweenProtocolKeywordAndIdentifier?.raw
      layout[7] = identifier.raw
      layout[8] = unexpectedBetweenIdentifierAndPrimaryAssociatedTypeClause?.raw
      layout[9] = primaryAssociatedTypeClause?.raw
      layout[10] = unexpectedBetweenPrimaryAssociatedTypeClauseAndInheritanceClause?.raw
      layout[11] = inheritanceClause?.raw
      layout[12] = unexpectedBetweenInheritanceClauseAndGenericWhereClause?.raw
      layout[13] = genericWhereClause?.raw
      layout[14] = unexpectedBetweenGenericWhereClauseAndMembers?.raw
      layout[15] = members.raw
      layout[16] = unexpectedAfterMembers?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeAttributes(_ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawProtocolDeclSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeAttributes.map(RawSyntax.init), arena: arena).as(RawProtocolDeclSyntax.self)!
  }
  public var attributes: RawAttributeListSyntax? {
    layoutView.children[1].map(RawAttributeListSyntax.init(raw:))
  }
  public func withAttributes(_ attributes: RawAttributeListSyntax?, arena: SyntaxArena) -> RawProtocolDeclSyntax {
    return layoutView.replacingChild(at: 1, with: attributes.map(RawSyntax.init), arena: arena).as(RawProtocolDeclSyntax.self)!
  }
  public var unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAttributesAndModifiers(_ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawProtocolDeclSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenAttributesAndModifiers.map(RawSyntax.init), arena: arena).as(RawProtocolDeclSyntax.self)!
  }
  public var modifiers: RawModifierListSyntax? {
    layoutView.children[3].map(RawModifierListSyntax.init(raw:))
  }
  public func withModifiers(_ modifiers: RawModifierListSyntax?, arena: SyntaxArena) -> RawProtocolDeclSyntax {
    return layoutView.replacingChild(at: 3, with: modifiers.map(RawSyntax.init), arena: arena).as(RawProtocolDeclSyntax.self)!
  }
  public var unexpectedBetweenModifiersAndProtocolKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenModifiersAndProtocolKeyword(_ unexpectedBetweenModifiersAndProtocolKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawProtocolDeclSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenModifiersAndProtocolKeyword.map(RawSyntax.init), arena: arena).as(RawProtocolDeclSyntax.self)!
  }
  public var protocolKeyword: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withProtocolKeyword(_ protocolKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawProtocolDeclSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(protocolKeyword), arena: arena).as(RawProtocolDeclSyntax.self)!
  }
  public var unexpectedBetweenProtocolKeywordAndIdentifier: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenProtocolKeywordAndIdentifier(_ unexpectedBetweenProtocolKeywordAndIdentifier: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawProtocolDeclSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenProtocolKeywordAndIdentifier.map(RawSyntax.init), arena: arena).as(RawProtocolDeclSyntax.self)!
  }
  public var identifier: RawTokenSyntax {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))!
  }
  public func withIdentifier(_ identifier: RawTokenSyntax, arena: SyntaxArena) -> RawProtocolDeclSyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(identifier), arena: arena).as(RawProtocolDeclSyntax.self)!
  }
  public var unexpectedBetweenIdentifierAndPrimaryAssociatedTypeClause: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenIdentifierAndPrimaryAssociatedTypeClause(_ unexpectedBetweenIdentifierAndPrimaryAssociatedTypeClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawProtocolDeclSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenIdentifierAndPrimaryAssociatedTypeClause.map(RawSyntax.init), arena: arena).as(RawProtocolDeclSyntax.self)!
  }
  public var primaryAssociatedTypeClause: RawPrimaryAssociatedTypeClauseSyntax? {
    layoutView.children[9].map(RawPrimaryAssociatedTypeClauseSyntax.init(raw:))
  }
  public func withPrimaryAssociatedTypeClause(_ primaryAssociatedTypeClause: RawPrimaryAssociatedTypeClauseSyntax?, arena: SyntaxArena) -> RawProtocolDeclSyntax {
    return layoutView.replacingChild(at: 9, with: primaryAssociatedTypeClause.map(RawSyntax.init), arena: arena).as(RawProtocolDeclSyntax.self)!
  }
  public var unexpectedBetweenPrimaryAssociatedTypeClauseAndInheritanceClause: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenPrimaryAssociatedTypeClauseAndInheritanceClause(_ unexpectedBetweenPrimaryAssociatedTypeClauseAndInheritanceClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawProtocolDeclSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedBetweenPrimaryAssociatedTypeClauseAndInheritanceClause.map(RawSyntax.init), arena: arena).as(RawProtocolDeclSyntax.self)!
  }
  public var inheritanceClause: RawTypeInheritanceClauseSyntax? {
    layoutView.children[11].map(RawTypeInheritanceClauseSyntax.init(raw:))
  }
  public func withInheritanceClause(_ inheritanceClause: RawTypeInheritanceClauseSyntax?, arena: SyntaxArena) -> RawProtocolDeclSyntax {
    return layoutView.replacingChild(at: 11, with: inheritanceClause.map(RawSyntax.init), arena: arena).as(RawProtocolDeclSyntax.self)!
  }
  public var unexpectedBetweenInheritanceClauseAndGenericWhereClause: RawUnexpectedNodesSyntax? {
    layoutView.children[12].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenInheritanceClauseAndGenericWhereClause(_ unexpectedBetweenInheritanceClauseAndGenericWhereClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawProtocolDeclSyntax {
    return layoutView.replacingChild(at: 12, with: unexpectedBetweenInheritanceClauseAndGenericWhereClause.map(RawSyntax.init), arena: arena).as(RawProtocolDeclSyntax.self)!
  }
  public var genericWhereClause: RawGenericWhereClauseSyntax? {
    layoutView.children[13].map(RawGenericWhereClauseSyntax.init(raw:))
  }
  public func withGenericWhereClause(_ genericWhereClause: RawGenericWhereClauseSyntax?, arena: SyntaxArena) -> RawProtocolDeclSyntax {
    return layoutView.replacingChild(at: 13, with: genericWhereClause.map(RawSyntax.init), arena: arena).as(RawProtocolDeclSyntax.self)!
  }
  public var unexpectedBetweenGenericWhereClauseAndMembers: RawUnexpectedNodesSyntax? {
    layoutView.children[14].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenGenericWhereClauseAndMembers(_ unexpectedBetweenGenericWhereClauseAndMembers: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawProtocolDeclSyntax {
    return layoutView.replacingChild(at: 14, with: unexpectedBetweenGenericWhereClauseAndMembers.map(RawSyntax.init), arena: arena).as(RawProtocolDeclSyntax.self)!
  }
  public var members: RawMemberDeclBlockSyntax {
    layoutView.children[15].map(RawMemberDeclBlockSyntax.init(raw:))!
  }
  public func withMembers(_ members: RawMemberDeclBlockSyntax, arena: SyntaxArena) -> RawProtocolDeclSyntax {
    return layoutView.replacingChild(at: 15, with: RawSyntax(members), arena: arena).as(RawProtocolDeclSyntax.self)!
  }
  public var unexpectedAfterMembers: RawUnexpectedNodesSyntax? {
    layoutView.children[16].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterMembers(_ unexpectedAfterMembers: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawProtocolDeclSyntax {
    return layoutView.replacingChild(at: 16, with: unexpectedAfterMembers.map(RawSyntax.init), arena: arena).as(RawProtocolDeclSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawExtensionDeclSyntax: RawDeclSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ExtensionDeclSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .extensionDecl
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? = nil,
    attributes: RawAttributeListSyntax?,
    _ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? = nil,
    modifiers: RawModifierListSyntax?,
    _ unexpectedBetweenModifiersAndExtensionKeyword: RawUnexpectedNodesSyntax? = nil,
    extensionKeyword: RawTokenSyntax,
    _ unexpectedBetweenExtensionKeywordAndExtendedType: RawUnexpectedNodesSyntax? = nil,
    extendedType: RawTypeSyntax,
    _ unexpectedBetweenExtendedTypeAndInheritanceClause: RawUnexpectedNodesSyntax? = nil,
    inheritanceClause: RawTypeInheritanceClauseSyntax?,
    _ unexpectedBetweenInheritanceClauseAndGenericWhereClause: RawUnexpectedNodesSyntax? = nil,
    genericWhereClause: RawGenericWhereClauseSyntax?,
    _ unexpectedBetweenGenericWhereClauseAndMembers: RawUnexpectedNodesSyntax? = nil,
    members: RawMemberDeclBlockSyntax,
    _ unexpectedAfterMembers: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .extensionDecl, uninitializedCount: 15, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeAttributes?.raw
      layout[1] = attributes?.raw
      layout[2] = unexpectedBetweenAttributesAndModifiers?.raw
      layout[3] = modifiers?.raw
      layout[4] = unexpectedBetweenModifiersAndExtensionKeyword?.raw
      layout[5] = extensionKeyword.raw
      layout[6] = unexpectedBetweenExtensionKeywordAndExtendedType?.raw
      layout[7] = extendedType.raw
      layout[8] = unexpectedBetweenExtendedTypeAndInheritanceClause?.raw
      layout[9] = inheritanceClause?.raw
      layout[10] = unexpectedBetweenInheritanceClauseAndGenericWhereClause?.raw
      layout[11] = genericWhereClause?.raw
      layout[12] = unexpectedBetweenGenericWhereClauseAndMembers?.raw
      layout[13] = members.raw
      layout[14] = unexpectedAfterMembers?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeAttributes(_ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawExtensionDeclSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeAttributes.map(RawSyntax.init), arena: arena).as(RawExtensionDeclSyntax.self)!
  }
  public var attributes: RawAttributeListSyntax? {
    layoutView.children[1].map(RawAttributeListSyntax.init(raw:))
  }
  public func withAttributes(_ attributes: RawAttributeListSyntax?, arena: SyntaxArena) -> RawExtensionDeclSyntax {
    return layoutView.replacingChild(at: 1, with: attributes.map(RawSyntax.init), arena: arena).as(RawExtensionDeclSyntax.self)!
  }
  public var unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAttributesAndModifiers(_ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawExtensionDeclSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenAttributesAndModifiers.map(RawSyntax.init), arena: arena).as(RawExtensionDeclSyntax.self)!
  }
  public var modifiers: RawModifierListSyntax? {
    layoutView.children[3].map(RawModifierListSyntax.init(raw:))
  }
  public func withModifiers(_ modifiers: RawModifierListSyntax?, arena: SyntaxArena) -> RawExtensionDeclSyntax {
    return layoutView.replacingChild(at: 3, with: modifiers.map(RawSyntax.init), arena: arena).as(RawExtensionDeclSyntax.self)!
  }
  public var unexpectedBetweenModifiersAndExtensionKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenModifiersAndExtensionKeyword(_ unexpectedBetweenModifiersAndExtensionKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawExtensionDeclSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenModifiersAndExtensionKeyword.map(RawSyntax.init), arena: arena).as(RawExtensionDeclSyntax.self)!
  }
  public var extensionKeyword: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withExtensionKeyword(_ extensionKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawExtensionDeclSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(extensionKeyword), arena: arena).as(RawExtensionDeclSyntax.self)!
  }
  public var unexpectedBetweenExtensionKeywordAndExtendedType: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenExtensionKeywordAndExtendedType(_ unexpectedBetweenExtensionKeywordAndExtendedType: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawExtensionDeclSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenExtensionKeywordAndExtendedType.map(RawSyntax.init), arena: arena).as(RawExtensionDeclSyntax.self)!
  }
  public var extendedType: RawTypeSyntax {
    layoutView.children[7].map(RawTypeSyntax.init(raw:))!
  }
  public func withExtendedType(_ extendedType: RawTypeSyntax, arena: SyntaxArena) -> RawExtensionDeclSyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(extendedType), arena: arena).as(RawExtensionDeclSyntax.self)!
  }
  public var unexpectedBetweenExtendedTypeAndInheritanceClause: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenExtendedTypeAndInheritanceClause(_ unexpectedBetweenExtendedTypeAndInheritanceClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawExtensionDeclSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenExtendedTypeAndInheritanceClause.map(RawSyntax.init), arena: arena).as(RawExtensionDeclSyntax.self)!
  }
  public var inheritanceClause: RawTypeInheritanceClauseSyntax? {
    layoutView.children[9].map(RawTypeInheritanceClauseSyntax.init(raw:))
  }
  public func withInheritanceClause(_ inheritanceClause: RawTypeInheritanceClauseSyntax?, arena: SyntaxArena) -> RawExtensionDeclSyntax {
    return layoutView.replacingChild(at: 9, with: inheritanceClause.map(RawSyntax.init), arena: arena).as(RawExtensionDeclSyntax.self)!
  }
  public var unexpectedBetweenInheritanceClauseAndGenericWhereClause: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenInheritanceClauseAndGenericWhereClause(_ unexpectedBetweenInheritanceClauseAndGenericWhereClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawExtensionDeclSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedBetweenInheritanceClauseAndGenericWhereClause.map(RawSyntax.init), arena: arena).as(RawExtensionDeclSyntax.self)!
  }
  public var genericWhereClause: RawGenericWhereClauseSyntax? {
    layoutView.children[11].map(RawGenericWhereClauseSyntax.init(raw:))
  }
  public func withGenericWhereClause(_ genericWhereClause: RawGenericWhereClauseSyntax?, arena: SyntaxArena) -> RawExtensionDeclSyntax {
    return layoutView.replacingChild(at: 11, with: genericWhereClause.map(RawSyntax.init), arena: arena).as(RawExtensionDeclSyntax.self)!
  }
  public var unexpectedBetweenGenericWhereClauseAndMembers: RawUnexpectedNodesSyntax? {
    layoutView.children[12].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenGenericWhereClauseAndMembers(_ unexpectedBetweenGenericWhereClauseAndMembers: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawExtensionDeclSyntax {
    return layoutView.replacingChild(at: 12, with: unexpectedBetweenGenericWhereClauseAndMembers.map(RawSyntax.init), arena: arena).as(RawExtensionDeclSyntax.self)!
  }
  public var members: RawMemberDeclBlockSyntax {
    layoutView.children[13].map(RawMemberDeclBlockSyntax.init(raw:))!
  }
  public func withMembers(_ members: RawMemberDeclBlockSyntax, arena: SyntaxArena) -> RawExtensionDeclSyntax {
    return layoutView.replacingChild(at: 13, with: RawSyntax(members), arena: arena).as(RawExtensionDeclSyntax.self)!
  }
  public var unexpectedAfterMembers: RawUnexpectedNodesSyntax? {
    layoutView.children[14].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterMembers(_ unexpectedAfterMembers: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawExtensionDeclSyntax {
    return layoutView.replacingChild(at: 14, with: unexpectedAfterMembers.map(RawSyntax.init), arena: arena).as(RawExtensionDeclSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawMemberDeclBlockSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = MemberDeclBlockSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .memberDeclBlock
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeLeftBrace: RawUnexpectedNodesSyntax? = nil,
    leftBrace: RawTokenSyntax,
    _ unexpectedBetweenLeftBraceAndMembers: RawUnexpectedNodesSyntax? = nil,
    members: RawMemberDeclListSyntax,
    _ unexpectedBetweenMembersAndRightBrace: RawUnexpectedNodesSyntax? = nil,
    rightBrace: RawTokenSyntax,
    _ unexpectedAfterRightBrace: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .memberDeclBlock, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeLeftBrace?.raw
      layout[1] = leftBrace.raw
      layout[2] = unexpectedBetweenLeftBraceAndMembers?.raw
      layout[3] = members.raw
      layout[4] = unexpectedBetweenMembersAndRightBrace?.raw
      layout[5] = rightBrace.raw
      layout[6] = unexpectedAfterRightBrace?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeLeftBrace: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeLeftBrace(_ unexpectedBeforeLeftBrace: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMemberDeclBlockSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeLeftBrace.map(RawSyntax.init), arena: arena).as(RawMemberDeclBlockSyntax.self)!
  }
  public var leftBrace: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeftBrace(_ leftBrace: RawTokenSyntax, arena: SyntaxArena) -> RawMemberDeclBlockSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(leftBrace), arena: arena).as(RawMemberDeclBlockSyntax.self)!
  }
  public var unexpectedBetweenLeftBraceAndMembers: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftBraceAndMembers(_ unexpectedBetweenLeftBraceAndMembers: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMemberDeclBlockSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenLeftBraceAndMembers.map(RawSyntax.init), arena: arena).as(RawMemberDeclBlockSyntax.self)!
  }
  public var members: RawMemberDeclListSyntax {
    layoutView.children[3].map(RawMemberDeclListSyntax.init(raw:))!
  }
  public func withMembers(_ members: RawMemberDeclListSyntax, arena: SyntaxArena) -> RawMemberDeclBlockSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(members), arena: arena).as(RawMemberDeclBlockSyntax.self)!
  }
  public var unexpectedBetweenMembersAndRightBrace: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenMembersAndRightBrace(_ unexpectedBetweenMembersAndRightBrace: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMemberDeclBlockSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenMembersAndRightBrace.map(RawSyntax.init), arena: arena).as(RawMemberDeclBlockSyntax.self)!
  }
  public var rightBrace: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withRightBrace(_ rightBrace: RawTokenSyntax, arena: SyntaxArena) -> RawMemberDeclBlockSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(rightBrace), arena: arena).as(RawMemberDeclBlockSyntax.self)!
  }
  public var unexpectedAfterRightBrace: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightBrace(_ unexpectedAfterRightBrace: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMemberDeclBlockSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterRightBrace.map(RawSyntax.init), arena: arena).as(RawMemberDeclBlockSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawMemberDeclListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = MemberDeclListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .memberDeclList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawMemberDeclListItemSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .memberDeclList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawMemberDeclListItemSyntax] {
    layoutView.children.map { RawMemberDeclListItemSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawMemberDeclListItemSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = MemberDeclListItemSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .memberDeclListItem
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeDecl: RawUnexpectedNodesSyntax? = nil,
    decl: RawDeclSyntax,
    _ unexpectedBetweenDeclAndSemicolon: RawUnexpectedNodesSyntax? = nil,
    semicolon: RawTokenSyntax?,
    _ unexpectedAfterSemicolon: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .memberDeclListItem, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeDecl?.raw
      layout[1] = decl.raw
      layout[2] = unexpectedBetweenDeclAndSemicolon?.raw
      layout[3] = semicolon?.raw
      layout[4] = unexpectedAfterSemicolon?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeDecl: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeDecl(_ unexpectedBeforeDecl: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMemberDeclListItemSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeDecl.map(RawSyntax.init), arena: arena).as(RawMemberDeclListItemSyntax.self)!
  }
  public var decl: RawDeclSyntax {
    layoutView.children[1].map(RawDeclSyntax.init(raw:))!
  }
  public func withDecl(_ decl: RawDeclSyntax, arena: SyntaxArena) -> RawMemberDeclListItemSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(decl), arena: arena).as(RawMemberDeclListItemSyntax.self)!
  }
  public var unexpectedBetweenDeclAndSemicolon: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenDeclAndSemicolon(_ unexpectedBetweenDeclAndSemicolon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMemberDeclListItemSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenDeclAndSemicolon.map(RawSyntax.init), arena: arena).as(RawMemberDeclListItemSyntax.self)!
  }
  public var semicolon: RawTokenSyntax? {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))
  }
  public func withSemicolon(_ semicolon: RawTokenSyntax?, arena: SyntaxArena) -> RawMemberDeclListItemSyntax {
    return layoutView.replacingChild(at: 3, with: semicolon.map(RawSyntax.init), arena: arena).as(RawMemberDeclListItemSyntax.self)!
  }
  public var unexpectedAfterSemicolon: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterSemicolon(_ unexpectedAfterSemicolon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMemberDeclListItemSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterSemicolon.map(RawSyntax.init), arena: arena).as(RawMemberDeclListItemSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawSourceFileSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = SourceFileSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .sourceFile
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeStatements: RawUnexpectedNodesSyntax? = nil,
    statements: RawCodeBlockItemListSyntax,
    _ unexpectedBetweenStatementsAndEOFToken: RawUnexpectedNodesSyntax? = nil,
    eofToken: RawTokenSyntax,
    _ unexpectedAfterEOFToken: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .sourceFile, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeStatements?.raw
      layout[1] = statements.raw
      layout[2] = unexpectedBetweenStatementsAndEOFToken?.raw
      layout[3] = eofToken.raw
      layout[4] = unexpectedAfterEOFToken?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeStatements: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeStatements(_ unexpectedBeforeStatements: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSourceFileSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeStatements.map(RawSyntax.init), arena: arena).as(RawSourceFileSyntax.self)!
  }
  public var statements: RawCodeBlockItemListSyntax {
    layoutView.children[1].map(RawCodeBlockItemListSyntax.init(raw:))!
  }
  public func withStatements(_ statements: RawCodeBlockItemListSyntax, arena: SyntaxArena) -> RawSourceFileSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(statements), arena: arena).as(RawSourceFileSyntax.self)!
  }
  public var unexpectedBetweenStatementsAndEOFToken: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenStatementsAndEOFToken(_ unexpectedBetweenStatementsAndEOFToken: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSourceFileSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenStatementsAndEOFToken.map(RawSyntax.init), arena: arena).as(RawSourceFileSyntax.self)!
  }
  public var eofToken: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withEOFToken(_ eofToken: RawTokenSyntax, arena: SyntaxArena) -> RawSourceFileSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(eofToken), arena: arena).as(RawSourceFileSyntax.self)!
  }
  public var unexpectedAfterEOFToken: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterEOFToken(_ unexpectedAfterEOFToken: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSourceFileSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterEOFToken.map(RawSyntax.init), arena: arena).as(RawSourceFileSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawInitializerClauseSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = InitializerClauseSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .initializerClause
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeEqual: RawUnexpectedNodesSyntax? = nil,
    equal: RawTokenSyntax,
    _ unexpectedBetweenEqualAndValue: RawUnexpectedNodesSyntax? = nil,
    value: RawExprSyntax,
    _ unexpectedAfterValue: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .initializerClause, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeEqual?.raw
      layout[1] = equal.raw
      layout[2] = unexpectedBetweenEqualAndValue?.raw
      layout[3] = value.raw
      layout[4] = unexpectedAfterValue?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeEqual: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeEqual(_ unexpectedBeforeEqual: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawInitializerClauseSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeEqual.map(RawSyntax.init), arena: arena).as(RawInitializerClauseSyntax.self)!
  }
  public var equal: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withEqual(_ equal: RawTokenSyntax, arena: SyntaxArena) -> RawInitializerClauseSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(equal), arena: arena).as(RawInitializerClauseSyntax.self)!
  }
  public var unexpectedBetweenEqualAndValue: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenEqualAndValue(_ unexpectedBetweenEqualAndValue: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawInitializerClauseSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenEqualAndValue.map(RawSyntax.init), arena: arena).as(RawInitializerClauseSyntax.self)!
  }
  public var value: RawExprSyntax {
    layoutView.children[3].map(RawExprSyntax.init(raw:))!
  }
  public func withValue(_ value: RawExprSyntax, arena: SyntaxArena) -> RawInitializerClauseSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(value), arena: arena).as(RawInitializerClauseSyntax.self)!
  }
  public var unexpectedAfterValue: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterValue(_ unexpectedAfterValue: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawInitializerClauseSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterValue.map(RawSyntax.init), arena: arena).as(RawInitializerClauseSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawFunctionParameterSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = FunctionParameterSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .functionParameter
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? = nil,
    attributes: RawAttributeListSyntax?,
    _ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? = nil,
    modifiers: RawModifierListSyntax?,
    _ unexpectedBetweenModifiersAndFirstName: RawUnexpectedNodesSyntax? = nil,
    firstName: RawTokenSyntax?,
    _ unexpectedBetweenFirstNameAndSecondName: RawUnexpectedNodesSyntax? = nil,
    secondName: RawTokenSyntax?,
    _ unexpectedBetweenSecondNameAndColon: RawUnexpectedNodesSyntax? = nil,
    colon: RawTokenSyntax?,
    _ unexpectedBetweenColonAndType: RawUnexpectedNodesSyntax? = nil,
    type: RawTypeSyntax?,
    _ unexpectedBetweenTypeAndEllipsis: RawUnexpectedNodesSyntax? = nil,
    ellipsis: RawTokenSyntax?,
    _ unexpectedBetweenEllipsisAndDefaultArgument: RawUnexpectedNodesSyntax? = nil,
    defaultArgument: RawInitializerClauseSyntax?,
    _ unexpectedBetweenDefaultArgumentAndTrailingComma: RawUnexpectedNodesSyntax? = nil,
    trailingComma: RawTokenSyntax?,
    _ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .functionParameter, uninitializedCount: 19, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeAttributes?.raw
      layout[1] = attributes?.raw
      layout[2] = unexpectedBetweenAttributesAndModifiers?.raw
      layout[3] = modifiers?.raw
      layout[4] = unexpectedBetweenModifiersAndFirstName?.raw
      layout[5] = firstName?.raw
      layout[6] = unexpectedBetweenFirstNameAndSecondName?.raw
      layout[7] = secondName?.raw
      layout[8] = unexpectedBetweenSecondNameAndColon?.raw
      layout[9] = colon?.raw
      layout[10] = unexpectedBetweenColonAndType?.raw
      layout[11] = type?.raw
      layout[12] = unexpectedBetweenTypeAndEllipsis?.raw
      layout[13] = ellipsis?.raw
      layout[14] = unexpectedBetweenEllipsisAndDefaultArgument?.raw
      layout[15] = defaultArgument?.raw
      layout[16] = unexpectedBetweenDefaultArgumentAndTrailingComma?.raw
      layout[17] = trailingComma?.raw
      layout[18] = unexpectedAfterTrailingComma?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeAttributes(_ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionParameterSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeAttributes.map(RawSyntax.init), arena: arena).as(RawFunctionParameterSyntax.self)!
  }
  public var attributes: RawAttributeListSyntax? {
    layoutView.children[1].map(RawAttributeListSyntax.init(raw:))
  }
  public func withAttributes(_ attributes: RawAttributeListSyntax?, arena: SyntaxArena) -> RawFunctionParameterSyntax {
    return layoutView.replacingChild(at: 1, with: attributes.map(RawSyntax.init), arena: arena).as(RawFunctionParameterSyntax.self)!
  }
  public var unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAttributesAndModifiers(_ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionParameterSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenAttributesAndModifiers.map(RawSyntax.init), arena: arena).as(RawFunctionParameterSyntax.self)!
  }
  public var modifiers: RawModifierListSyntax? {
    layoutView.children[3].map(RawModifierListSyntax.init(raw:))
  }
  public func withModifiers(_ modifiers: RawModifierListSyntax?, arena: SyntaxArena) -> RawFunctionParameterSyntax {
    return layoutView.replacingChild(at: 3, with: modifiers.map(RawSyntax.init), arena: arena).as(RawFunctionParameterSyntax.self)!
  }
  public var unexpectedBetweenModifiersAndFirstName: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenModifiersAndFirstName(_ unexpectedBetweenModifiersAndFirstName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionParameterSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenModifiersAndFirstName.map(RawSyntax.init), arena: arena).as(RawFunctionParameterSyntax.self)!
  }
  public var firstName: RawTokenSyntax? {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))
  }
  public func withFirstName(_ firstName: RawTokenSyntax?, arena: SyntaxArena) -> RawFunctionParameterSyntax {
    return layoutView.replacingChild(at: 5, with: firstName.map(RawSyntax.init), arena: arena).as(RawFunctionParameterSyntax.self)!
  }
  public var unexpectedBetweenFirstNameAndSecondName: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenFirstNameAndSecondName(_ unexpectedBetweenFirstNameAndSecondName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionParameterSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenFirstNameAndSecondName.map(RawSyntax.init), arena: arena).as(RawFunctionParameterSyntax.self)!
  }
  public var secondName: RawTokenSyntax? {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))
  }
  public func withSecondName(_ secondName: RawTokenSyntax?, arena: SyntaxArena) -> RawFunctionParameterSyntax {
    return layoutView.replacingChild(at: 7, with: secondName.map(RawSyntax.init), arena: arena).as(RawFunctionParameterSyntax.self)!
  }
  public var unexpectedBetweenSecondNameAndColon: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenSecondNameAndColon(_ unexpectedBetweenSecondNameAndColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionParameterSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenSecondNameAndColon.map(RawSyntax.init), arena: arena).as(RawFunctionParameterSyntax.self)!
  }
  public var colon: RawTokenSyntax? {
    layoutView.children[9].map(RawTokenSyntax.init(raw:))
  }
  public func withColon(_ colon: RawTokenSyntax?, arena: SyntaxArena) -> RawFunctionParameterSyntax {
    return layoutView.replacingChild(at: 9, with: colon.map(RawSyntax.init), arena: arena).as(RawFunctionParameterSyntax.self)!
  }
  public var unexpectedBetweenColonAndType: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenColonAndType(_ unexpectedBetweenColonAndType: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionParameterSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedBetweenColonAndType.map(RawSyntax.init), arena: arena).as(RawFunctionParameterSyntax.self)!
  }
  public var type: RawTypeSyntax? {
    layoutView.children[11].map(RawTypeSyntax.init(raw:))
  }
  public func withType(_ type: RawTypeSyntax?, arena: SyntaxArena) -> RawFunctionParameterSyntax {
    return layoutView.replacingChild(at: 11, with: type.map(RawSyntax.init), arena: arena).as(RawFunctionParameterSyntax.self)!
  }
  public var unexpectedBetweenTypeAndEllipsis: RawUnexpectedNodesSyntax? {
    layoutView.children[12].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenTypeAndEllipsis(_ unexpectedBetweenTypeAndEllipsis: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionParameterSyntax {
    return layoutView.replacingChild(at: 12, with: unexpectedBetweenTypeAndEllipsis.map(RawSyntax.init), arena: arena).as(RawFunctionParameterSyntax.self)!
  }
  public var ellipsis: RawTokenSyntax? {
    layoutView.children[13].map(RawTokenSyntax.init(raw:))
  }
  public func withEllipsis(_ ellipsis: RawTokenSyntax?, arena: SyntaxArena) -> RawFunctionParameterSyntax {
    return layoutView.replacingChild(at: 13, with: ellipsis.map(RawSyntax.init), arena: arena).as(RawFunctionParameterSyntax.self)!
  }
  public var unexpectedBetweenEllipsisAndDefaultArgument: RawUnexpectedNodesSyntax? {
    layoutView.children[14].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenEllipsisAndDefaultArgument(_ unexpectedBetweenEllipsisAndDefaultArgument: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionParameterSyntax {
    return layoutView.replacingChild(at: 14, with: unexpectedBetweenEllipsisAndDefaultArgument.map(RawSyntax.init), arena: arena).as(RawFunctionParameterSyntax.self)!
  }
  public var defaultArgument: RawInitializerClauseSyntax? {
    layoutView.children[15].map(RawInitializerClauseSyntax.init(raw:))
  }
  public func withDefaultArgument(_ defaultArgument: RawInitializerClauseSyntax?, arena: SyntaxArena) -> RawFunctionParameterSyntax {
    return layoutView.replacingChild(at: 15, with: defaultArgument.map(RawSyntax.init), arena: arena).as(RawFunctionParameterSyntax.self)!
  }
  public var unexpectedBetweenDefaultArgumentAndTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[16].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenDefaultArgumentAndTrailingComma(_ unexpectedBetweenDefaultArgumentAndTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionParameterSyntax {
    return layoutView.replacingChild(at: 16, with: unexpectedBetweenDefaultArgumentAndTrailingComma.map(RawSyntax.init), arena: arena).as(RawFunctionParameterSyntax.self)!
  }
  public var trailingComma: RawTokenSyntax? {
    layoutView.children[17].map(RawTokenSyntax.init(raw:))
  }
  public func withTrailingComma(_ trailingComma: RawTokenSyntax?, arena: SyntaxArena) -> RawFunctionParameterSyntax {
    return layoutView.replacingChild(at: 17, with: trailingComma.map(RawSyntax.init), arena: arena).as(RawFunctionParameterSyntax.self)!
  }
  public var unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[18].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterTrailingComma(_ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionParameterSyntax {
    return layoutView.replacingChild(at: 18, with: unexpectedAfterTrailingComma.map(RawSyntax.init), arena: arena).as(RawFunctionParameterSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawModifierListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ModifierListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .modifierList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawDeclModifierSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .modifierList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawDeclModifierSyntax] {
    layoutView.children.map { RawDeclModifierSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawFunctionDeclSyntax: RawDeclSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = FunctionDeclSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .functionDecl
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? = nil,
    attributes: RawAttributeListSyntax?,
    _ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? = nil,
    modifiers: RawModifierListSyntax?,
    _ unexpectedBetweenModifiersAndFuncKeyword: RawUnexpectedNodesSyntax? = nil,
    funcKeyword: RawTokenSyntax,
    _ unexpectedBetweenFuncKeywordAndIdentifier: RawUnexpectedNodesSyntax? = nil,
    identifier: RawTokenSyntax,
    _ unexpectedBetweenIdentifierAndGenericParameterClause: RawUnexpectedNodesSyntax? = nil,
    genericParameterClause: RawGenericParameterClauseSyntax?,
    _ unexpectedBetweenGenericParameterClauseAndSignature: RawUnexpectedNodesSyntax? = nil,
    signature: RawFunctionSignatureSyntax,
    _ unexpectedBetweenSignatureAndGenericWhereClause: RawUnexpectedNodesSyntax? = nil,
    genericWhereClause: RawGenericWhereClauseSyntax?,
    _ unexpectedBetweenGenericWhereClauseAndBody: RawUnexpectedNodesSyntax? = nil,
    body: RawCodeBlockSyntax?,
    _ unexpectedAfterBody: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .functionDecl, uninitializedCount: 17, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeAttributes?.raw
      layout[1] = attributes?.raw
      layout[2] = unexpectedBetweenAttributesAndModifiers?.raw
      layout[3] = modifiers?.raw
      layout[4] = unexpectedBetweenModifiersAndFuncKeyword?.raw
      layout[5] = funcKeyword.raw
      layout[6] = unexpectedBetweenFuncKeywordAndIdentifier?.raw
      layout[7] = identifier.raw
      layout[8] = unexpectedBetweenIdentifierAndGenericParameterClause?.raw
      layout[9] = genericParameterClause?.raw
      layout[10] = unexpectedBetweenGenericParameterClauseAndSignature?.raw
      layout[11] = signature.raw
      layout[12] = unexpectedBetweenSignatureAndGenericWhereClause?.raw
      layout[13] = genericWhereClause?.raw
      layout[14] = unexpectedBetweenGenericWhereClauseAndBody?.raw
      layout[15] = body?.raw
      layout[16] = unexpectedAfterBody?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeAttributes(_ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionDeclSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeAttributes.map(RawSyntax.init), arena: arena).as(RawFunctionDeclSyntax.self)!
  }
  public var attributes: RawAttributeListSyntax? {
    layoutView.children[1].map(RawAttributeListSyntax.init(raw:))
  }
  public func withAttributes(_ attributes: RawAttributeListSyntax?, arena: SyntaxArena) -> RawFunctionDeclSyntax {
    return layoutView.replacingChild(at: 1, with: attributes.map(RawSyntax.init), arena: arena).as(RawFunctionDeclSyntax.self)!
  }
  public var unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAttributesAndModifiers(_ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionDeclSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenAttributesAndModifiers.map(RawSyntax.init), arena: arena).as(RawFunctionDeclSyntax.self)!
  }
  public var modifiers: RawModifierListSyntax? {
    layoutView.children[3].map(RawModifierListSyntax.init(raw:))
  }
  public func withModifiers(_ modifiers: RawModifierListSyntax?, arena: SyntaxArena) -> RawFunctionDeclSyntax {
    return layoutView.replacingChild(at: 3, with: modifiers.map(RawSyntax.init), arena: arena).as(RawFunctionDeclSyntax.self)!
  }
  public var unexpectedBetweenModifiersAndFuncKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenModifiersAndFuncKeyword(_ unexpectedBetweenModifiersAndFuncKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionDeclSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenModifiersAndFuncKeyword.map(RawSyntax.init), arena: arena).as(RawFunctionDeclSyntax.self)!
  }
  public var funcKeyword: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withFuncKeyword(_ funcKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawFunctionDeclSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(funcKeyword), arena: arena).as(RawFunctionDeclSyntax.self)!
  }
  public var unexpectedBetweenFuncKeywordAndIdentifier: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenFuncKeywordAndIdentifier(_ unexpectedBetweenFuncKeywordAndIdentifier: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionDeclSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenFuncKeywordAndIdentifier.map(RawSyntax.init), arena: arena).as(RawFunctionDeclSyntax.self)!
  }
  public var identifier: RawTokenSyntax {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))!
  }
  public func withIdentifier(_ identifier: RawTokenSyntax, arena: SyntaxArena) -> RawFunctionDeclSyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(identifier), arena: arena).as(RawFunctionDeclSyntax.self)!
  }
  public var unexpectedBetweenIdentifierAndGenericParameterClause: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenIdentifierAndGenericParameterClause(_ unexpectedBetweenIdentifierAndGenericParameterClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionDeclSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenIdentifierAndGenericParameterClause.map(RawSyntax.init), arena: arena).as(RawFunctionDeclSyntax.self)!
  }
  public var genericParameterClause: RawGenericParameterClauseSyntax? {
    layoutView.children[9].map(RawGenericParameterClauseSyntax.init(raw:))
  }
  public func withGenericParameterClause(_ genericParameterClause: RawGenericParameterClauseSyntax?, arena: SyntaxArena) -> RawFunctionDeclSyntax {
    return layoutView.replacingChild(at: 9, with: genericParameterClause.map(RawSyntax.init), arena: arena).as(RawFunctionDeclSyntax.self)!
  }
  public var unexpectedBetweenGenericParameterClauseAndSignature: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenGenericParameterClauseAndSignature(_ unexpectedBetweenGenericParameterClauseAndSignature: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionDeclSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedBetweenGenericParameterClauseAndSignature.map(RawSyntax.init), arena: arena).as(RawFunctionDeclSyntax.self)!
  }
  public var signature: RawFunctionSignatureSyntax {
    layoutView.children[11].map(RawFunctionSignatureSyntax.init(raw:))!
  }
  public func withSignature(_ signature: RawFunctionSignatureSyntax, arena: SyntaxArena) -> RawFunctionDeclSyntax {
    return layoutView.replacingChild(at: 11, with: RawSyntax(signature), arena: arena).as(RawFunctionDeclSyntax.self)!
  }
  public var unexpectedBetweenSignatureAndGenericWhereClause: RawUnexpectedNodesSyntax? {
    layoutView.children[12].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenSignatureAndGenericWhereClause(_ unexpectedBetweenSignatureAndGenericWhereClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionDeclSyntax {
    return layoutView.replacingChild(at: 12, with: unexpectedBetweenSignatureAndGenericWhereClause.map(RawSyntax.init), arena: arena).as(RawFunctionDeclSyntax.self)!
  }
  public var genericWhereClause: RawGenericWhereClauseSyntax? {
    layoutView.children[13].map(RawGenericWhereClauseSyntax.init(raw:))
  }
  public func withGenericWhereClause(_ genericWhereClause: RawGenericWhereClauseSyntax?, arena: SyntaxArena) -> RawFunctionDeclSyntax {
    return layoutView.replacingChild(at: 13, with: genericWhereClause.map(RawSyntax.init), arena: arena).as(RawFunctionDeclSyntax.self)!
  }
  public var unexpectedBetweenGenericWhereClauseAndBody: RawUnexpectedNodesSyntax? {
    layoutView.children[14].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenGenericWhereClauseAndBody(_ unexpectedBetweenGenericWhereClauseAndBody: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionDeclSyntax {
    return layoutView.replacingChild(at: 14, with: unexpectedBetweenGenericWhereClauseAndBody.map(RawSyntax.init), arena: arena).as(RawFunctionDeclSyntax.self)!
  }
  public var body: RawCodeBlockSyntax? {
    layoutView.children[15].map(RawCodeBlockSyntax.init(raw:))
  }
  public func withBody(_ body: RawCodeBlockSyntax?, arena: SyntaxArena) -> RawFunctionDeclSyntax {
    return layoutView.replacingChild(at: 15, with: body.map(RawSyntax.init), arena: arena).as(RawFunctionDeclSyntax.self)!
  }
  public var unexpectedAfterBody: RawUnexpectedNodesSyntax? {
    layoutView.children[16].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterBody(_ unexpectedAfterBody: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionDeclSyntax {
    return layoutView.replacingChild(at: 16, with: unexpectedAfterBody.map(RawSyntax.init), arena: arena).as(RawFunctionDeclSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawInitializerDeclSyntax: RawDeclSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = InitializerDeclSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .initializerDecl
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? = nil,
    attributes: RawAttributeListSyntax?,
    _ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? = nil,
    modifiers: RawModifierListSyntax?,
    _ unexpectedBetweenModifiersAndInitKeyword: RawUnexpectedNodesSyntax? = nil,
    initKeyword: RawTokenSyntax,
    _ unexpectedBetweenInitKeywordAndOptionalMark: RawUnexpectedNodesSyntax? = nil,
    optionalMark: RawTokenSyntax?,
    _ unexpectedBetweenOptionalMarkAndGenericParameterClause: RawUnexpectedNodesSyntax? = nil,
    genericParameterClause: RawGenericParameterClauseSyntax?,
    _ unexpectedBetweenGenericParameterClauseAndSignature: RawUnexpectedNodesSyntax? = nil,
    signature: RawFunctionSignatureSyntax,
    _ unexpectedBetweenSignatureAndGenericWhereClause: RawUnexpectedNodesSyntax? = nil,
    genericWhereClause: RawGenericWhereClauseSyntax?,
    _ unexpectedBetweenGenericWhereClauseAndBody: RawUnexpectedNodesSyntax? = nil,
    body: RawCodeBlockSyntax?,
    _ unexpectedAfterBody: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .initializerDecl, uninitializedCount: 17, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeAttributes?.raw
      layout[1] = attributes?.raw
      layout[2] = unexpectedBetweenAttributesAndModifiers?.raw
      layout[3] = modifiers?.raw
      layout[4] = unexpectedBetweenModifiersAndInitKeyword?.raw
      layout[5] = initKeyword.raw
      layout[6] = unexpectedBetweenInitKeywordAndOptionalMark?.raw
      layout[7] = optionalMark?.raw
      layout[8] = unexpectedBetweenOptionalMarkAndGenericParameterClause?.raw
      layout[9] = genericParameterClause?.raw
      layout[10] = unexpectedBetweenGenericParameterClauseAndSignature?.raw
      layout[11] = signature.raw
      layout[12] = unexpectedBetweenSignatureAndGenericWhereClause?.raw
      layout[13] = genericWhereClause?.raw
      layout[14] = unexpectedBetweenGenericWhereClauseAndBody?.raw
      layout[15] = body?.raw
      layout[16] = unexpectedAfterBody?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeAttributes(_ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawInitializerDeclSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeAttributes.map(RawSyntax.init), arena: arena).as(RawInitializerDeclSyntax.self)!
  }
  public var attributes: RawAttributeListSyntax? {
    layoutView.children[1].map(RawAttributeListSyntax.init(raw:))
  }
  public func withAttributes(_ attributes: RawAttributeListSyntax?, arena: SyntaxArena) -> RawInitializerDeclSyntax {
    return layoutView.replacingChild(at: 1, with: attributes.map(RawSyntax.init), arena: arena).as(RawInitializerDeclSyntax.self)!
  }
  public var unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAttributesAndModifiers(_ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawInitializerDeclSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenAttributesAndModifiers.map(RawSyntax.init), arena: arena).as(RawInitializerDeclSyntax.self)!
  }
  public var modifiers: RawModifierListSyntax? {
    layoutView.children[3].map(RawModifierListSyntax.init(raw:))
  }
  public func withModifiers(_ modifiers: RawModifierListSyntax?, arena: SyntaxArena) -> RawInitializerDeclSyntax {
    return layoutView.replacingChild(at: 3, with: modifiers.map(RawSyntax.init), arena: arena).as(RawInitializerDeclSyntax.self)!
  }
  public var unexpectedBetweenModifiersAndInitKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenModifiersAndInitKeyword(_ unexpectedBetweenModifiersAndInitKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawInitializerDeclSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenModifiersAndInitKeyword.map(RawSyntax.init), arena: arena).as(RawInitializerDeclSyntax.self)!
  }
  public var initKeyword: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withInitKeyword(_ initKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawInitializerDeclSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(initKeyword), arena: arena).as(RawInitializerDeclSyntax.self)!
  }
  public var unexpectedBetweenInitKeywordAndOptionalMark: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenInitKeywordAndOptionalMark(_ unexpectedBetweenInitKeywordAndOptionalMark: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawInitializerDeclSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenInitKeywordAndOptionalMark.map(RawSyntax.init), arena: arena).as(RawInitializerDeclSyntax.self)!
  }
  public var optionalMark: RawTokenSyntax? {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))
  }
  public func withOptionalMark(_ optionalMark: RawTokenSyntax?, arena: SyntaxArena) -> RawInitializerDeclSyntax {
    return layoutView.replacingChild(at: 7, with: optionalMark.map(RawSyntax.init), arena: arena).as(RawInitializerDeclSyntax.self)!
  }
  public var unexpectedBetweenOptionalMarkAndGenericParameterClause: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenOptionalMarkAndGenericParameterClause(_ unexpectedBetweenOptionalMarkAndGenericParameterClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawInitializerDeclSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenOptionalMarkAndGenericParameterClause.map(RawSyntax.init), arena: arena).as(RawInitializerDeclSyntax.self)!
  }
  public var genericParameterClause: RawGenericParameterClauseSyntax? {
    layoutView.children[9].map(RawGenericParameterClauseSyntax.init(raw:))
  }
  public func withGenericParameterClause(_ genericParameterClause: RawGenericParameterClauseSyntax?, arena: SyntaxArena) -> RawInitializerDeclSyntax {
    return layoutView.replacingChild(at: 9, with: genericParameterClause.map(RawSyntax.init), arena: arena).as(RawInitializerDeclSyntax.self)!
  }
  public var unexpectedBetweenGenericParameterClauseAndSignature: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenGenericParameterClauseAndSignature(_ unexpectedBetweenGenericParameterClauseAndSignature: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawInitializerDeclSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedBetweenGenericParameterClauseAndSignature.map(RawSyntax.init), arena: arena).as(RawInitializerDeclSyntax.self)!
  }
  public var signature: RawFunctionSignatureSyntax {
    layoutView.children[11].map(RawFunctionSignatureSyntax.init(raw:))!
  }
  public func withSignature(_ signature: RawFunctionSignatureSyntax, arena: SyntaxArena) -> RawInitializerDeclSyntax {
    return layoutView.replacingChild(at: 11, with: RawSyntax(signature), arena: arena).as(RawInitializerDeclSyntax.self)!
  }
  public var unexpectedBetweenSignatureAndGenericWhereClause: RawUnexpectedNodesSyntax? {
    layoutView.children[12].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenSignatureAndGenericWhereClause(_ unexpectedBetweenSignatureAndGenericWhereClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawInitializerDeclSyntax {
    return layoutView.replacingChild(at: 12, with: unexpectedBetweenSignatureAndGenericWhereClause.map(RawSyntax.init), arena: arena).as(RawInitializerDeclSyntax.self)!
  }
  public var genericWhereClause: RawGenericWhereClauseSyntax? {
    layoutView.children[13].map(RawGenericWhereClauseSyntax.init(raw:))
  }
  public func withGenericWhereClause(_ genericWhereClause: RawGenericWhereClauseSyntax?, arena: SyntaxArena) -> RawInitializerDeclSyntax {
    return layoutView.replacingChild(at: 13, with: genericWhereClause.map(RawSyntax.init), arena: arena).as(RawInitializerDeclSyntax.self)!
  }
  public var unexpectedBetweenGenericWhereClauseAndBody: RawUnexpectedNodesSyntax? {
    layoutView.children[14].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenGenericWhereClauseAndBody(_ unexpectedBetweenGenericWhereClauseAndBody: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawInitializerDeclSyntax {
    return layoutView.replacingChild(at: 14, with: unexpectedBetweenGenericWhereClauseAndBody.map(RawSyntax.init), arena: arena).as(RawInitializerDeclSyntax.self)!
  }
  public var body: RawCodeBlockSyntax? {
    layoutView.children[15].map(RawCodeBlockSyntax.init(raw:))
  }
  public func withBody(_ body: RawCodeBlockSyntax?, arena: SyntaxArena) -> RawInitializerDeclSyntax {
    return layoutView.replacingChild(at: 15, with: body.map(RawSyntax.init), arena: arena).as(RawInitializerDeclSyntax.self)!
  }
  public var unexpectedAfterBody: RawUnexpectedNodesSyntax? {
    layoutView.children[16].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterBody(_ unexpectedAfterBody: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawInitializerDeclSyntax {
    return layoutView.replacingChild(at: 16, with: unexpectedAfterBody.map(RawSyntax.init), arena: arena).as(RawInitializerDeclSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawDeinitializerDeclSyntax: RawDeclSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = DeinitializerDeclSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .deinitializerDecl
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? = nil,
    attributes: RawAttributeListSyntax?,
    _ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? = nil,
    modifiers: RawModifierListSyntax?,
    _ unexpectedBetweenModifiersAndDeinitKeyword: RawUnexpectedNodesSyntax? = nil,
    deinitKeyword: RawTokenSyntax,
    _ unexpectedBetweenDeinitKeywordAndBody: RawUnexpectedNodesSyntax? = nil,
    body: RawCodeBlockSyntax?,
    _ unexpectedAfterBody: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .deinitializerDecl, uninitializedCount: 9, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeAttributes?.raw
      layout[1] = attributes?.raw
      layout[2] = unexpectedBetweenAttributesAndModifiers?.raw
      layout[3] = modifiers?.raw
      layout[4] = unexpectedBetweenModifiersAndDeinitKeyword?.raw
      layout[5] = deinitKeyword.raw
      layout[6] = unexpectedBetweenDeinitKeywordAndBody?.raw
      layout[7] = body?.raw
      layout[8] = unexpectedAfterBody?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeAttributes(_ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDeinitializerDeclSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeAttributes.map(RawSyntax.init), arena: arena).as(RawDeinitializerDeclSyntax.self)!
  }
  public var attributes: RawAttributeListSyntax? {
    layoutView.children[1].map(RawAttributeListSyntax.init(raw:))
  }
  public func withAttributes(_ attributes: RawAttributeListSyntax?, arena: SyntaxArena) -> RawDeinitializerDeclSyntax {
    return layoutView.replacingChild(at: 1, with: attributes.map(RawSyntax.init), arena: arena).as(RawDeinitializerDeclSyntax.self)!
  }
  public var unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAttributesAndModifiers(_ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDeinitializerDeclSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenAttributesAndModifiers.map(RawSyntax.init), arena: arena).as(RawDeinitializerDeclSyntax.self)!
  }
  public var modifiers: RawModifierListSyntax? {
    layoutView.children[3].map(RawModifierListSyntax.init(raw:))
  }
  public func withModifiers(_ modifiers: RawModifierListSyntax?, arena: SyntaxArena) -> RawDeinitializerDeclSyntax {
    return layoutView.replacingChild(at: 3, with: modifiers.map(RawSyntax.init), arena: arena).as(RawDeinitializerDeclSyntax.self)!
  }
  public var unexpectedBetweenModifiersAndDeinitKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenModifiersAndDeinitKeyword(_ unexpectedBetweenModifiersAndDeinitKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDeinitializerDeclSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenModifiersAndDeinitKeyword.map(RawSyntax.init), arena: arena).as(RawDeinitializerDeclSyntax.self)!
  }
  public var deinitKeyword: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withDeinitKeyword(_ deinitKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawDeinitializerDeclSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(deinitKeyword), arena: arena).as(RawDeinitializerDeclSyntax.self)!
  }
  public var unexpectedBetweenDeinitKeywordAndBody: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenDeinitKeywordAndBody(_ unexpectedBetweenDeinitKeywordAndBody: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDeinitializerDeclSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenDeinitKeywordAndBody.map(RawSyntax.init), arena: arena).as(RawDeinitializerDeclSyntax.self)!
  }
  public var body: RawCodeBlockSyntax? {
    layoutView.children[7].map(RawCodeBlockSyntax.init(raw:))
  }
  public func withBody(_ body: RawCodeBlockSyntax?, arena: SyntaxArena) -> RawDeinitializerDeclSyntax {
    return layoutView.replacingChild(at: 7, with: body.map(RawSyntax.init), arena: arena).as(RawDeinitializerDeclSyntax.self)!
  }
  public var unexpectedAfterBody: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterBody(_ unexpectedAfterBody: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDeinitializerDeclSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedAfterBody.map(RawSyntax.init), arena: arena).as(RawDeinitializerDeclSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawSubscriptDeclSyntax: RawDeclSyntaxNodeProtocol, RawSyntaxToSyntax {
  public enum Accessor: RawSyntaxNodeProtocol {
    case `accessors`(RawAccessorBlockSyntax)
    case `getter`(RawCodeBlockSyntax)

    public static func isKindOf(_ raw: RawSyntax) -> Bool {
      return RawAccessorBlockSyntax.isKindOf(raw) || RawCodeBlockSyntax.isKindOf(raw)
    }

    public var raw: RawSyntax {
      switch self {
      case .accessors(let node): return node.raw
      case .getter(let node): return node.raw
      }
    }

    public init?<T>(_ other: T) where T : RawSyntaxNodeProtocol {
      if let node = RawAccessorBlockSyntax(other) {
        self = .accessors(node)
        return
      }
      if let node = RawCodeBlockSyntax(other) {
        self = .getter(node)
        return
      }
      return nil
    }
  }

  public typealias SyntaxType = SubscriptDeclSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .subscriptDecl
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? = nil,
    attributes: RawAttributeListSyntax?,
    _ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? = nil,
    modifiers: RawModifierListSyntax?,
    _ unexpectedBetweenModifiersAndSubscriptKeyword: RawUnexpectedNodesSyntax? = nil,
    subscriptKeyword: RawTokenSyntax,
    _ unexpectedBetweenSubscriptKeywordAndGenericParameterClause: RawUnexpectedNodesSyntax? = nil,
    genericParameterClause: RawGenericParameterClauseSyntax?,
    _ unexpectedBetweenGenericParameterClauseAndIndices: RawUnexpectedNodesSyntax? = nil,
    indices: RawParameterClauseSyntax,
    _ unexpectedBetweenIndicesAndResult: RawUnexpectedNodesSyntax? = nil,
    result: RawReturnClauseSyntax,
    _ unexpectedBetweenResultAndGenericWhereClause: RawUnexpectedNodesSyntax? = nil,
    genericWhereClause: RawGenericWhereClauseSyntax?,
    _ unexpectedBetweenGenericWhereClauseAndAccessor: RawUnexpectedNodesSyntax? = nil,
    accessor: Accessor?,
    _ unexpectedAfterAccessor: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .subscriptDecl, uninitializedCount: 17, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeAttributes?.raw
      layout[1] = attributes?.raw
      layout[2] = unexpectedBetweenAttributesAndModifiers?.raw
      layout[3] = modifiers?.raw
      layout[4] = unexpectedBetweenModifiersAndSubscriptKeyword?.raw
      layout[5] = subscriptKeyword.raw
      layout[6] = unexpectedBetweenSubscriptKeywordAndGenericParameterClause?.raw
      layout[7] = genericParameterClause?.raw
      layout[8] = unexpectedBetweenGenericParameterClauseAndIndices?.raw
      layout[9] = indices.raw
      layout[10] = unexpectedBetweenIndicesAndResult?.raw
      layout[11] = result.raw
      layout[12] = unexpectedBetweenResultAndGenericWhereClause?.raw
      layout[13] = genericWhereClause?.raw
      layout[14] = unexpectedBetweenGenericWhereClauseAndAccessor?.raw
      layout[15] = accessor?.raw
      layout[16] = unexpectedAfterAccessor?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeAttributes(_ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSubscriptDeclSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeAttributes.map(RawSyntax.init), arena: arena).as(RawSubscriptDeclSyntax.self)!
  }
  public var attributes: RawAttributeListSyntax? {
    layoutView.children[1].map(RawAttributeListSyntax.init(raw:))
  }
  public func withAttributes(_ attributes: RawAttributeListSyntax?, arena: SyntaxArena) -> RawSubscriptDeclSyntax {
    return layoutView.replacingChild(at: 1, with: attributes.map(RawSyntax.init), arena: arena).as(RawSubscriptDeclSyntax.self)!
  }
  public var unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAttributesAndModifiers(_ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSubscriptDeclSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenAttributesAndModifiers.map(RawSyntax.init), arena: arena).as(RawSubscriptDeclSyntax.self)!
  }
  public var modifiers: RawModifierListSyntax? {
    layoutView.children[3].map(RawModifierListSyntax.init(raw:))
  }
  public func withModifiers(_ modifiers: RawModifierListSyntax?, arena: SyntaxArena) -> RawSubscriptDeclSyntax {
    return layoutView.replacingChild(at: 3, with: modifiers.map(RawSyntax.init), arena: arena).as(RawSubscriptDeclSyntax.self)!
  }
  public var unexpectedBetweenModifiersAndSubscriptKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenModifiersAndSubscriptKeyword(_ unexpectedBetweenModifiersAndSubscriptKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSubscriptDeclSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenModifiersAndSubscriptKeyword.map(RawSyntax.init), arena: arena).as(RawSubscriptDeclSyntax.self)!
  }
  public var subscriptKeyword: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withSubscriptKeyword(_ subscriptKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawSubscriptDeclSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(subscriptKeyword), arena: arena).as(RawSubscriptDeclSyntax.self)!
  }
  public var unexpectedBetweenSubscriptKeywordAndGenericParameterClause: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenSubscriptKeywordAndGenericParameterClause(_ unexpectedBetweenSubscriptKeywordAndGenericParameterClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSubscriptDeclSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenSubscriptKeywordAndGenericParameterClause.map(RawSyntax.init), arena: arena).as(RawSubscriptDeclSyntax.self)!
  }
  public var genericParameterClause: RawGenericParameterClauseSyntax? {
    layoutView.children[7].map(RawGenericParameterClauseSyntax.init(raw:))
  }
  public func withGenericParameterClause(_ genericParameterClause: RawGenericParameterClauseSyntax?, arena: SyntaxArena) -> RawSubscriptDeclSyntax {
    return layoutView.replacingChild(at: 7, with: genericParameterClause.map(RawSyntax.init), arena: arena).as(RawSubscriptDeclSyntax.self)!
  }
  public var unexpectedBetweenGenericParameterClauseAndIndices: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenGenericParameterClauseAndIndices(_ unexpectedBetweenGenericParameterClauseAndIndices: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSubscriptDeclSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenGenericParameterClauseAndIndices.map(RawSyntax.init), arena: arena).as(RawSubscriptDeclSyntax.self)!
  }
  public var indices: RawParameterClauseSyntax {
    layoutView.children[9].map(RawParameterClauseSyntax.init(raw:))!
  }
  public func withIndices(_ indices: RawParameterClauseSyntax, arena: SyntaxArena) -> RawSubscriptDeclSyntax {
    return layoutView.replacingChild(at: 9, with: RawSyntax(indices), arena: arena).as(RawSubscriptDeclSyntax.self)!
  }
  public var unexpectedBetweenIndicesAndResult: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenIndicesAndResult(_ unexpectedBetweenIndicesAndResult: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSubscriptDeclSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedBetweenIndicesAndResult.map(RawSyntax.init), arena: arena).as(RawSubscriptDeclSyntax.self)!
  }
  public var result: RawReturnClauseSyntax {
    layoutView.children[11].map(RawReturnClauseSyntax.init(raw:))!
  }
  public func withResult(_ result: RawReturnClauseSyntax, arena: SyntaxArena) -> RawSubscriptDeclSyntax {
    return layoutView.replacingChild(at: 11, with: RawSyntax(result), arena: arena).as(RawSubscriptDeclSyntax.self)!
  }
  public var unexpectedBetweenResultAndGenericWhereClause: RawUnexpectedNodesSyntax? {
    layoutView.children[12].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenResultAndGenericWhereClause(_ unexpectedBetweenResultAndGenericWhereClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSubscriptDeclSyntax {
    return layoutView.replacingChild(at: 12, with: unexpectedBetweenResultAndGenericWhereClause.map(RawSyntax.init), arena: arena).as(RawSubscriptDeclSyntax.self)!
  }
  public var genericWhereClause: RawGenericWhereClauseSyntax? {
    layoutView.children[13].map(RawGenericWhereClauseSyntax.init(raw:))
  }
  public func withGenericWhereClause(_ genericWhereClause: RawGenericWhereClauseSyntax?, arena: SyntaxArena) -> RawSubscriptDeclSyntax {
    return layoutView.replacingChild(at: 13, with: genericWhereClause.map(RawSyntax.init), arena: arena).as(RawSubscriptDeclSyntax.self)!
  }
  public var unexpectedBetweenGenericWhereClauseAndAccessor: RawUnexpectedNodesSyntax? {
    layoutView.children[14].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenGenericWhereClauseAndAccessor(_ unexpectedBetweenGenericWhereClauseAndAccessor: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSubscriptDeclSyntax {
    return layoutView.replacingChild(at: 14, with: unexpectedBetweenGenericWhereClauseAndAccessor.map(RawSyntax.init), arena: arena).as(RawSubscriptDeclSyntax.self)!
  }
  public var accessor: RawSyntax? {
    layoutView.children[15]
  }
  public func withAccessor(_ accessor: RawSyntax?, arena: SyntaxArena) -> RawSubscriptDeclSyntax {
    return layoutView.replacingChild(at: 15, with: accessor.map(RawSyntax.init), arena: arena).as(RawSubscriptDeclSyntax.self)!
  }
  public var unexpectedAfterAccessor: RawUnexpectedNodesSyntax? {
    layoutView.children[16].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterAccessor(_ unexpectedAfterAccessor: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSubscriptDeclSyntax {
    return layoutView.replacingChild(at: 16, with: unexpectedAfterAccessor.map(RawSyntax.init), arena: arena).as(RawSubscriptDeclSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawAccessLevelModifierSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = AccessLevelModifierSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .accessLevelModifier
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeName: RawUnexpectedNodesSyntax? = nil,
    name: RawTokenSyntax,
    _ unexpectedBetweenNameAndModifier: RawUnexpectedNodesSyntax? = nil,
    modifier: RawDeclModifierDetailSyntax?,
    _ unexpectedAfterModifier: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .accessLevelModifier, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeName?.raw
      layout[1] = name.raw
      layout[2] = unexpectedBetweenNameAndModifier?.raw
      layout[3] = modifier?.raw
      layout[4] = unexpectedAfterModifier?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeName: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeName(_ unexpectedBeforeName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAccessLevelModifierSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeName.map(RawSyntax.init), arena: arena).as(RawAccessLevelModifierSyntax.self)!
  }
  public var name: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withName(_ name: RawTokenSyntax, arena: SyntaxArena) -> RawAccessLevelModifierSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(name), arena: arena).as(RawAccessLevelModifierSyntax.self)!
  }
  public var unexpectedBetweenNameAndModifier: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenNameAndModifier(_ unexpectedBetweenNameAndModifier: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAccessLevelModifierSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenNameAndModifier.map(RawSyntax.init), arena: arena).as(RawAccessLevelModifierSyntax.self)!
  }
  public var modifier: RawDeclModifierDetailSyntax? {
    layoutView.children[3].map(RawDeclModifierDetailSyntax.init(raw:))
  }
  public func withModifier(_ modifier: RawDeclModifierDetailSyntax?, arena: SyntaxArena) -> RawAccessLevelModifierSyntax {
    return layoutView.replacingChild(at: 3, with: modifier.map(RawSyntax.init), arena: arena).as(RawAccessLevelModifierSyntax.self)!
  }
  public var unexpectedAfterModifier: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterModifier(_ unexpectedAfterModifier: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAccessLevelModifierSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterModifier.map(RawSyntax.init), arena: arena).as(RawAccessLevelModifierSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawAccessPathComponentSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = AccessPathComponentSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .accessPathComponent
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeName: RawUnexpectedNodesSyntax? = nil,
    name: RawTokenSyntax,
    _ unexpectedBetweenNameAndTrailingDot: RawUnexpectedNodesSyntax? = nil,
    trailingDot: RawTokenSyntax?,
    _ unexpectedAfterTrailingDot: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .accessPathComponent, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeName?.raw
      layout[1] = name.raw
      layout[2] = unexpectedBetweenNameAndTrailingDot?.raw
      layout[3] = trailingDot?.raw
      layout[4] = unexpectedAfterTrailingDot?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeName: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeName(_ unexpectedBeforeName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAccessPathComponentSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeName.map(RawSyntax.init), arena: arena).as(RawAccessPathComponentSyntax.self)!
  }
  public var name: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withName(_ name: RawTokenSyntax, arena: SyntaxArena) -> RawAccessPathComponentSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(name), arena: arena).as(RawAccessPathComponentSyntax.self)!
  }
  public var unexpectedBetweenNameAndTrailingDot: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenNameAndTrailingDot(_ unexpectedBetweenNameAndTrailingDot: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAccessPathComponentSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenNameAndTrailingDot.map(RawSyntax.init), arena: arena).as(RawAccessPathComponentSyntax.self)!
  }
  public var trailingDot: RawTokenSyntax? {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))
  }
  public func withTrailingDot(_ trailingDot: RawTokenSyntax?, arena: SyntaxArena) -> RawAccessPathComponentSyntax {
    return layoutView.replacingChild(at: 3, with: trailingDot.map(RawSyntax.init), arena: arena).as(RawAccessPathComponentSyntax.self)!
  }
  public var unexpectedAfterTrailingDot: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterTrailingDot(_ unexpectedAfterTrailingDot: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAccessPathComponentSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterTrailingDot.map(RawSyntax.init), arena: arena).as(RawAccessPathComponentSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawAccessPathSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = AccessPathSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .accessPath
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawAccessPathComponentSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .accessPath, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawAccessPathComponentSyntax] {
    layoutView.children.map { RawAccessPathComponentSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawImportDeclSyntax: RawDeclSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ImportDeclSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .importDecl
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? = nil,
    attributes: RawAttributeListSyntax?,
    _ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? = nil,
    modifiers: RawModifierListSyntax?,
    _ unexpectedBetweenModifiersAndImportTok: RawUnexpectedNodesSyntax? = nil,
    importTok: RawTokenSyntax,
    _ unexpectedBetweenImportTokAndImportKind: RawUnexpectedNodesSyntax? = nil,
    importKind: RawTokenSyntax?,
    _ unexpectedBetweenImportKindAndPath: RawUnexpectedNodesSyntax? = nil,
    path: RawAccessPathSyntax,
    _ unexpectedAfterPath: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .importDecl, uninitializedCount: 11, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeAttributes?.raw
      layout[1] = attributes?.raw
      layout[2] = unexpectedBetweenAttributesAndModifiers?.raw
      layout[3] = modifiers?.raw
      layout[4] = unexpectedBetweenModifiersAndImportTok?.raw
      layout[5] = importTok.raw
      layout[6] = unexpectedBetweenImportTokAndImportKind?.raw
      layout[7] = importKind?.raw
      layout[8] = unexpectedBetweenImportKindAndPath?.raw
      layout[9] = path.raw
      layout[10] = unexpectedAfterPath?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeAttributes(_ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawImportDeclSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeAttributes.map(RawSyntax.init), arena: arena).as(RawImportDeclSyntax.self)!
  }
  public var attributes: RawAttributeListSyntax? {
    layoutView.children[1].map(RawAttributeListSyntax.init(raw:))
  }
  public func withAttributes(_ attributes: RawAttributeListSyntax?, arena: SyntaxArena) -> RawImportDeclSyntax {
    return layoutView.replacingChild(at: 1, with: attributes.map(RawSyntax.init), arena: arena).as(RawImportDeclSyntax.self)!
  }
  public var unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAttributesAndModifiers(_ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawImportDeclSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenAttributesAndModifiers.map(RawSyntax.init), arena: arena).as(RawImportDeclSyntax.self)!
  }
  public var modifiers: RawModifierListSyntax? {
    layoutView.children[3].map(RawModifierListSyntax.init(raw:))
  }
  public func withModifiers(_ modifiers: RawModifierListSyntax?, arena: SyntaxArena) -> RawImportDeclSyntax {
    return layoutView.replacingChild(at: 3, with: modifiers.map(RawSyntax.init), arena: arena).as(RawImportDeclSyntax.self)!
  }
  public var unexpectedBetweenModifiersAndImportTok: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenModifiersAndImportTok(_ unexpectedBetweenModifiersAndImportTok: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawImportDeclSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenModifiersAndImportTok.map(RawSyntax.init), arena: arena).as(RawImportDeclSyntax.self)!
  }
  public var importTok: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withImportTok(_ importTok: RawTokenSyntax, arena: SyntaxArena) -> RawImportDeclSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(importTok), arena: arena).as(RawImportDeclSyntax.self)!
  }
  public var unexpectedBetweenImportTokAndImportKind: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenImportTokAndImportKind(_ unexpectedBetweenImportTokAndImportKind: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawImportDeclSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenImportTokAndImportKind.map(RawSyntax.init), arena: arena).as(RawImportDeclSyntax.self)!
  }
  public var importKind: RawTokenSyntax? {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))
  }
  public func withImportKind(_ importKind: RawTokenSyntax?, arena: SyntaxArena) -> RawImportDeclSyntax {
    return layoutView.replacingChild(at: 7, with: importKind.map(RawSyntax.init), arena: arena).as(RawImportDeclSyntax.self)!
  }
  public var unexpectedBetweenImportKindAndPath: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenImportKindAndPath(_ unexpectedBetweenImportKindAndPath: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawImportDeclSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenImportKindAndPath.map(RawSyntax.init), arena: arena).as(RawImportDeclSyntax.self)!
  }
  public var path: RawAccessPathSyntax {
    layoutView.children[9].map(RawAccessPathSyntax.init(raw:))!
  }
  public func withPath(_ path: RawAccessPathSyntax, arena: SyntaxArena) -> RawImportDeclSyntax {
    return layoutView.replacingChild(at: 9, with: RawSyntax(path), arena: arena).as(RawImportDeclSyntax.self)!
  }
  public var unexpectedAfterPath: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterPath(_ unexpectedAfterPath: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawImportDeclSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedAfterPath.map(RawSyntax.init), arena: arena).as(RawImportDeclSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawAccessorParameterSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = AccessorParameterSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .accessorParameter
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeLeftParen: RawUnexpectedNodesSyntax? = nil,
    leftParen: RawTokenSyntax,
    _ unexpectedBetweenLeftParenAndName: RawUnexpectedNodesSyntax? = nil,
    name: RawTokenSyntax,
    _ unexpectedBetweenNameAndRightParen: RawUnexpectedNodesSyntax? = nil,
    rightParen: RawTokenSyntax,
    _ unexpectedAfterRightParen: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .accessorParameter, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeLeftParen?.raw
      layout[1] = leftParen.raw
      layout[2] = unexpectedBetweenLeftParenAndName?.raw
      layout[3] = name.raw
      layout[4] = unexpectedBetweenNameAndRightParen?.raw
      layout[5] = rightParen.raw
      layout[6] = unexpectedAfterRightParen?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeLeftParen: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeLeftParen(_ unexpectedBeforeLeftParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAccessorParameterSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeLeftParen.map(RawSyntax.init), arena: arena).as(RawAccessorParameterSyntax.self)!
  }
  public var leftParen: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeftParen(_ leftParen: RawTokenSyntax, arena: SyntaxArena) -> RawAccessorParameterSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(leftParen), arena: arena).as(RawAccessorParameterSyntax.self)!
  }
  public var unexpectedBetweenLeftParenAndName: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftParenAndName(_ unexpectedBetweenLeftParenAndName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAccessorParameterSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenLeftParenAndName.map(RawSyntax.init), arena: arena).as(RawAccessorParameterSyntax.self)!
  }
  public var name: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withName(_ name: RawTokenSyntax, arena: SyntaxArena) -> RawAccessorParameterSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(name), arena: arena).as(RawAccessorParameterSyntax.self)!
  }
  public var unexpectedBetweenNameAndRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenNameAndRightParen(_ unexpectedBetweenNameAndRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAccessorParameterSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenNameAndRightParen.map(RawSyntax.init), arena: arena).as(RawAccessorParameterSyntax.self)!
  }
  public var rightParen: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withRightParen(_ rightParen: RawTokenSyntax, arena: SyntaxArena) -> RawAccessorParameterSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(rightParen), arena: arena).as(RawAccessorParameterSyntax.self)!
  }
  public var unexpectedAfterRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightParen(_ unexpectedAfterRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAccessorParameterSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterRightParen.map(RawSyntax.init), arena: arena).as(RawAccessorParameterSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawAccessorDeclSyntax: RawDeclSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = AccessorDeclSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .accessorDecl
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? = nil,
    attributes: RawAttributeListSyntax?,
    _ unexpectedBetweenAttributesAndModifier: RawUnexpectedNodesSyntax? = nil,
    modifier: RawDeclModifierSyntax?,
    _ unexpectedBetweenModifierAndAccessorKind: RawUnexpectedNodesSyntax? = nil,
    accessorKind: RawTokenSyntax,
    _ unexpectedBetweenAccessorKindAndParameter: RawUnexpectedNodesSyntax? = nil,
    parameter: RawAccessorParameterSyntax?,
    _ unexpectedBetweenParameterAndAsyncKeyword: RawUnexpectedNodesSyntax? = nil,
    asyncKeyword: RawTokenSyntax?,
    _ unexpectedBetweenAsyncKeywordAndThrowsKeyword: RawUnexpectedNodesSyntax? = nil,
    throwsKeyword: RawTokenSyntax?,
    _ unexpectedBetweenThrowsKeywordAndBody: RawUnexpectedNodesSyntax? = nil,
    body: RawCodeBlockSyntax?,
    _ unexpectedAfterBody: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .accessorDecl, uninitializedCount: 15, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeAttributes?.raw
      layout[1] = attributes?.raw
      layout[2] = unexpectedBetweenAttributesAndModifier?.raw
      layout[3] = modifier?.raw
      layout[4] = unexpectedBetweenModifierAndAccessorKind?.raw
      layout[5] = accessorKind.raw
      layout[6] = unexpectedBetweenAccessorKindAndParameter?.raw
      layout[7] = parameter?.raw
      layout[8] = unexpectedBetweenParameterAndAsyncKeyword?.raw
      layout[9] = asyncKeyword?.raw
      layout[10] = unexpectedBetweenAsyncKeywordAndThrowsKeyword?.raw
      layout[11] = throwsKeyword?.raw
      layout[12] = unexpectedBetweenThrowsKeywordAndBody?.raw
      layout[13] = body?.raw
      layout[14] = unexpectedAfterBody?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeAttributes(_ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAccessorDeclSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeAttributes.map(RawSyntax.init), arena: arena).as(RawAccessorDeclSyntax.self)!
  }
  public var attributes: RawAttributeListSyntax? {
    layoutView.children[1].map(RawAttributeListSyntax.init(raw:))
  }
  public func withAttributes(_ attributes: RawAttributeListSyntax?, arena: SyntaxArena) -> RawAccessorDeclSyntax {
    return layoutView.replacingChild(at: 1, with: attributes.map(RawSyntax.init), arena: arena).as(RawAccessorDeclSyntax.self)!
  }
  public var unexpectedBetweenAttributesAndModifier: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAttributesAndModifier(_ unexpectedBetweenAttributesAndModifier: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAccessorDeclSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenAttributesAndModifier.map(RawSyntax.init), arena: arena).as(RawAccessorDeclSyntax.self)!
  }
  public var modifier: RawDeclModifierSyntax? {
    layoutView.children[3].map(RawDeclModifierSyntax.init(raw:))
  }
  public func withModifier(_ modifier: RawDeclModifierSyntax?, arena: SyntaxArena) -> RawAccessorDeclSyntax {
    return layoutView.replacingChild(at: 3, with: modifier.map(RawSyntax.init), arena: arena).as(RawAccessorDeclSyntax.self)!
  }
  public var unexpectedBetweenModifierAndAccessorKind: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenModifierAndAccessorKind(_ unexpectedBetweenModifierAndAccessorKind: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAccessorDeclSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenModifierAndAccessorKind.map(RawSyntax.init), arena: arena).as(RawAccessorDeclSyntax.self)!
  }
  public var accessorKind: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withAccessorKind(_ accessorKind: RawTokenSyntax, arena: SyntaxArena) -> RawAccessorDeclSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(accessorKind), arena: arena).as(RawAccessorDeclSyntax.self)!
  }
  public var unexpectedBetweenAccessorKindAndParameter: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAccessorKindAndParameter(_ unexpectedBetweenAccessorKindAndParameter: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAccessorDeclSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenAccessorKindAndParameter.map(RawSyntax.init), arena: arena).as(RawAccessorDeclSyntax.self)!
  }
  public var parameter: RawAccessorParameterSyntax? {
    layoutView.children[7].map(RawAccessorParameterSyntax.init(raw:))
  }
  public func withParameter(_ parameter: RawAccessorParameterSyntax?, arena: SyntaxArena) -> RawAccessorDeclSyntax {
    return layoutView.replacingChild(at: 7, with: parameter.map(RawSyntax.init), arena: arena).as(RawAccessorDeclSyntax.self)!
  }
  public var unexpectedBetweenParameterAndAsyncKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenParameterAndAsyncKeyword(_ unexpectedBetweenParameterAndAsyncKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAccessorDeclSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenParameterAndAsyncKeyword.map(RawSyntax.init), arena: arena).as(RawAccessorDeclSyntax.self)!
  }
  public var asyncKeyword: RawTokenSyntax? {
    layoutView.children[9].map(RawTokenSyntax.init(raw:))
  }
  public func withAsyncKeyword(_ asyncKeyword: RawTokenSyntax?, arena: SyntaxArena) -> RawAccessorDeclSyntax {
    return layoutView.replacingChild(at: 9, with: asyncKeyword.map(RawSyntax.init), arena: arena).as(RawAccessorDeclSyntax.self)!
  }
  public var unexpectedBetweenAsyncKeywordAndThrowsKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAsyncKeywordAndThrowsKeyword(_ unexpectedBetweenAsyncKeywordAndThrowsKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAccessorDeclSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedBetweenAsyncKeywordAndThrowsKeyword.map(RawSyntax.init), arena: arena).as(RawAccessorDeclSyntax.self)!
  }
  public var throwsKeyword: RawTokenSyntax? {
    layoutView.children[11].map(RawTokenSyntax.init(raw:))
  }
  public func withThrowsKeyword(_ throwsKeyword: RawTokenSyntax?, arena: SyntaxArena) -> RawAccessorDeclSyntax {
    return layoutView.replacingChild(at: 11, with: throwsKeyword.map(RawSyntax.init), arena: arena).as(RawAccessorDeclSyntax.self)!
  }
  public var unexpectedBetweenThrowsKeywordAndBody: RawUnexpectedNodesSyntax? {
    layoutView.children[12].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenThrowsKeywordAndBody(_ unexpectedBetweenThrowsKeywordAndBody: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAccessorDeclSyntax {
    return layoutView.replacingChild(at: 12, with: unexpectedBetweenThrowsKeywordAndBody.map(RawSyntax.init), arena: arena).as(RawAccessorDeclSyntax.self)!
  }
  public var body: RawCodeBlockSyntax? {
    layoutView.children[13].map(RawCodeBlockSyntax.init(raw:))
  }
  public func withBody(_ body: RawCodeBlockSyntax?, arena: SyntaxArena) -> RawAccessorDeclSyntax {
    return layoutView.replacingChild(at: 13, with: body.map(RawSyntax.init), arena: arena).as(RawAccessorDeclSyntax.self)!
  }
  public var unexpectedAfterBody: RawUnexpectedNodesSyntax? {
    layoutView.children[14].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterBody(_ unexpectedAfterBody: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAccessorDeclSyntax {
    return layoutView.replacingChild(at: 14, with: unexpectedAfterBody.map(RawSyntax.init), arena: arena).as(RawAccessorDeclSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawAccessorListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = AccessorListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .accessorList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawAccessorDeclSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .accessorList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawAccessorDeclSyntax] {
    layoutView.children.map { RawAccessorDeclSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawAccessorBlockSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = AccessorBlockSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .accessorBlock
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeLeftBrace: RawUnexpectedNodesSyntax? = nil,
    leftBrace: RawTokenSyntax,
    _ unexpectedBetweenLeftBraceAndAccessors: RawUnexpectedNodesSyntax? = nil,
    accessors: RawAccessorListSyntax,
    _ unexpectedBetweenAccessorsAndRightBrace: RawUnexpectedNodesSyntax? = nil,
    rightBrace: RawTokenSyntax,
    _ unexpectedAfterRightBrace: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .accessorBlock, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeLeftBrace?.raw
      layout[1] = leftBrace.raw
      layout[2] = unexpectedBetweenLeftBraceAndAccessors?.raw
      layout[3] = accessors.raw
      layout[4] = unexpectedBetweenAccessorsAndRightBrace?.raw
      layout[5] = rightBrace.raw
      layout[6] = unexpectedAfterRightBrace?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeLeftBrace: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeLeftBrace(_ unexpectedBeforeLeftBrace: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAccessorBlockSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeLeftBrace.map(RawSyntax.init), arena: arena).as(RawAccessorBlockSyntax.self)!
  }
  public var leftBrace: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeftBrace(_ leftBrace: RawTokenSyntax, arena: SyntaxArena) -> RawAccessorBlockSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(leftBrace), arena: arena).as(RawAccessorBlockSyntax.self)!
  }
  public var unexpectedBetweenLeftBraceAndAccessors: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftBraceAndAccessors(_ unexpectedBetweenLeftBraceAndAccessors: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAccessorBlockSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenLeftBraceAndAccessors.map(RawSyntax.init), arena: arena).as(RawAccessorBlockSyntax.self)!
  }
  public var accessors: RawAccessorListSyntax {
    layoutView.children[3].map(RawAccessorListSyntax.init(raw:))!
  }
  public func withAccessors(_ accessors: RawAccessorListSyntax, arena: SyntaxArena) -> RawAccessorBlockSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(accessors), arena: arena).as(RawAccessorBlockSyntax.self)!
  }
  public var unexpectedBetweenAccessorsAndRightBrace: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAccessorsAndRightBrace(_ unexpectedBetweenAccessorsAndRightBrace: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAccessorBlockSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenAccessorsAndRightBrace.map(RawSyntax.init), arena: arena).as(RawAccessorBlockSyntax.self)!
  }
  public var rightBrace: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withRightBrace(_ rightBrace: RawTokenSyntax, arena: SyntaxArena) -> RawAccessorBlockSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(rightBrace), arena: arena).as(RawAccessorBlockSyntax.self)!
  }
  public var unexpectedAfterRightBrace: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightBrace(_ unexpectedAfterRightBrace: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAccessorBlockSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterRightBrace.map(RawSyntax.init), arena: arena).as(RawAccessorBlockSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawPatternBindingSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public enum Accessor: RawSyntaxNodeProtocol {
    case `accessors`(RawAccessorBlockSyntax)
    case `getter`(RawCodeBlockSyntax)

    public static func isKindOf(_ raw: RawSyntax) -> Bool {
      return RawAccessorBlockSyntax.isKindOf(raw) || RawCodeBlockSyntax.isKindOf(raw)
    }

    public var raw: RawSyntax {
      switch self {
      case .accessors(let node): return node.raw
      case .getter(let node): return node.raw
      }
    }

    public init?<T>(_ other: T) where T : RawSyntaxNodeProtocol {
      if let node = RawAccessorBlockSyntax(other) {
        self = .accessors(node)
        return
      }
      if let node = RawCodeBlockSyntax(other) {
        self = .getter(node)
        return
      }
      return nil
    }
  }

  public typealias SyntaxType = PatternBindingSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .patternBinding
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforePattern: RawUnexpectedNodesSyntax? = nil,
    pattern: RawPatternSyntax,
    _ unexpectedBetweenPatternAndTypeAnnotation: RawUnexpectedNodesSyntax? = nil,
    typeAnnotation: RawTypeAnnotationSyntax?,
    _ unexpectedBetweenTypeAnnotationAndInitializer: RawUnexpectedNodesSyntax? = nil,
    initializer: RawInitializerClauseSyntax?,
    _ unexpectedBetweenInitializerAndAccessor: RawUnexpectedNodesSyntax? = nil,
    accessor: Accessor?,
    _ unexpectedBetweenAccessorAndTrailingComma: RawUnexpectedNodesSyntax? = nil,
    trailingComma: RawTokenSyntax?,
    _ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .patternBinding, uninitializedCount: 11, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforePattern?.raw
      layout[1] = pattern.raw
      layout[2] = unexpectedBetweenPatternAndTypeAnnotation?.raw
      layout[3] = typeAnnotation?.raw
      layout[4] = unexpectedBetweenTypeAnnotationAndInitializer?.raw
      layout[5] = initializer?.raw
      layout[6] = unexpectedBetweenInitializerAndAccessor?.raw
      layout[7] = accessor?.raw
      layout[8] = unexpectedBetweenAccessorAndTrailingComma?.raw
      layout[9] = trailingComma?.raw
      layout[10] = unexpectedAfterTrailingComma?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforePattern: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforePattern(_ unexpectedBeforePattern: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPatternBindingSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforePattern.map(RawSyntax.init), arena: arena).as(RawPatternBindingSyntax.self)!
  }
  public var pattern: RawPatternSyntax {
    layoutView.children[1].map(RawPatternSyntax.init(raw:))!
  }
  public func withPattern(_ pattern: RawPatternSyntax, arena: SyntaxArena) -> RawPatternBindingSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(pattern), arena: arena).as(RawPatternBindingSyntax.self)!
  }
  public var unexpectedBetweenPatternAndTypeAnnotation: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenPatternAndTypeAnnotation(_ unexpectedBetweenPatternAndTypeAnnotation: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPatternBindingSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenPatternAndTypeAnnotation.map(RawSyntax.init), arena: arena).as(RawPatternBindingSyntax.self)!
  }
  public var typeAnnotation: RawTypeAnnotationSyntax? {
    layoutView.children[3].map(RawTypeAnnotationSyntax.init(raw:))
  }
  public func withTypeAnnotation(_ typeAnnotation: RawTypeAnnotationSyntax?, arena: SyntaxArena) -> RawPatternBindingSyntax {
    return layoutView.replacingChild(at: 3, with: typeAnnotation.map(RawSyntax.init), arena: arena).as(RawPatternBindingSyntax.self)!
  }
  public var unexpectedBetweenTypeAnnotationAndInitializer: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenTypeAnnotationAndInitializer(_ unexpectedBetweenTypeAnnotationAndInitializer: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPatternBindingSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenTypeAnnotationAndInitializer.map(RawSyntax.init), arena: arena).as(RawPatternBindingSyntax.self)!
  }
  public var initializer: RawInitializerClauseSyntax? {
    layoutView.children[5].map(RawInitializerClauseSyntax.init(raw:))
  }
  public func withInitializer(_ initializer: RawInitializerClauseSyntax?, arena: SyntaxArena) -> RawPatternBindingSyntax {
    return layoutView.replacingChild(at: 5, with: initializer.map(RawSyntax.init), arena: arena).as(RawPatternBindingSyntax.self)!
  }
  public var unexpectedBetweenInitializerAndAccessor: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenInitializerAndAccessor(_ unexpectedBetweenInitializerAndAccessor: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPatternBindingSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenInitializerAndAccessor.map(RawSyntax.init), arena: arena).as(RawPatternBindingSyntax.self)!
  }
  public var accessor: RawSyntax? {
    layoutView.children[7]
  }
  public func withAccessor(_ accessor: RawSyntax?, arena: SyntaxArena) -> RawPatternBindingSyntax {
    return layoutView.replacingChild(at: 7, with: accessor.map(RawSyntax.init), arena: arena).as(RawPatternBindingSyntax.self)!
  }
  public var unexpectedBetweenAccessorAndTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAccessorAndTrailingComma(_ unexpectedBetweenAccessorAndTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPatternBindingSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenAccessorAndTrailingComma.map(RawSyntax.init), arena: arena).as(RawPatternBindingSyntax.self)!
  }
  public var trailingComma: RawTokenSyntax? {
    layoutView.children[9].map(RawTokenSyntax.init(raw:))
  }
  public func withTrailingComma(_ trailingComma: RawTokenSyntax?, arena: SyntaxArena) -> RawPatternBindingSyntax {
    return layoutView.replacingChild(at: 9, with: trailingComma.map(RawSyntax.init), arena: arena).as(RawPatternBindingSyntax.self)!
  }
  public var unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterTrailingComma(_ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPatternBindingSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedAfterTrailingComma.map(RawSyntax.init), arena: arena).as(RawPatternBindingSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawPatternBindingListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = PatternBindingListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .patternBindingList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawPatternBindingSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .patternBindingList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawPatternBindingSyntax] {
    layoutView.children.map { RawPatternBindingSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawVariableDeclSyntax: RawDeclSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = VariableDeclSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .variableDecl
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? = nil,
    attributes: RawAttributeListSyntax?,
    _ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? = nil,
    modifiers: RawModifierListSyntax?,
    _ unexpectedBetweenModifiersAndLetOrVarKeyword: RawUnexpectedNodesSyntax? = nil,
    letOrVarKeyword: RawTokenSyntax,
    _ unexpectedBetweenLetOrVarKeywordAndBindings: RawUnexpectedNodesSyntax? = nil,
    bindings: RawPatternBindingListSyntax,
    _ unexpectedAfterBindings: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .variableDecl, uninitializedCount: 9, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeAttributes?.raw
      layout[1] = attributes?.raw
      layout[2] = unexpectedBetweenAttributesAndModifiers?.raw
      layout[3] = modifiers?.raw
      layout[4] = unexpectedBetweenModifiersAndLetOrVarKeyword?.raw
      layout[5] = letOrVarKeyword.raw
      layout[6] = unexpectedBetweenLetOrVarKeywordAndBindings?.raw
      layout[7] = bindings.raw
      layout[8] = unexpectedAfterBindings?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeAttributes(_ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawVariableDeclSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeAttributes.map(RawSyntax.init), arena: arena).as(RawVariableDeclSyntax.self)!
  }
  public var attributes: RawAttributeListSyntax? {
    layoutView.children[1].map(RawAttributeListSyntax.init(raw:))
  }
  public func withAttributes(_ attributes: RawAttributeListSyntax?, arena: SyntaxArena) -> RawVariableDeclSyntax {
    return layoutView.replacingChild(at: 1, with: attributes.map(RawSyntax.init), arena: arena).as(RawVariableDeclSyntax.self)!
  }
  public var unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAttributesAndModifiers(_ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawVariableDeclSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenAttributesAndModifiers.map(RawSyntax.init), arena: arena).as(RawVariableDeclSyntax.self)!
  }
  public var modifiers: RawModifierListSyntax? {
    layoutView.children[3].map(RawModifierListSyntax.init(raw:))
  }
  public func withModifiers(_ modifiers: RawModifierListSyntax?, arena: SyntaxArena) -> RawVariableDeclSyntax {
    return layoutView.replacingChild(at: 3, with: modifiers.map(RawSyntax.init), arena: arena).as(RawVariableDeclSyntax.self)!
  }
  public var unexpectedBetweenModifiersAndLetOrVarKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenModifiersAndLetOrVarKeyword(_ unexpectedBetweenModifiersAndLetOrVarKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawVariableDeclSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenModifiersAndLetOrVarKeyword.map(RawSyntax.init), arena: arena).as(RawVariableDeclSyntax.self)!
  }
  public var letOrVarKeyword: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withLetOrVarKeyword(_ letOrVarKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawVariableDeclSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(letOrVarKeyword), arena: arena).as(RawVariableDeclSyntax.self)!
  }
  public var unexpectedBetweenLetOrVarKeywordAndBindings: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLetOrVarKeywordAndBindings(_ unexpectedBetweenLetOrVarKeywordAndBindings: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawVariableDeclSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenLetOrVarKeywordAndBindings.map(RawSyntax.init), arena: arena).as(RawVariableDeclSyntax.self)!
  }
  public var bindings: RawPatternBindingListSyntax {
    layoutView.children[7].map(RawPatternBindingListSyntax.init(raw:))!
  }
  public func withBindings(_ bindings: RawPatternBindingListSyntax, arena: SyntaxArena) -> RawVariableDeclSyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(bindings), arena: arena).as(RawVariableDeclSyntax.self)!
  }
  public var unexpectedAfterBindings: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterBindings(_ unexpectedAfterBindings: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawVariableDeclSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedAfterBindings.map(RawSyntax.init), arena: arena).as(RawVariableDeclSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawEnumCaseElementSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = EnumCaseElementSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .enumCaseElement
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeIdentifier: RawUnexpectedNodesSyntax? = nil,
    identifier: RawTokenSyntax,
    _ unexpectedBetweenIdentifierAndAssociatedValue: RawUnexpectedNodesSyntax? = nil,
    associatedValue: RawParameterClauseSyntax?,
    _ unexpectedBetweenAssociatedValueAndRawValue: RawUnexpectedNodesSyntax? = nil,
    rawValue: RawInitializerClauseSyntax?,
    _ unexpectedBetweenRawValueAndTrailingComma: RawUnexpectedNodesSyntax? = nil,
    trailingComma: RawTokenSyntax?,
    _ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .enumCaseElement, uninitializedCount: 9, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeIdentifier?.raw
      layout[1] = identifier.raw
      layout[2] = unexpectedBetweenIdentifierAndAssociatedValue?.raw
      layout[3] = associatedValue?.raw
      layout[4] = unexpectedBetweenAssociatedValueAndRawValue?.raw
      layout[5] = rawValue?.raw
      layout[6] = unexpectedBetweenRawValueAndTrailingComma?.raw
      layout[7] = trailingComma?.raw
      layout[8] = unexpectedAfterTrailingComma?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeIdentifier: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeIdentifier(_ unexpectedBeforeIdentifier: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawEnumCaseElementSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeIdentifier.map(RawSyntax.init), arena: arena).as(RawEnumCaseElementSyntax.self)!
  }
  public var identifier: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withIdentifier(_ identifier: RawTokenSyntax, arena: SyntaxArena) -> RawEnumCaseElementSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(identifier), arena: arena).as(RawEnumCaseElementSyntax.self)!
  }
  public var unexpectedBetweenIdentifierAndAssociatedValue: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenIdentifierAndAssociatedValue(_ unexpectedBetweenIdentifierAndAssociatedValue: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawEnumCaseElementSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenIdentifierAndAssociatedValue.map(RawSyntax.init), arena: arena).as(RawEnumCaseElementSyntax.self)!
  }
  public var associatedValue: RawParameterClauseSyntax? {
    layoutView.children[3].map(RawParameterClauseSyntax.init(raw:))
  }
  public func withAssociatedValue(_ associatedValue: RawParameterClauseSyntax?, arena: SyntaxArena) -> RawEnumCaseElementSyntax {
    return layoutView.replacingChild(at: 3, with: associatedValue.map(RawSyntax.init), arena: arena).as(RawEnumCaseElementSyntax.self)!
  }
  public var unexpectedBetweenAssociatedValueAndRawValue: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAssociatedValueAndRawValue(_ unexpectedBetweenAssociatedValueAndRawValue: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawEnumCaseElementSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenAssociatedValueAndRawValue.map(RawSyntax.init), arena: arena).as(RawEnumCaseElementSyntax.self)!
  }
  public var rawValue: RawInitializerClauseSyntax? {
    layoutView.children[5].map(RawInitializerClauseSyntax.init(raw:))
  }
  public func withRawValue(_ rawValue: RawInitializerClauseSyntax?, arena: SyntaxArena) -> RawEnumCaseElementSyntax {
    return layoutView.replacingChild(at: 5, with: rawValue.map(RawSyntax.init), arena: arena).as(RawEnumCaseElementSyntax.self)!
  }
  public var unexpectedBetweenRawValueAndTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenRawValueAndTrailingComma(_ unexpectedBetweenRawValueAndTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawEnumCaseElementSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenRawValueAndTrailingComma.map(RawSyntax.init), arena: arena).as(RawEnumCaseElementSyntax.self)!
  }
  public var trailingComma: RawTokenSyntax? {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))
  }
  public func withTrailingComma(_ trailingComma: RawTokenSyntax?, arena: SyntaxArena) -> RawEnumCaseElementSyntax {
    return layoutView.replacingChild(at: 7, with: trailingComma.map(RawSyntax.init), arena: arena).as(RawEnumCaseElementSyntax.self)!
  }
  public var unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterTrailingComma(_ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawEnumCaseElementSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedAfterTrailingComma.map(RawSyntax.init), arena: arena).as(RawEnumCaseElementSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawEnumCaseElementListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = EnumCaseElementListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .enumCaseElementList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawEnumCaseElementSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .enumCaseElementList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawEnumCaseElementSyntax] {
    layoutView.children.map { RawEnumCaseElementSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawEnumCaseDeclSyntax: RawDeclSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = EnumCaseDeclSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .enumCaseDecl
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? = nil,
    attributes: RawAttributeListSyntax?,
    _ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? = nil,
    modifiers: RawModifierListSyntax?,
    _ unexpectedBetweenModifiersAndCaseKeyword: RawUnexpectedNodesSyntax? = nil,
    caseKeyword: RawTokenSyntax,
    _ unexpectedBetweenCaseKeywordAndElements: RawUnexpectedNodesSyntax? = nil,
    elements: RawEnumCaseElementListSyntax,
    _ unexpectedAfterElements: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .enumCaseDecl, uninitializedCount: 9, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeAttributes?.raw
      layout[1] = attributes?.raw
      layout[2] = unexpectedBetweenAttributesAndModifiers?.raw
      layout[3] = modifiers?.raw
      layout[4] = unexpectedBetweenModifiersAndCaseKeyword?.raw
      layout[5] = caseKeyword.raw
      layout[6] = unexpectedBetweenCaseKeywordAndElements?.raw
      layout[7] = elements.raw
      layout[8] = unexpectedAfterElements?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeAttributes(_ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawEnumCaseDeclSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeAttributes.map(RawSyntax.init), arena: arena).as(RawEnumCaseDeclSyntax.self)!
  }
  public var attributes: RawAttributeListSyntax? {
    layoutView.children[1].map(RawAttributeListSyntax.init(raw:))
  }
  public func withAttributes(_ attributes: RawAttributeListSyntax?, arena: SyntaxArena) -> RawEnumCaseDeclSyntax {
    return layoutView.replacingChild(at: 1, with: attributes.map(RawSyntax.init), arena: arena).as(RawEnumCaseDeclSyntax.self)!
  }
  public var unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAttributesAndModifiers(_ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawEnumCaseDeclSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenAttributesAndModifiers.map(RawSyntax.init), arena: arena).as(RawEnumCaseDeclSyntax.self)!
  }
  public var modifiers: RawModifierListSyntax? {
    layoutView.children[3].map(RawModifierListSyntax.init(raw:))
  }
  public func withModifiers(_ modifiers: RawModifierListSyntax?, arena: SyntaxArena) -> RawEnumCaseDeclSyntax {
    return layoutView.replacingChild(at: 3, with: modifiers.map(RawSyntax.init), arena: arena).as(RawEnumCaseDeclSyntax.self)!
  }
  public var unexpectedBetweenModifiersAndCaseKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenModifiersAndCaseKeyword(_ unexpectedBetweenModifiersAndCaseKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawEnumCaseDeclSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenModifiersAndCaseKeyword.map(RawSyntax.init), arena: arena).as(RawEnumCaseDeclSyntax.self)!
  }
  public var caseKeyword: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withCaseKeyword(_ caseKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawEnumCaseDeclSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(caseKeyword), arena: arena).as(RawEnumCaseDeclSyntax.self)!
  }
  public var unexpectedBetweenCaseKeywordAndElements: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenCaseKeywordAndElements(_ unexpectedBetweenCaseKeywordAndElements: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawEnumCaseDeclSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenCaseKeywordAndElements.map(RawSyntax.init), arena: arena).as(RawEnumCaseDeclSyntax.self)!
  }
  public var elements: RawEnumCaseElementListSyntax {
    layoutView.children[7].map(RawEnumCaseElementListSyntax.init(raw:))!
  }
  public func withElements(_ elements: RawEnumCaseElementListSyntax, arena: SyntaxArena) -> RawEnumCaseDeclSyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(elements), arena: arena).as(RawEnumCaseDeclSyntax.self)!
  }
  public var unexpectedAfterElements: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterElements(_ unexpectedAfterElements: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawEnumCaseDeclSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedAfterElements.map(RawSyntax.init), arena: arena).as(RawEnumCaseDeclSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawEnumDeclSyntax: RawDeclSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = EnumDeclSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .enumDecl
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? = nil,
    attributes: RawAttributeListSyntax?,
    _ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? = nil,
    modifiers: RawModifierListSyntax?,
    _ unexpectedBetweenModifiersAndEnumKeyword: RawUnexpectedNodesSyntax? = nil,
    enumKeyword: RawTokenSyntax,
    _ unexpectedBetweenEnumKeywordAndIdentifier: RawUnexpectedNodesSyntax? = nil,
    identifier: RawTokenSyntax,
    _ unexpectedBetweenIdentifierAndGenericParameters: RawUnexpectedNodesSyntax? = nil,
    genericParameters: RawGenericParameterClauseSyntax?,
    _ unexpectedBetweenGenericParametersAndInheritanceClause: RawUnexpectedNodesSyntax? = nil,
    inheritanceClause: RawTypeInheritanceClauseSyntax?,
    _ unexpectedBetweenInheritanceClauseAndGenericWhereClause: RawUnexpectedNodesSyntax? = nil,
    genericWhereClause: RawGenericWhereClauseSyntax?,
    _ unexpectedBetweenGenericWhereClauseAndMembers: RawUnexpectedNodesSyntax? = nil,
    members: RawMemberDeclBlockSyntax,
    _ unexpectedAfterMembers: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .enumDecl, uninitializedCount: 17, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeAttributes?.raw
      layout[1] = attributes?.raw
      layout[2] = unexpectedBetweenAttributesAndModifiers?.raw
      layout[3] = modifiers?.raw
      layout[4] = unexpectedBetweenModifiersAndEnumKeyword?.raw
      layout[5] = enumKeyword.raw
      layout[6] = unexpectedBetweenEnumKeywordAndIdentifier?.raw
      layout[7] = identifier.raw
      layout[8] = unexpectedBetweenIdentifierAndGenericParameters?.raw
      layout[9] = genericParameters?.raw
      layout[10] = unexpectedBetweenGenericParametersAndInheritanceClause?.raw
      layout[11] = inheritanceClause?.raw
      layout[12] = unexpectedBetweenInheritanceClauseAndGenericWhereClause?.raw
      layout[13] = genericWhereClause?.raw
      layout[14] = unexpectedBetweenGenericWhereClauseAndMembers?.raw
      layout[15] = members.raw
      layout[16] = unexpectedAfterMembers?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeAttributes(_ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawEnumDeclSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeAttributes.map(RawSyntax.init), arena: arena).as(RawEnumDeclSyntax.self)!
  }
  public var attributes: RawAttributeListSyntax? {
    layoutView.children[1].map(RawAttributeListSyntax.init(raw:))
  }
  public func withAttributes(_ attributes: RawAttributeListSyntax?, arena: SyntaxArena) -> RawEnumDeclSyntax {
    return layoutView.replacingChild(at: 1, with: attributes.map(RawSyntax.init), arena: arena).as(RawEnumDeclSyntax.self)!
  }
  public var unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAttributesAndModifiers(_ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawEnumDeclSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenAttributesAndModifiers.map(RawSyntax.init), arena: arena).as(RawEnumDeclSyntax.self)!
  }
  public var modifiers: RawModifierListSyntax? {
    layoutView.children[3].map(RawModifierListSyntax.init(raw:))
  }
  public func withModifiers(_ modifiers: RawModifierListSyntax?, arena: SyntaxArena) -> RawEnumDeclSyntax {
    return layoutView.replacingChild(at: 3, with: modifiers.map(RawSyntax.init), arena: arena).as(RawEnumDeclSyntax.self)!
  }
  public var unexpectedBetweenModifiersAndEnumKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenModifiersAndEnumKeyword(_ unexpectedBetweenModifiersAndEnumKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawEnumDeclSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenModifiersAndEnumKeyword.map(RawSyntax.init), arena: arena).as(RawEnumDeclSyntax.self)!
  }
  public var enumKeyword: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withEnumKeyword(_ enumKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawEnumDeclSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(enumKeyword), arena: arena).as(RawEnumDeclSyntax.self)!
  }
  public var unexpectedBetweenEnumKeywordAndIdentifier: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenEnumKeywordAndIdentifier(_ unexpectedBetweenEnumKeywordAndIdentifier: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawEnumDeclSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenEnumKeywordAndIdentifier.map(RawSyntax.init), arena: arena).as(RawEnumDeclSyntax.self)!
  }
  public var identifier: RawTokenSyntax {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))!
  }
  public func withIdentifier(_ identifier: RawTokenSyntax, arena: SyntaxArena) -> RawEnumDeclSyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(identifier), arena: arena).as(RawEnumDeclSyntax.self)!
  }
  public var unexpectedBetweenIdentifierAndGenericParameters: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenIdentifierAndGenericParameters(_ unexpectedBetweenIdentifierAndGenericParameters: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawEnumDeclSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenIdentifierAndGenericParameters.map(RawSyntax.init), arena: arena).as(RawEnumDeclSyntax.self)!
  }
  public var genericParameters: RawGenericParameterClauseSyntax? {
    layoutView.children[9].map(RawGenericParameterClauseSyntax.init(raw:))
  }
  public func withGenericParameters(_ genericParameters: RawGenericParameterClauseSyntax?, arena: SyntaxArena) -> RawEnumDeclSyntax {
    return layoutView.replacingChild(at: 9, with: genericParameters.map(RawSyntax.init), arena: arena).as(RawEnumDeclSyntax.self)!
  }
  public var unexpectedBetweenGenericParametersAndInheritanceClause: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenGenericParametersAndInheritanceClause(_ unexpectedBetweenGenericParametersAndInheritanceClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawEnumDeclSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedBetweenGenericParametersAndInheritanceClause.map(RawSyntax.init), arena: arena).as(RawEnumDeclSyntax.self)!
  }
  public var inheritanceClause: RawTypeInheritanceClauseSyntax? {
    layoutView.children[11].map(RawTypeInheritanceClauseSyntax.init(raw:))
  }
  public func withInheritanceClause(_ inheritanceClause: RawTypeInheritanceClauseSyntax?, arena: SyntaxArena) -> RawEnumDeclSyntax {
    return layoutView.replacingChild(at: 11, with: inheritanceClause.map(RawSyntax.init), arena: arena).as(RawEnumDeclSyntax.self)!
  }
  public var unexpectedBetweenInheritanceClauseAndGenericWhereClause: RawUnexpectedNodesSyntax? {
    layoutView.children[12].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenInheritanceClauseAndGenericWhereClause(_ unexpectedBetweenInheritanceClauseAndGenericWhereClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawEnumDeclSyntax {
    return layoutView.replacingChild(at: 12, with: unexpectedBetweenInheritanceClauseAndGenericWhereClause.map(RawSyntax.init), arena: arena).as(RawEnumDeclSyntax.self)!
  }
  public var genericWhereClause: RawGenericWhereClauseSyntax? {
    layoutView.children[13].map(RawGenericWhereClauseSyntax.init(raw:))
  }
  public func withGenericWhereClause(_ genericWhereClause: RawGenericWhereClauseSyntax?, arena: SyntaxArena) -> RawEnumDeclSyntax {
    return layoutView.replacingChild(at: 13, with: genericWhereClause.map(RawSyntax.init), arena: arena).as(RawEnumDeclSyntax.self)!
  }
  public var unexpectedBetweenGenericWhereClauseAndMembers: RawUnexpectedNodesSyntax? {
    layoutView.children[14].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenGenericWhereClauseAndMembers(_ unexpectedBetweenGenericWhereClauseAndMembers: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawEnumDeclSyntax {
    return layoutView.replacingChild(at: 14, with: unexpectedBetweenGenericWhereClauseAndMembers.map(RawSyntax.init), arena: arena).as(RawEnumDeclSyntax.self)!
  }
  public var members: RawMemberDeclBlockSyntax {
    layoutView.children[15].map(RawMemberDeclBlockSyntax.init(raw:))!
  }
  public func withMembers(_ members: RawMemberDeclBlockSyntax, arena: SyntaxArena) -> RawEnumDeclSyntax {
    return layoutView.replacingChild(at: 15, with: RawSyntax(members), arena: arena).as(RawEnumDeclSyntax.self)!
  }
  public var unexpectedAfterMembers: RawUnexpectedNodesSyntax? {
    layoutView.children[16].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterMembers(_ unexpectedAfterMembers: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawEnumDeclSyntax {
    return layoutView.replacingChild(at: 16, with: unexpectedAfterMembers.map(RawSyntax.init), arena: arena).as(RawEnumDeclSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawOperatorDeclSyntax: RawDeclSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = OperatorDeclSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .operatorDecl
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? = nil,
    attributes: RawAttributeListSyntax?,
    _ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? = nil,
    modifiers: RawModifierListSyntax?,
    _ unexpectedBetweenModifiersAndOperatorKeyword: RawUnexpectedNodesSyntax? = nil,
    operatorKeyword: RawTokenSyntax,
    _ unexpectedBetweenOperatorKeywordAndIdentifier: RawUnexpectedNodesSyntax? = nil,
    identifier: RawTokenSyntax,
    _ unexpectedBetweenIdentifierAndOperatorPrecedenceAndTypes: RawUnexpectedNodesSyntax? = nil,
    operatorPrecedenceAndTypes: RawOperatorPrecedenceAndTypesSyntax?,
    _ unexpectedAfterOperatorPrecedenceAndTypes: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .operatorDecl, uninitializedCount: 11, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeAttributes?.raw
      layout[1] = attributes?.raw
      layout[2] = unexpectedBetweenAttributesAndModifiers?.raw
      layout[3] = modifiers?.raw
      layout[4] = unexpectedBetweenModifiersAndOperatorKeyword?.raw
      layout[5] = operatorKeyword.raw
      layout[6] = unexpectedBetweenOperatorKeywordAndIdentifier?.raw
      layout[7] = identifier.raw
      layout[8] = unexpectedBetweenIdentifierAndOperatorPrecedenceAndTypes?.raw
      layout[9] = operatorPrecedenceAndTypes?.raw
      layout[10] = unexpectedAfterOperatorPrecedenceAndTypes?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeAttributes(_ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawOperatorDeclSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeAttributes.map(RawSyntax.init), arena: arena).as(RawOperatorDeclSyntax.self)!
  }
  public var attributes: RawAttributeListSyntax? {
    layoutView.children[1].map(RawAttributeListSyntax.init(raw:))
  }
  public func withAttributes(_ attributes: RawAttributeListSyntax?, arena: SyntaxArena) -> RawOperatorDeclSyntax {
    return layoutView.replacingChild(at: 1, with: attributes.map(RawSyntax.init), arena: arena).as(RawOperatorDeclSyntax.self)!
  }
  public var unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAttributesAndModifiers(_ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawOperatorDeclSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenAttributesAndModifiers.map(RawSyntax.init), arena: arena).as(RawOperatorDeclSyntax.self)!
  }
  public var modifiers: RawModifierListSyntax? {
    layoutView.children[3].map(RawModifierListSyntax.init(raw:))
  }
  public func withModifiers(_ modifiers: RawModifierListSyntax?, arena: SyntaxArena) -> RawOperatorDeclSyntax {
    return layoutView.replacingChild(at: 3, with: modifiers.map(RawSyntax.init), arena: arena).as(RawOperatorDeclSyntax.self)!
  }
  public var unexpectedBetweenModifiersAndOperatorKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenModifiersAndOperatorKeyword(_ unexpectedBetweenModifiersAndOperatorKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawOperatorDeclSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenModifiersAndOperatorKeyword.map(RawSyntax.init), arena: arena).as(RawOperatorDeclSyntax.self)!
  }
  public var operatorKeyword: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withOperatorKeyword(_ operatorKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawOperatorDeclSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(operatorKeyword), arena: arena).as(RawOperatorDeclSyntax.self)!
  }
  public var unexpectedBetweenOperatorKeywordAndIdentifier: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenOperatorKeywordAndIdentifier(_ unexpectedBetweenOperatorKeywordAndIdentifier: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawOperatorDeclSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenOperatorKeywordAndIdentifier.map(RawSyntax.init), arena: arena).as(RawOperatorDeclSyntax.self)!
  }
  public var identifier: RawTokenSyntax {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))!
  }
  public func withIdentifier(_ identifier: RawTokenSyntax, arena: SyntaxArena) -> RawOperatorDeclSyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(identifier), arena: arena).as(RawOperatorDeclSyntax.self)!
  }
  public var unexpectedBetweenIdentifierAndOperatorPrecedenceAndTypes: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenIdentifierAndOperatorPrecedenceAndTypes(_ unexpectedBetweenIdentifierAndOperatorPrecedenceAndTypes: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawOperatorDeclSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenIdentifierAndOperatorPrecedenceAndTypes.map(RawSyntax.init), arena: arena).as(RawOperatorDeclSyntax.self)!
  }
  public var operatorPrecedenceAndTypes: RawOperatorPrecedenceAndTypesSyntax? {
    layoutView.children[9].map(RawOperatorPrecedenceAndTypesSyntax.init(raw:))
  }
  public func withOperatorPrecedenceAndTypes(_ operatorPrecedenceAndTypes: RawOperatorPrecedenceAndTypesSyntax?, arena: SyntaxArena) -> RawOperatorDeclSyntax {
    return layoutView.replacingChild(at: 9, with: operatorPrecedenceAndTypes.map(RawSyntax.init), arena: arena).as(RawOperatorDeclSyntax.self)!
  }
  public var unexpectedAfterOperatorPrecedenceAndTypes: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterOperatorPrecedenceAndTypes(_ unexpectedAfterOperatorPrecedenceAndTypes: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawOperatorDeclSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedAfterOperatorPrecedenceAndTypes.map(RawSyntax.init), arena: arena).as(RawOperatorDeclSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawDesignatedTypeListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = DesignatedTypeListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .designatedTypeList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawDesignatedTypeElementSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .designatedTypeList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawDesignatedTypeElementSyntax] {
    layoutView.children.map { RawDesignatedTypeElementSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawDesignatedTypeElementSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = DesignatedTypeElementSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .designatedTypeElement
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeLeadingComma: RawUnexpectedNodesSyntax? = nil,
    leadingComma: RawTokenSyntax,
    _ unexpectedBetweenLeadingCommaAndName: RawUnexpectedNodesSyntax? = nil,
    name: RawTokenSyntax,
    _ unexpectedAfterName: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .designatedTypeElement, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeLeadingComma?.raw
      layout[1] = leadingComma.raw
      layout[2] = unexpectedBetweenLeadingCommaAndName?.raw
      layout[3] = name.raw
      layout[4] = unexpectedAfterName?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeLeadingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeLeadingComma(_ unexpectedBeforeLeadingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDesignatedTypeElementSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeLeadingComma.map(RawSyntax.init), arena: arena).as(RawDesignatedTypeElementSyntax.self)!
  }
  public var leadingComma: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeadingComma(_ leadingComma: RawTokenSyntax, arena: SyntaxArena) -> RawDesignatedTypeElementSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(leadingComma), arena: arena).as(RawDesignatedTypeElementSyntax.self)!
  }
  public var unexpectedBetweenLeadingCommaAndName: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeadingCommaAndName(_ unexpectedBetweenLeadingCommaAndName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDesignatedTypeElementSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenLeadingCommaAndName.map(RawSyntax.init), arena: arena).as(RawDesignatedTypeElementSyntax.self)!
  }
  public var name: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withName(_ name: RawTokenSyntax, arena: SyntaxArena) -> RawDesignatedTypeElementSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(name), arena: arena).as(RawDesignatedTypeElementSyntax.self)!
  }
  public var unexpectedAfterName: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterName(_ unexpectedAfterName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDesignatedTypeElementSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterName.map(RawSyntax.init), arena: arena).as(RawDesignatedTypeElementSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawOperatorPrecedenceAndTypesSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = OperatorPrecedenceAndTypesSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .operatorPrecedenceAndTypes
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeColon: RawUnexpectedNodesSyntax? = nil,
    colon: RawTokenSyntax,
    _ unexpectedBetweenColonAndPrecedenceGroup: RawUnexpectedNodesSyntax? = nil,
    precedenceGroup: RawTokenSyntax,
    _ unexpectedBetweenPrecedenceGroupAndDesignatedTypes: RawUnexpectedNodesSyntax? = nil,
    designatedTypes: RawDesignatedTypeListSyntax,
    _ unexpectedAfterDesignatedTypes: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .operatorPrecedenceAndTypes, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeColon?.raw
      layout[1] = colon.raw
      layout[2] = unexpectedBetweenColonAndPrecedenceGroup?.raw
      layout[3] = precedenceGroup.raw
      layout[4] = unexpectedBetweenPrecedenceGroupAndDesignatedTypes?.raw
      layout[5] = designatedTypes.raw
      layout[6] = unexpectedAfterDesignatedTypes?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeColon: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeColon(_ unexpectedBeforeColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawOperatorPrecedenceAndTypesSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeColon.map(RawSyntax.init), arena: arena).as(RawOperatorPrecedenceAndTypesSyntax.self)!
  }
  public var colon: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withColon(_ colon: RawTokenSyntax, arena: SyntaxArena) -> RawOperatorPrecedenceAndTypesSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(colon), arena: arena).as(RawOperatorPrecedenceAndTypesSyntax.self)!
  }
  public var unexpectedBetweenColonAndPrecedenceGroup: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenColonAndPrecedenceGroup(_ unexpectedBetweenColonAndPrecedenceGroup: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawOperatorPrecedenceAndTypesSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenColonAndPrecedenceGroup.map(RawSyntax.init), arena: arena).as(RawOperatorPrecedenceAndTypesSyntax.self)!
  }
  public var precedenceGroup: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withPrecedenceGroup(_ precedenceGroup: RawTokenSyntax, arena: SyntaxArena) -> RawOperatorPrecedenceAndTypesSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(precedenceGroup), arena: arena).as(RawOperatorPrecedenceAndTypesSyntax.self)!
  }
  public var unexpectedBetweenPrecedenceGroupAndDesignatedTypes: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenPrecedenceGroupAndDesignatedTypes(_ unexpectedBetweenPrecedenceGroupAndDesignatedTypes: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawOperatorPrecedenceAndTypesSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenPrecedenceGroupAndDesignatedTypes.map(RawSyntax.init), arena: arena).as(RawOperatorPrecedenceAndTypesSyntax.self)!
  }
  public var designatedTypes: RawDesignatedTypeListSyntax {
    layoutView.children[5].map(RawDesignatedTypeListSyntax.init(raw:))!
  }
  public func withDesignatedTypes(_ designatedTypes: RawDesignatedTypeListSyntax, arena: SyntaxArena) -> RawOperatorPrecedenceAndTypesSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(designatedTypes), arena: arena).as(RawOperatorPrecedenceAndTypesSyntax.self)!
  }
  public var unexpectedAfterDesignatedTypes: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterDesignatedTypes(_ unexpectedAfterDesignatedTypes: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawOperatorPrecedenceAndTypesSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterDesignatedTypes.map(RawSyntax.init), arena: arena).as(RawOperatorPrecedenceAndTypesSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawPrecedenceGroupDeclSyntax: RawDeclSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = PrecedenceGroupDeclSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .precedenceGroupDecl
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? = nil,
    attributes: RawAttributeListSyntax?,
    _ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? = nil,
    modifiers: RawModifierListSyntax?,
    _ unexpectedBetweenModifiersAndPrecedencegroupKeyword: RawUnexpectedNodesSyntax? = nil,
    precedencegroupKeyword: RawTokenSyntax,
    _ unexpectedBetweenPrecedencegroupKeywordAndIdentifier: RawUnexpectedNodesSyntax? = nil,
    identifier: RawTokenSyntax,
    _ unexpectedBetweenIdentifierAndLeftBrace: RawUnexpectedNodesSyntax? = nil,
    leftBrace: RawTokenSyntax,
    _ unexpectedBetweenLeftBraceAndGroupAttributes: RawUnexpectedNodesSyntax? = nil,
    groupAttributes: RawPrecedenceGroupAttributeListSyntax,
    _ unexpectedBetweenGroupAttributesAndRightBrace: RawUnexpectedNodesSyntax? = nil,
    rightBrace: RawTokenSyntax,
    _ unexpectedAfterRightBrace: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .precedenceGroupDecl, uninitializedCount: 15, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeAttributes?.raw
      layout[1] = attributes?.raw
      layout[2] = unexpectedBetweenAttributesAndModifiers?.raw
      layout[3] = modifiers?.raw
      layout[4] = unexpectedBetweenModifiersAndPrecedencegroupKeyword?.raw
      layout[5] = precedencegroupKeyword.raw
      layout[6] = unexpectedBetweenPrecedencegroupKeywordAndIdentifier?.raw
      layout[7] = identifier.raw
      layout[8] = unexpectedBetweenIdentifierAndLeftBrace?.raw
      layout[9] = leftBrace.raw
      layout[10] = unexpectedBetweenLeftBraceAndGroupAttributes?.raw
      layout[11] = groupAttributes.raw
      layout[12] = unexpectedBetweenGroupAttributesAndRightBrace?.raw
      layout[13] = rightBrace.raw
      layout[14] = unexpectedAfterRightBrace?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeAttributes(_ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPrecedenceGroupDeclSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeAttributes.map(RawSyntax.init), arena: arena).as(RawPrecedenceGroupDeclSyntax.self)!
  }
  public var attributes: RawAttributeListSyntax? {
    layoutView.children[1].map(RawAttributeListSyntax.init(raw:))
  }
  public func withAttributes(_ attributes: RawAttributeListSyntax?, arena: SyntaxArena) -> RawPrecedenceGroupDeclSyntax {
    return layoutView.replacingChild(at: 1, with: attributes.map(RawSyntax.init), arena: arena).as(RawPrecedenceGroupDeclSyntax.self)!
  }
  public var unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAttributesAndModifiers(_ unexpectedBetweenAttributesAndModifiers: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPrecedenceGroupDeclSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenAttributesAndModifiers.map(RawSyntax.init), arena: arena).as(RawPrecedenceGroupDeclSyntax.self)!
  }
  public var modifiers: RawModifierListSyntax? {
    layoutView.children[3].map(RawModifierListSyntax.init(raw:))
  }
  public func withModifiers(_ modifiers: RawModifierListSyntax?, arena: SyntaxArena) -> RawPrecedenceGroupDeclSyntax {
    return layoutView.replacingChild(at: 3, with: modifiers.map(RawSyntax.init), arena: arena).as(RawPrecedenceGroupDeclSyntax.self)!
  }
  public var unexpectedBetweenModifiersAndPrecedencegroupKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenModifiersAndPrecedencegroupKeyword(_ unexpectedBetweenModifiersAndPrecedencegroupKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPrecedenceGroupDeclSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenModifiersAndPrecedencegroupKeyword.map(RawSyntax.init), arena: arena).as(RawPrecedenceGroupDeclSyntax.self)!
  }
  public var precedencegroupKeyword: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withPrecedencegroupKeyword(_ precedencegroupKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawPrecedenceGroupDeclSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(precedencegroupKeyword), arena: arena).as(RawPrecedenceGroupDeclSyntax.self)!
  }
  public var unexpectedBetweenPrecedencegroupKeywordAndIdentifier: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenPrecedencegroupKeywordAndIdentifier(_ unexpectedBetweenPrecedencegroupKeywordAndIdentifier: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPrecedenceGroupDeclSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenPrecedencegroupKeywordAndIdentifier.map(RawSyntax.init), arena: arena).as(RawPrecedenceGroupDeclSyntax.self)!
  }
  public var identifier: RawTokenSyntax {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))!
  }
  public func withIdentifier(_ identifier: RawTokenSyntax, arena: SyntaxArena) -> RawPrecedenceGroupDeclSyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(identifier), arena: arena).as(RawPrecedenceGroupDeclSyntax.self)!
  }
  public var unexpectedBetweenIdentifierAndLeftBrace: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenIdentifierAndLeftBrace(_ unexpectedBetweenIdentifierAndLeftBrace: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPrecedenceGroupDeclSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenIdentifierAndLeftBrace.map(RawSyntax.init), arena: arena).as(RawPrecedenceGroupDeclSyntax.self)!
  }
  public var leftBrace: RawTokenSyntax {
    layoutView.children[9].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeftBrace(_ leftBrace: RawTokenSyntax, arena: SyntaxArena) -> RawPrecedenceGroupDeclSyntax {
    return layoutView.replacingChild(at: 9, with: RawSyntax(leftBrace), arena: arena).as(RawPrecedenceGroupDeclSyntax.self)!
  }
  public var unexpectedBetweenLeftBraceAndGroupAttributes: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftBraceAndGroupAttributes(_ unexpectedBetweenLeftBraceAndGroupAttributes: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPrecedenceGroupDeclSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedBetweenLeftBraceAndGroupAttributes.map(RawSyntax.init), arena: arena).as(RawPrecedenceGroupDeclSyntax.self)!
  }
  public var groupAttributes: RawPrecedenceGroupAttributeListSyntax {
    layoutView.children[11].map(RawPrecedenceGroupAttributeListSyntax.init(raw:))!
  }
  public func withGroupAttributes(_ groupAttributes: RawPrecedenceGroupAttributeListSyntax, arena: SyntaxArena) -> RawPrecedenceGroupDeclSyntax {
    return layoutView.replacingChild(at: 11, with: RawSyntax(groupAttributes), arena: arena).as(RawPrecedenceGroupDeclSyntax.self)!
  }
  public var unexpectedBetweenGroupAttributesAndRightBrace: RawUnexpectedNodesSyntax? {
    layoutView.children[12].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenGroupAttributesAndRightBrace(_ unexpectedBetweenGroupAttributesAndRightBrace: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPrecedenceGroupDeclSyntax {
    return layoutView.replacingChild(at: 12, with: unexpectedBetweenGroupAttributesAndRightBrace.map(RawSyntax.init), arena: arena).as(RawPrecedenceGroupDeclSyntax.self)!
  }
  public var rightBrace: RawTokenSyntax {
    layoutView.children[13].map(RawTokenSyntax.init(raw:))!
  }
  public func withRightBrace(_ rightBrace: RawTokenSyntax, arena: SyntaxArena) -> RawPrecedenceGroupDeclSyntax {
    return layoutView.replacingChild(at: 13, with: RawSyntax(rightBrace), arena: arena).as(RawPrecedenceGroupDeclSyntax.self)!
  }
  public var unexpectedAfterRightBrace: RawUnexpectedNodesSyntax? {
    layoutView.children[14].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightBrace(_ unexpectedAfterRightBrace: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPrecedenceGroupDeclSyntax {
    return layoutView.replacingChild(at: 14, with: unexpectedAfterRightBrace.map(RawSyntax.init), arena: arena).as(RawPrecedenceGroupDeclSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawPrecedenceGroupAttributeListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public enum Element: RawSyntaxNodeProtocol {
    case `precedenceGroupRelation`(RawPrecedenceGroupRelationSyntax)
    case `precedenceGroupAssignment`(RawPrecedenceGroupAssignmentSyntax)
    case `precedenceGroupAssociativity`(RawPrecedenceGroupAssociativitySyntax)

    public static func isKindOf(_ raw: RawSyntax) -> Bool {
      return RawPrecedenceGroupRelationSyntax.isKindOf(raw) || RawPrecedenceGroupAssignmentSyntax.isKindOf(raw) || RawPrecedenceGroupAssociativitySyntax.isKindOf(raw)
    }

    public var raw: RawSyntax {
      switch self {
      case .precedenceGroupRelation(let node): return node.raw
      case .precedenceGroupAssignment(let node): return node.raw
      case .precedenceGroupAssociativity(let node): return node.raw
      }
    }

    public init?<T>(_ other: T) where T : RawSyntaxNodeProtocol {
      if let node = RawPrecedenceGroupRelationSyntax(other) {
        self = .precedenceGroupRelation(node)
        return
      }
      if let node = RawPrecedenceGroupAssignmentSyntax(other) {
        self = .precedenceGroupAssignment(node)
        return
      }
      if let node = RawPrecedenceGroupAssociativitySyntax(other) {
        self = .precedenceGroupAssociativity(node)
        return
      }
      return nil
    }
  }

  public typealias SyntaxType = PrecedenceGroupAttributeListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .precedenceGroupAttributeList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [Element], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .precedenceGroupAttributeList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawSyntax] {
    layoutView.children.map { RawSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawPrecedenceGroupRelationSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = PrecedenceGroupRelationSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .precedenceGroupRelation
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeHigherThanOrLowerThan: RawUnexpectedNodesSyntax? = nil,
    higherThanOrLowerThan: RawTokenSyntax,
    _ unexpectedBetweenHigherThanOrLowerThanAndColon: RawUnexpectedNodesSyntax? = nil,
    colon: RawTokenSyntax,
    _ unexpectedBetweenColonAndOtherNames: RawUnexpectedNodesSyntax? = nil,
    otherNames: RawPrecedenceGroupNameListSyntax,
    _ unexpectedAfterOtherNames: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .precedenceGroupRelation, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeHigherThanOrLowerThan?.raw
      layout[1] = higherThanOrLowerThan.raw
      layout[2] = unexpectedBetweenHigherThanOrLowerThanAndColon?.raw
      layout[3] = colon.raw
      layout[4] = unexpectedBetweenColonAndOtherNames?.raw
      layout[5] = otherNames.raw
      layout[6] = unexpectedAfterOtherNames?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeHigherThanOrLowerThan: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeHigherThanOrLowerThan(_ unexpectedBeforeHigherThanOrLowerThan: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPrecedenceGroupRelationSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeHigherThanOrLowerThan.map(RawSyntax.init), arena: arena).as(RawPrecedenceGroupRelationSyntax.self)!
  }
  public var higherThanOrLowerThan: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withHigherThanOrLowerThan(_ higherThanOrLowerThan: RawTokenSyntax, arena: SyntaxArena) -> RawPrecedenceGroupRelationSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(higherThanOrLowerThan), arena: arena).as(RawPrecedenceGroupRelationSyntax.self)!
  }
  public var unexpectedBetweenHigherThanOrLowerThanAndColon: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenHigherThanOrLowerThanAndColon(_ unexpectedBetweenHigherThanOrLowerThanAndColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPrecedenceGroupRelationSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenHigherThanOrLowerThanAndColon.map(RawSyntax.init), arena: arena).as(RawPrecedenceGroupRelationSyntax.self)!
  }
  public var colon: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withColon(_ colon: RawTokenSyntax, arena: SyntaxArena) -> RawPrecedenceGroupRelationSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(colon), arena: arena).as(RawPrecedenceGroupRelationSyntax.self)!
  }
  public var unexpectedBetweenColonAndOtherNames: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenColonAndOtherNames(_ unexpectedBetweenColonAndOtherNames: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPrecedenceGroupRelationSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenColonAndOtherNames.map(RawSyntax.init), arena: arena).as(RawPrecedenceGroupRelationSyntax.self)!
  }
  public var otherNames: RawPrecedenceGroupNameListSyntax {
    layoutView.children[5].map(RawPrecedenceGroupNameListSyntax.init(raw:))!
  }
  public func withOtherNames(_ otherNames: RawPrecedenceGroupNameListSyntax, arena: SyntaxArena) -> RawPrecedenceGroupRelationSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(otherNames), arena: arena).as(RawPrecedenceGroupRelationSyntax.self)!
  }
  public var unexpectedAfterOtherNames: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterOtherNames(_ unexpectedAfterOtherNames: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPrecedenceGroupRelationSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterOtherNames.map(RawSyntax.init), arena: arena).as(RawPrecedenceGroupRelationSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawPrecedenceGroupNameListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = PrecedenceGroupNameListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .precedenceGroupNameList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawPrecedenceGroupNameElementSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .precedenceGroupNameList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawPrecedenceGroupNameElementSyntax] {
    layoutView.children.map { RawPrecedenceGroupNameElementSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawPrecedenceGroupNameElementSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = PrecedenceGroupNameElementSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .precedenceGroupNameElement
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeName: RawUnexpectedNodesSyntax? = nil,
    name: RawTokenSyntax,
    _ unexpectedBetweenNameAndTrailingComma: RawUnexpectedNodesSyntax? = nil,
    trailingComma: RawTokenSyntax?,
    _ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .precedenceGroupNameElement, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeName?.raw
      layout[1] = name.raw
      layout[2] = unexpectedBetweenNameAndTrailingComma?.raw
      layout[3] = trailingComma?.raw
      layout[4] = unexpectedAfterTrailingComma?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeName: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeName(_ unexpectedBeforeName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPrecedenceGroupNameElementSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeName.map(RawSyntax.init), arena: arena).as(RawPrecedenceGroupNameElementSyntax.self)!
  }
  public var name: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withName(_ name: RawTokenSyntax, arena: SyntaxArena) -> RawPrecedenceGroupNameElementSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(name), arena: arena).as(RawPrecedenceGroupNameElementSyntax.self)!
  }
  public var unexpectedBetweenNameAndTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenNameAndTrailingComma(_ unexpectedBetweenNameAndTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPrecedenceGroupNameElementSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenNameAndTrailingComma.map(RawSyntax.init), arena: arena).as(RawPrecedenceGroupNameElementSyntax.self)!
  }
  public var trailingComma: RawTokenSyntax? {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))
  }
  public func withTrailingComma(_ trailingComma: RawTokenSyntax?, arena: SyntaxArena) -> RawPrecedenceGroupNameElementSyntax {
    return layoutView.replacingChild(at: 3, with: trailingComma.map(RawSyntax.init), arena: arena).as(RawPrecedenceGroupNameElementSyntax.self)!
  }
  public var unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterTrailingComma(_ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPrecedenceGroupNameElementSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterTrailingComma.map(RawSyntax.init), arena: arena).as(RawPrecedenceGroupNameElementSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawPrecedenceGroupAssignmentSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = PrecedenceGroupAssignmentSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .precedenceGroupAssignment
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeAssignmentKeyword: RawUnexpectedNodesSyntax? = nil,
    assignmentKeyword: RawTokenSyntax,
    _ unexpectedBetweenAssignmentKeywordAndColon: RawUnexpectedNodesSyntax? = nil,
    colon: RawTokenSyntax,
    _ unexpectedBetweenColonAndFlag: RawUnexpectedNodesSyntax? = nil,
    flag: RawTokenSyntax,
    _ unexpectedAfterFlag: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .precedenceGroupAssignment, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeAssignmentKeyword?.raw
      layout[1] = assignmentKeyword.raw
      layout[2] = unexpectedBetweenAssignmentKeywordAndColon?.raw
      layout[3] = colon.raw
      layout[4] = unexpectedBetweenColonAndFlag?.raw
      layout[5] = flag.raw
      layout[6] = unexpectedAfterFlag?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeAssignmentKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeAssignmentKeyword(_ unexpectedBeforeAssignmentKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPrecedenceGroupAssignmentSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeAssignmentKeyword.map(RawSyntax.init), arena: arena).as(RawPrecedenceGroupAssignmentSyntax.self)!
  }
  public var assignmentKeyword: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withAssignmentKeyword(_ assignmentKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawPrecedenceGroupAssignmentSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(assignmentKeyword), arena: arena).as(RawPrecedenceGroupAssignmentSyntax.self)!
  }
  public var unexpectedBetweenAssignmentKeywordAndColon: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAssignmentKeywordAndColon(_ unexpectedBetweenAssignmentKeywordAndColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPrecedenceGroupAssignmentSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenAssignmentKeywordAndColon.map(RawSyntax.init), arena: arena).as(RawPrecedenceGroupAssignmentSyntax.self)!
  }
  public var colon: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withColon(_ colon: RawTokenSyntax, arena: SyntaxArena) -> RawPrecedenceGroupAssignmentSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(colon), arena: arena).as(RawPrecedenceGroupAssignmentSyntax.self)!
  }
  public var unexpectedBetweenColonAndFlag: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenColonAndFlag(_ unexpectedBetweenColonAndFlag: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPrecedenceGroupAssignmentSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenColonAndFlag.map(RawSyntax.init), arena: arena).as(RawPrecedenceGroupAssignmentSyntax.self)!
  }
  public var flag: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withFlag(_ flag: RawTokenSyntax, arena: SyntaxArena) -> RawPrecedenceGroupAssignmentSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(flag), arena: arena).as(RawPrecedenceGroupAssignmentSyntax.self)!
  }
  public var unexpectedAfterFlag: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterFlag(_ unexpectedAfterFlag: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPrecedenceGroupAssignmentSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterFlag.map(RawSyntax.init), arena: arena).as(RawPrecedenceGroupAssignmentSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawPrecedenceGroupAssociativitySyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = PrecedenceGroupAssociativitySyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .precedenceGroupAssociativity
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeAssociativityKeyword: RawUnexpectedNodesSyntax? = nil,
    associativityKeyword: RawTokenSyntax,
    _ unexpectedBetweenAssociativityKeywordAndColon: RawUnexpectedNodesSyntax? = nil,
    colon: RawTokenSyntax,
    _ unexpectedBetweenColonAndValue: RawUnexpectedNodesSyntax? = nil,
    value: RawTokenSyntax,
    _ unexpectedAfterValue: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .precedenceGroupAssociativity, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeAssociativityKeyword?.raw
      layout[1] = associativityKeyword.raw
      layout[2] = unexpectedBetweenAssociativityKeywordAndColon?.raw
      layout[3] = colon.raw
      layout[4] = unexpectedBetweenColonAndValue?.raw
      layout[5] = value.raw
      layout[6] = unexpectedAfterValue?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeAssociativityKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeAssociativityKeyword(_ unexpectedBeforeAssociativityKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPrecedenceGroupAssociativitySyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeAssociativityKeyword.map(RawSyntax.init), arena: arena).as(RawPrecedenceGroupAssociativitySyntax.self)!
  }
  public var associativityKeyword: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withAssociativityKeyword(_ associativityKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawPrecedenceGroupAssociativitySyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(associativityKeyword), arena: arena).as(RawPrecedenceGroupAssociativitySyntax.self)!
  }
  public var unexpectedBetweenAssociativityKeywordAndColon: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAssociativityKeywordAndColon(_ unexpectedBetweenAssociativityKeywordAndColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPrecedenceGroupAssociativitySyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenAssociativityKeywordAndColon.map(RawSyntax.init), arena: arena).as(RawPrecedenceGroupAssociativitySyntax.self)!
  }
  public var colon: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withColon(_ colon: RawTokenSyntax, arena: SyntaxArena) -> RawPrecedenceGroupAssociativitySyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(colon), arena: arena).as(RawPrecedenceGroupAssociativitySyntax.self)!
  }
  public var unexpectedBetweenColonAndValue: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenColonAndValue(_ unexpectedBetweenColonAndValue: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPrecedenceGroupAssociativitySyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenColonAndValue.map(RawSyntax.init), arena: arena).as(RawPrecedenceGroupAssociativitySyntax.self)!
  }
  public var value: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withValue(_ value: RawTokenSyntax, arena: SyntaxArena) -> RawPrecedenceGroupAssociativitySyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(value), arena: arena).as(RawPrecedenceGroupAssociativitySyntax.self)!
  }
  public var unexpectedAfterValue: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterValue(_ unexpectedAfterValue: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPrecedenceGroupAssociativitySyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterValue.map(RawSyntax.init), arena: arena).as(RawPrecedenceGroupAssociativitySyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawMacroExpansionDeclSyntax: RawDeclSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = MacroExpansionDeclSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .macroExpansionDecl
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforePoundToken: RawUnexpectedNodesSyntax? = nil,
    poundToken: RawTokenSyntax,
    _ unexpectedBetweenPoundTokenAndMacro: RawUnexpectedNodesSyntax? = nil,
    macro: RawTokenSyntax,
    _ unexpectedBetweenMacroAndLeftParen: RawUnexpectedNodesSyntax? = nil,
    leftParen: RawTokenSyntax?,
    _ unexpectedBetweenLeftParenAndArgumentList: RawUnexpectedNodesSyntax? = nil,
    argumentList: RawTupleExprElementListSyntax,
    _ unexpectedBetweenArgumentListAndRightParen: RawUnexpectedNodesSyntax? = nil,
    rightParen: RawTokenSyntax?,
    _ unexpectedBetweenRightParenAndTrailingClosure: RawUnexpectedNodesSyntax? = nil,
    trailingClosure: RawClosureExprSyntax?,
    _ unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: RawUnexpectedNodesSyntax? = nil,
    additionalTrailingClosures: RawMultipleTrailingClosureElementListSyntax?,
    _ unexpectedAfterAdditionalTrailingClosures: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .macroExpansionDecl, uninitializedCount: 15, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforePoundToken?.raw
      layout[1] = poundToken.raw
      layout[2] = unexpectedBetweenPoundTokenAndMacro?.raw
      layout[3] = macro.raw
      layout[4] = unexpectedBetweenMacroAndLeftParen?.raw
      layout[5] = leftParen?.raw
      layout[6] = unexpectedBetweenLeftParenAndArgumentList?.raw
      layout[7] = argumentList.raw
      layout[8] = unexpectedBetweenArgumentListAndRightParen?.raw
      layout[9] = rightParen?.raw
      layout[10] = unexpectedBetweenRightParenAndTrailingClosure?.raw
      layout[11] = trailingClosure?.raw
      layout[12] = unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures?.raw
      layout[13] = additionalTrailingClosures?.raw
      layout[14] = unexpectedAfterAdditionalTrailingClosures?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforePoundToken: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforePoundToken(_ unexpectedBeforePoundToken: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMacroExpansionDeclSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforePoundToken.map(RawSyntax.init), arena: arena).as(RawMacroExpansionDeclSyntax.self)!
  }
  public var poundToken: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withPoundToken(_ poundToken: RawTokenSyntax, arena: SyntaxArena) -> RawMacroExpansionDeclSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(poundToken), arena: arena).as(RawMacroExpansionDeclSyntax.self)!
  }
  public var unexpectedBetweenPoundTokenAndMacro: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenPoundTokenAndMacro(_ unexpectedBetweenPoundTokenAndMacro: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMacroExpansionDeclSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenPoundTokenAndMacro.map(RawSyntax.init), arena: arena).as(RawMacroExpansionDeclSyntax.self)!
  }
  public var macro: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withMacro(_ macro: RawTokenSyntax, arena: SyntaxArena) -> RawMacroExpansionDeclSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(macro), arena: arena).as(RawMacroExpansionDeclSyntax.self)!
  }
  public var unexpectedBetweenMacroAndLeftParen: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenMacroAndLeftParen(_ unexpectedBetweenMacroAndLeftParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMacroExpansionDeclSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenMacroAndLeftParen.map(RawSyntax.init), arena: arena).as(RawMacroExpansionDeclSyntax.self)!
  }
  public var leftParen: RawTokenSyntax? {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))
  }
  public func withLeftParen(_ leftParen: RawTokenSyntax?, arena: SyntaxArena) -> RawMacroExpansionDeclSyntax {
    return layoutView.replacingChild(at: 5, with: leftParen.map(RawSyntax.init), arena: arena).as(RawMacroExpansionDeclSyntax.self)!
  }
  public var unexpectedBetweenLeftParenAndArgumentList: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftParenAndArgumentList(_ unexpectedBetweenLeftParenAndArgumentList: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMacroExpansionDeclSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenLeftParenAndArgumentList.map(RawSyntax.init), arena: arena).as(RawMacroExpansionDeclSyntax.self)!
  }
  public var argumentList: RawTupleExprElementListSyntax {
    layoutView.children[7].map(RawTupleExprElementListSyntax.init(raw:))!
  }
  public func withArgumentList(_ argumentList: RawTupleExprElementListSyntax, arena: SyntaxArena) -> RawMacroExpansionDeclSyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(argumentList), arena: arena).as(RawMacroExpansionDeclSyntax.self)!
  }
  public var unexpectedBetweenArgumentListAndRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenArgumentListAndRightParen(_ unexpectedBetweenArgumentListAndRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMacroExpansionDeclSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenArgumentListAndRightParen.map(RawSyntax.init), arena: arena).as(RawMacroExpansionDeclSyntax.self)!
  }
  public var rightParen: RawTokenSyntax? {
    layoutView.children[9].map(RawTokenSyntax.init(raw:))
  }
  public func withRightParen(_ rightParen: RawTokenSyntax?, arena: SyntaxArena) -> RawMacroExpansionDeclSyntax {
    return layoutView.replacingChild(at: 9, with: rightParen.map(RawSyntax.init), arena: arena).as(RawMacroExpansionDeclSyntax.self)!
  }
  public var unexpectedBetweenRightParenAndTrailingClosure: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenRightParenAndTrailingClosure(_ unexpectedBetweenRightParenAndTrailingClosure: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMacroExpansionDeclSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedBetweenRightParenAndTrailingClosure.map(RawSyntax.init), arena: arena).as(RawMacroExpansionDeclSyntax.self)!
  }
  public var trailingClosure: RawClosureExprSyntax? {
    layoutView.children[11].map(RawClosureExprSyntax.init(raw:))
  }
  public func withTrailingClosure(_ trailingClosure: RawClosureExprSyntax?, arena: SyntaxArena) -> RawMacroExpansionDeclSyntax {
    return layoutView.replacingChild(at: 11, with: trailingClosure.map(RawSyntax.init), arena: arena).as(RawMacroExpansionDeclSyntax.self)!
  }
  public var unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: RawUnexpectedNodesSyntax? {
    layoutView.children[12].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenTrailingClosureAndAdditionalTrailingClosures(_ unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMacroExpansionDeclSyntax {
    return layoutView.replacingChild(at: 12, with: unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures.map(RawSyntax.init), arena: arena).as(RawMacroExpansionDeclSyntax.self)!
  }
  public var additionalTrailingClosures: RawMultipleTrailingClosureElementListSyntax? {
    layoutView.children[13].map(RawMultipleTrailingClosureElementListSyntax.init(raw:))
  }
  public func withAdditionalTrailingClosures(_ additionalTrailingClosures: RawMultipleTrailingClosureElementListSyntax?, arena: SyntaxArena) -> RawMacroExpansionDeclSyntax {
    return layoutView.replacingChild(at: 13, with: additionalTrailingClosures.map(RawSyntax.init), arena: arena).as(RawMacroExpansionDeclSyntax.self)!
  }
  public var unexpectedAfterAdditionalTrailingClosures: RawUnexpectedNodesSyntax? {
    layoutView.children[14].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterAdditionalTrailingClosures(_ unexpectedAfterAdditionalTrailingClosures: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMacroExpansionDeclSyntax {
    return layoutView.replacingChild(at: 14, with: unexpectedAfterAdditionalTrailingClosures.map(RawSyntax.init), arena: arena).as(RawMacroExpansionDeclSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawTokenListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = TokenListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .tokenList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawTokenSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .tokenList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawTokenSyntax] {
    layoutView.children.map { RawTokenSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawNonEmptyTokenListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = NonEmptyTokenListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .nonEmptyTokenList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawTokenSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .nonEmptyTokenList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawTokenSyntax] {
    layoutView.children.map { RawTokenSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawCustomAttributeSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = CustomAttributeSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .customAttribute
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeAtSignToken: RawUnexpectedNodesSyntax? = nil,
    atSignToken: RawTokenSyntax,
    _ unexpectedBetweenAtSignTokenAndAttributeName: RawUnexpectedNodesSyntax? = nil,
    attributeName: RawTypeSyntax,
    _ unexpectedBetweenAttributeNameAndLeftParen: RawUnexpectedNodesSyntax? = nil,
    leftParen: RawTokenSyntax?,
    _ unexpectedBetweenLeftParenAndArgumentList: RawUnexpectedNodesSyntax? = nil,
    argumentList: RawTupleExprElementListSyntax?,
    _ unexpectedBetweenArgumentListAndRightParen: RawUnexpectedNodesSyntax? = nil,
    rightParen: RawTokenSyntax?,
    _ unexpectedAfterRightParen: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .customAttribute, uninitializedCount: 11, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeAtSignToken?.raw
      layout[1] = atSignToken.raw
      layout[2] = unexpectedBetweenAtSignTokenAndAttributeName?.raw
      layout[3] = attributeName.raw
      layout[4] = unexpectedBetweenAttributeNameAndLeftParen?.raw
      layout[5] = leftParen?.raw
      layout[6] = unexpectedBetweenLeftParenAndArgumentList?.raw
      layout[7] = argumentList?.raw
      layout[8] = unexpectedBetweenArgumentListAndRightParen?.raw
      layout[9] = rightParen?.raw
      layout[10] = unexpectedAfterRightParen?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeAtSignToken: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeAtSignToken(_ unexpectedBeforeAtSignToken: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawCustomAttributeSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeAtSignToken.map(RawSyntax.init), arena: arena).as(RawCustomAttributeSyntax.self)!
  }
  public var atSignToken: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withAtSignToken(_ atSignToken: RawTokenSyntax, arena: SyntaxArena) -> RawCustomAttributeSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(atSignToken), arena: arena).as(RawCustomAttributeSyntax.self)!
  }
  public var unexpectedBetweenAtSignTokenAndAttributeName: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAtSignTokenAndAttributeName(_ unexpectedBetweenAtSignTokenAndAttributeName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawCustomAttributeSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenAtSignTokenAndAttributeName.map(RawSyntax.init), arena: arena).as(RawCustomAttributeSyntax.self)!
  }
  public var attributeName: RawTypeSyntax {
    layoutView.children[3].map(RawTypeSyntax.init(raw:))!
  }
  public func withAttributeName(_ attributeName: RawTypeSyntax, arena: SyntaxArena) -> RawCustomAttributeSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(attributeName), arena: arena).as(RawCustomAttributeSyntax.self)!
  }
  public var unexpectedBetweenAttributeNameAndLeftParen: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAttributeNameAndLeftParen(_ unexpectedBetweenAttributeNameAndLeftParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawCustomAttributeSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenAttributeNameAndLeftParen.map(RawSyntax.init), arena: arena).as(RawCustomAttributeSyntax.self)!
  }
  public var leftParen: RawTokenSyntax? {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))
  }
  public func withLeftParen(_ leftParen: RawTokenSyntax?, arena: SyntaxArena) -> RawCustomAttributeSyntax {
    return layoutView.replacingChild(at: 5, with: leftParen.map(RawSyntax.init), arena: arena).as(RawCustomAttributeSyntax.self)!
  }
  public var unexpectedBetweenLeftParenAndArgumentList: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftParenAndArgumentList(_ unexpectedBetweenLeftParenAndArgumentList: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawCustomAttributeSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenLeftParenAndArgumentList.map(RawSyntax.init), arena: arena).as(RawCustomAttributeSyntax.self)!
  }
  public var argumentList: RawTupleExprElementListSyntax? {
    layoutView.children[7].map(RawTupleExprElementListSyntax.init(raw:))
  }
  public func withArgumentList(_ argumentList: RawTupleExprElementListSyntax?, arena: SyntaxArena) -> RawCustomAttributeSyntax {
    return layoutView.replacingChild(at: 7, with: argumentList.map(RawSyntax.init), arena: arena).as(RawCustomAttributeSyntax.self)!
  }
  public var unexpectedBetweenArgumentListAndRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenArgumentListAndRightParen(_ unexpectedBetweenArgumentListAndRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawCustomAttributeSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenArgumentListAndRightParen.map(RawSyntax.init), arena: arena).as(RawCustomAttributeSyntax.self)!
  }
  public var rightParen: RawTokenSyntax? {
    layoutView.children[9].map(RawTokenSyntax.init(raw:))
  }
  public func withRightParen(_ rightParen: RawTokenSyntax?, arena: SyntaxArena) -> RawCustomAttributeSyntax {
    return layoutView.replacingChild(at: 9, with: rightParen.map(RawSyntax.init), arena: arena).as(RawCustomAttributeSyntax.self)!
  }
  public var unexpectedAfterRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightParen(_ unexpectedAfterRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawCustomAttributeSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedAfterRightParen.map(RawSyntax.init), arena: arena).as(RawCustomAttributeSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawAttributeSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public enum Argument: RawSyntaxNodeProtocol {
    case `token`(RawTokenSyntax)
    case `stringExpr`(RawStringLiteralExprSyntax)
    case `availability`(RawAvailabilitySpecListSyntax)
    case `specializeArguments`(RawSpecializeAttributeSpecListSyntax)
    case `objCName`(RawObjCSelectorSyntax)
    case `implementsArguments`(RawImplementsAttributeArgumentsSyntax)
    case `differentiableArguments`(RawDifferentiableAttributeArgumentsSyntax)
    case `derivativeRegistrationArguments`(RawDerivativeRegistrationAttributeArgumentsSyntax)
    case `namedAttributeString`(RawNamedAttributeStringArgumentSyntax)
    case `backDeployArguments`(RawBackDeployAttributeSpecListSyntax)
    case `conventionArguments`(RawConventionAttributeArgumentsSyntax)
    case `conventionWitnessMethodArguments`(RawConventionWitnessMethodAttributeArgumentsSyntax)
    case `opaqueReturnTypeOfAttributeArguments`(RawOpaqueReturnTypeOfAttributeArgumentsSyntax)
    case `tokenList`(RawTokenListSyntax)

    public static func isKindOf(_ raw: RawSyntax) -> Bool {
      return RawTokenSyntax.isKindOf(raw) || RawStringLiteralExprSyntax.isKindOf(raw) || RawAvailabilitySpecListSyntax.isKindOf(raw) || RawSpecializeAttributeSpecListSyntax.isKindOf(raw) || RawObjCSelectorSyntax.isKindOf(raw) || RawImplementsAttributeArgumentsSyntax.isKindOf(raw) || RawDifferentiableAttributeArgumentsSyntax.isKindOf(raw) || RawDerivativeRegistrationAttributeArgumentsSyntax.isKindOf(raw) || RawNamedAttributeStringArgumentSyntax.isKindOf(raw) || RawBackDeployAttributeSpecListSyntax.isKindOf(raw) || RawConventionAttributeArgumentsSyntax.isKindOf(raw) || RawConventionWitnessMethodAttributeArgumentsSyntax.isKindOf(raw) || RawOpaqueReturnTypeOfAttributeArgumentsSyntax.isKindOf(raw) || RawTokenListSyntax.isKindOf(raw)
    }

    public var raw: RawSyntax {
      switch self {
      case .token(let node): return node.raw
      case .stringExpr(let node): return node.raw
      case .availability(let node): return node.raw
      case .specializeArguments(let node): return node.raw
      case .objCName(let node): return node.raw
      case .implementsArguments(let node): return node.raw
      case .differentiableArguments(let node): return node.raw
      case .derivativeRegistrationArguments(let node): return node.raw
      case .namedAttributeString(let node): return node.raw
      case .backDeployArguments(let node): return node.raw
      case .conventionArguments(let node): return node.raw
      case .conventionWitnessMethodArguments(let node): return node.raw
      case .opaqueReturnTypeOfAttributeArguments(let node): return node.raw
      case .tokenList(let node): return node.raw
      }
    }

    public init?<T>(_ other: T) where T : RawSyntaxNodeProtocol {
      if let node = RawTokenSyntax(other) {
        self = .token(node)
        return
      }
      if let node = RawStringLiteralExprSyntax(other) {
        self = .stringExpr(node)
        return
      }
      if let node = RawAvailabilitySpecListSyntax(other) {
        self = .availability(node)
        return
      }
      if let node = RawSpecializeAttributeSpecListSyntax(other) {
        self = .specializeArguments(node)
        return
      }
      if let node = RawObjCSelectorSyntax(other) {
        self = .objCName(node)
        return
      }
      if let node = RawImplementsAttributeArgumentsSyntax(other) {
        self = .implementsArguments(node)
        return
      }
      if let node = RawDifferentiableAttributeArgumentsSyntax(other) {
        self = .differentiableArguments(node)
        return
      }
      if let node = RawDerivativeRegistrationAttributeArgumentsSyntax(other) {
        self = .derivativeRegistrationArguments(node)
        return
      }
      if let node = RawNamedAttributeStringArgumentSyntax(other) {
        self = .namedAttributeString(node)
        return
      }
      if let node = RawBackDeployAttributeSpecListSyntax(other) {
        self = .backDeployArguments(node)
        return
      }
      if let node = RawConventionAttributeArgumentsSyntax(other) {
        self = .conventionArguments(node)
        return
      }
      if let node = RawConventionWitnessMethodAttributeArgumentsSyntax(other) {
        self = .conventionWitnessMethodArguments(node)
        return
      }
      if let node = RawOpaqueReturnTypeOfAttributeArgumentsSyntax(other) {
        self = .opaqueReturnTypeOfAttributeArguments(node)
        return
      }
      if let node = RawTokenListSyntax(other) {
        self = .tokenList(node)
        return
      }
      return nil
    }
  }

  public typealias SyntaxType = AttributeSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .attribute
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeAtSignToken: RawUnexpectedNodesSyntax? = nil,
    atSignToken: RawTokenSyntax,
    _ unexpectedBetweenAtSignTokenAndAttributeName: RawUnexpectedNodesSyntax? = nil,
    attributeName: RawTokenSyntax,
    _ unexpectedBetweenAttributeNameAndLeftParen: RawUnexpectedNodesSyntax? = nil,
    leftParen: RawTokenSyntax?,
    _ unexpectedBetweenLeftParenAndArgument: RawUnexpectedNodesSyntax? = nil,
    argument: Argument?,
    _ unexpectedBetweenArgumentAndRightParen: RawUnexpectedNodesSyntax? = nil,
    rightParen: RawTokenSyntax?,
    _ unexpectedBetweenRightParenAndTokenList: RawUnexpectedNodesSyntax? = nil,
    tokenList: RawTokenListSyntax?,
    _ unexpectedAfterTokenList: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .attribute, uninitializedCount: 13, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeAtSignToken?.raw
      layout[1] = atSignToken.raw
      layout[2] = unexpectedBetweenAtSignTokenAndAttributeName?.raw
      layout[3] = attributeName.raw
      layout[4] = unexpectedBetweenAttributeNameAndLeftParen?.raw
      layout[5] = leftParen?.raw
      layout[6] = unexpectedBetweenLeftParenAndArgument?.raw
      layout[7] = argument?.raw
      layout[8] = unexpectedBetweenArgumentAndRightParen?.raw
      layout[9] = rightParen?.raw
      layout[10] = unexpectedBetweenRightParenAndTokenList?.raw
      layout[11] = tokenList?.raw
      layout[12] = unexpectedAfterTokenList?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeAtSignToken: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeAtSignToken(_ unexpectedBeforeAtSignToken: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAttributeSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeAtSignToken.map(RawSyntax.init), arena: arena).as(RawAttributeSyntax.self)!
  }
  public var atSignToken: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withAtSignToken(_ atSignToken: RawTokenSyntax, arena: SyntaxArena) -> RawAttributeSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(atSignToken), arena: arena).as(RawAttributeSyntax.self)!
  }
  public var unexpectedBetweenAtSignTokenAndAttributeName: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAtSignTokenAndAttributeName(_ unexpectedBetweenAtSignTokenAndAttributeName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAttributeSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenAtSignTokenAndAttributeName.map(RawSyntax.init), arena: arena).as(RawAttributeSyntax.self)!
  }
  public var attributeName: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withAttributeName(_ attributeName: RawTokenSyntax, arena: SyntaxArena) -> RawAttributeSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(attributeName), arena: arena).as(RawAttributeSyntax.self)!
  }
  public var unexpectedBetweenAttributeNameAndLeftParen: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAttributeNameAndLeftParen(_ unexpectedBetweenAttributeNameAndLeftParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAttributeSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenAttributeNameAndLeftParen.map(RawSyntax.init), arena: arena).as(RawAttributeSyntax.self)!
  }
  public var leftParen: RawTokenSyntax? {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))
  }
  public func withLeftParen(_ leftParen: RawTokenSyntax?, arena: SyntaxArena) -> RawAttributeSyntax {
    return layoutView.replacingChild(at: 5, with: leftParen.map(RawSyntax.init), arena: arena).as(RawAttributeSyntax.self)!
  }
  public var unexpectedBetweenLeftParenAndArgument: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftParenAndArgument(_ unexpectedBetweenLeftParenAndArgument: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAttributeSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenLeftParenAndArgument.map(RawSyntax.init), arena: arena).as(RawAttributeSyntax.self)!
  }
  public var argument: RawSyntax? {
    layoutView.children[7]
  }
  public func withArgument(_ argument: RawSyntax?, arena: SyntaxArena) -> RawAttributeSyntax {
    return layoutView.replacingChild(at: 7, with: argument.map(RawSyntax.init), arena: arena).as(RawAttributeSyntax.self)!
  }
  public var unexpectedBetweenArgumentAndRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenArgumentAndRightParen(_ unexpectedBetweenArgumentAndRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAttributeSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenArgumentAndRightParen.map(RawSyntax.init), arena: arena).as(RawAttributeSyntax.self)!
  }
  public var rightParen: RawTokenSyntax? {
    layoutView.children[9].map(RawTokenSyntax.init(raw:))
  }
  public func withRightParen(_ rightParen: RawTokenSyntax?, arena: SyntaxArena) -> RawAttributeSyntax {
    return layoutView.replacingChild(at: 9, with: rightParen.map(RawSyntax.init), arena: arena).as(RawAttributeSyntax.self)!
  }
  public var unexpectedBetweenRightParenAndTokenList: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenRightParenAndTokenList(_ unexpectedBetweenRightParenAndTokenList: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAttributeSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedBetweenRightParenAndTokenList.map(RawSyntax.init), arena: arena).as(RawAttributeSyntax.self)!
  }
  public var tokenList: RawTokenListSyntax? {
    layoutView.children[11].map(RawTokenListSyntax.init(raw:))
  }
  public func withTokenList(_ tokenList: RawTokenListSyntax?, arena: SyntaxArena) -> RawAttributeSyntax {
    return layoutView.replacingChild(at: 11, with: tokenList.map(RawSyntax.init), arena: arena).as(RawAttributeSyntax.self)!
  }
  public var unexpectedAfterTokenList: RawUnexpectedNodesSyntax? {
    layoutView.children[12].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterTokenList(_ unexpectedAfterTokenList: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAttributeSyntax {
    return layoutView.replacingChild(at: 12, with: unexpectedAfterTokenList.map(RawSyntax.init), arena: arena).as(RawAttributeSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawAttributeListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public enum Element: RawSyntaxNodeProtocol {
    case `attribute`(RawAttributeSyntax)
    case `customAttribute`(RawCustomAttributeSyntax)
    case `ifConfigDecl`(RawIfConfigDeclSyntax)

    public static func isKindOf(_ raw: RawSyntax) -> Bool {
      return RawAttributeSyntax.isKindOf(raw) || RawCustomAttributeSyntax.isKindOf(raw) || RawIfConfigDeclSyntax.isKindOf(raw)
    }

    public var raw: RawSyntax {
      switch self {
      case .attribute(let node): return node.raw
      case .customAttribute(let node): return node.raw
      case .ifConfigDecl(let node): return node.raw
      }
    }

    public init?<T>(_ other: T) where T : RawSyntaxNodeProtocol {
      if let node = RawAttributeSyntax(other) {
        self = .attribute(node)
        return
      }
      if let node = RawCustomAttributeSyntax(other) {
        self = .customAttribute(node)
        return
      }
      if let node = RawIfConfigDeclSyntax(other) {
        self = .ifConfigDecl(node)
        return
      }
      return nil
    }
  }

  public typealias SyntaxType = AttributeListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .attributeList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [Element], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .attributeList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawSyntax] {
    layoutView.children.map { RawSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawSpecializeAttributeSpecListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public enum Element: RawSyntaxNodeProtocol {
    case `labeledSpecializeEntry`(RawLabeledSpecializeEntrySyntax)
    case `availabilityEntry`(RawAvailabilityEntrySyntax)
    case `targetFunctionEntry`(RawTargetFunctionEntrySyntax)
    case `genericWhereClause`(RawGenericWhereClauseSyntax)

    public static func isKindOf(_ raw: RawSyntax) -> Bool {
      return RawLabeledSpecializeEntrySyntax.isKindOf(raw) || RawAvailabilityEntrySyntax.isKindOf(raw) || RawTargetFunctionEntrySyntax.isKindOf(raw) || RawGenericWhereClauseSyntax.isKindOf(raw)
    }

    public var raw: RawSyntax {
      switch self {
      case .labeledSpecializeEntry(let node): return node.raw
      case .availabilityEntry(let node): return node.raw
      case .targetFunctionEntry(let node): return node.raw
      case .genericWhereClause(let node): return node.raw
      }
    }

    public init?<T>(_ other: T) where T : RawSyntaxNodeProtocol {
      if let node = RawLabeledSpecializeEntrySyntax(other) {
        self = .labeledSpecializeEntry(node)
        return
      }
      if let node = RawAvailabilityEntrySyntax(other) {
        self = .availabilityEntry(node)
        return
      }
      if let node = RawTargetFunctionEntrySyntax(other) {
        self = .targetFunctionEntry(node)
        return
      }
      if let node = RawGenericWhereClauseSyntax(other) {
        self = .genericWhereClause(node)
        return
      }
      return nil
    }
  }

  public typealias SyntaxType = SpecializeAttributeSpecListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .specializeAttributeSpecList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [Element], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .specializeAttributeSpecList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawSyntax] {
    layoutView.children.map { RawSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawAvailabilityEntrySyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = AvailabilityEntrySyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .availabilityEntry
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeLabel: RawUnexpectedNodesSyntax? = nil,
    label: RawTokenSyntax,
    _ unexpectedBetweenLabelAndColon: RawUnexpectedNodesSyntax? = nil,
    colon: RawTokenSyntax,
    _ unexpectedBetweenColonAndAvailabilityList: RawUnexpectedNodesSyntax? = nil,
    availabilityList: RawAvailabilitySpecListSyntax,
    _ unexpectedBetweenAvailabilityListAndSemicolon: RawUnexpectedNodesSyntax? = nil,
    semicolon: RawTokenSyntax,
    _ unexpectedAfterSemicolon: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .availabilityEntry, uninitializedCount: 9, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeLabel?.raw
      layout[1] = label.raw
      layout[2] = unexpectedBetweenLabelAndColon?.raw
      layout[3] = colon.raw
      layout[4] = unexpectedBetweenColonAndAvailabilityList?.raw
      layout[5] = availabilityList.raw
      layout[6] = unexpectedBetweenAvailabilityListAndSemicolon?.raw
      layout[7] = semicolon.raw
      layout[8] = unexpectedAfterSemicolon?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeLabel: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeLabel(_ unexpectedBeforeLabel: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAvailabilityEntrySyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeLabel.map(RawSyntax.init), arena: arena).as(RawAvailabilityEntrySyntax.self)!
  }
  public var label: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withLabel(_ label: RawTokenSyntax, arena: SyntaxArena) -> RawAvailabilityEntrySyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(label), arena: arena).as(RawAvailabilityEntrySyntax.self)!
  }
  public var unexpectedBetweenLabelAndColon: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLabelAndColon(_ unexpectedBetweenLabelAndColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAvailabilityEntrySyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenLabelAndColon.map(RawSyntax.init), arena: arena).as(RawAvailabilityEntrySyntax.self)!
  }
  public var colon: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withColon(_ colon: RawTokenSyntax, arena: SyntaxArena) -> RawAvailabilityEntrySyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(colon), arena: arena).as(RawAvailabilityEntrySyntax.self)!
  }
  public var unexpectedBetweenColonAndAvailabilityList: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenColonAndAvailabilityList(_ unexpectedBetweenColonAndAvailabilityList: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAvailabilityEntrySyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenColonAndAvailabilityList.map(RawSyntax.init), arena: arena).as(RawAvailabilityEntrySyntax.self)!
  }
  public var availabilityList: RawAvailabilitySpecListSyntax {
    layoutView.children[5].map(RawAvailabilitySpecListSyntax.init(raw:))!
  }
  public func withAvailabilityList(_ availabilityList: RawAvailabilitySpecListSyntax, arena: SyntaxArena) -> RawAvailabilityEntrySyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(availabilityList), arena: arena).as(RawAvailabilityEntrySyntax.self)!
  }
  public var unexpectedBetweenAvailabilityListAndSemicolon: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAvailabilityListAndSemicolon(_ unexpectedBetweenAvailabilityListAndSemicolon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAvailabilityEntrySyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenAvailabilityListAndSemicolon.map(RawSyntax.init), arena: arena).as(RawAvailabilityEntrySyntax.self)!
  }
  public var semicolon: RawTokenSyntax {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))!
  }
  public func withSemicolon(_ semicolon: RawTokenSyntax, arena: SyntaxArena) -> RawAvailabilityEntrySyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(semicolon), arena: arena).as(RawAvailabilityEntrySyntax.self)!
  }
  public var unexpectedAfterSemicolon: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterSemicolon(_ unexpectedAfterSemicolon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAvailabilityEntrySyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedAfterSemicolon.map(RawSyntax.init), arena: arena).as(RawAvailabilityEntrySyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawLabeledSpecializeEntrySyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = LabeledSpecializeEntrySyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .labeledSpecializeEntry
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeLabel: RawUnexpectedNodesSyntax? = nil,
    label: RawTokenSyntax,
    _ unexpectedBetweenLabelAndColon: RawUnexpectedNodesSyntax? = nil,
    colon: RawTokenSyntax,
    _ unexpectedBetweenColonAndValue: RawUnexpectedNodesSyntax? = nil,
    value: RawTokenSyntax,
    _ unexpectedBetweenValueAndTrailingComma: RawUnexpectedNodesSyntax? = nil,
    trailingComma: RawTokenSyntax?,
    _ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .labeledSpecializeEntry, uninitializedCount: 9, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeLabel?.raw
      layout[1] = label.raw
      layout[2] = unexpectedBetweenLabelAndColon?.raw
      layout[3] = colon.raw
      layout[4] = unexpectedBetweenColonAndValue?.raw
      layout[5] = value.raw
      layout[6] = unexpectedBetweenValueAndTrailingComma?.raw
      layout[7] = trailingComma?.raw
      layout[8] = unexpectedAfterTrailingComma?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeLabel: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeLabel(_ unexpectedBeforeLabel: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawLabeledSpecializeEntrySyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeLabel.map(RawSyntax.init), arena: arena).as(RawLabeledSpecializeEntrySyntax.self)!
  }
  public var label: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withLabel(_ label: RawTokenSyntax, arena: SyntaxArena) -> RawLabeledSpecializeEntrySyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(label), arena: arena).as(RawLabeledSpecializeEntrySyntax.self)!
  }
  public var unexpectedBetweenLabelAndColon: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLabelAndColon(_ unexpectedBetweenLabelAndColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawLabeledSpecializeEntrySyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenLabelAndColon.map(RawSyntax.init), arena: arena).as(RawLabeledSpecializeEntrySyntax.self)!
  }
  public var colon: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withColon(_ colon: RawTokenSyntax, arena: SyntaxArena) -> RawLabeledSpecializeEntrySyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(colon), arena: arena).as(RawLabeledSpecializeEntrySyntax.self)!
  }
  public var unexpectedBetweenColonAndValue: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenColonAndValue(_ unexpectedBetweenColonAndValue: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawLabeledSpecializeEntrySyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenColonAndValue.map(RawSyntax.init), arena: arena).as(RawLabeledSpecializeEntrySyntax.self)!
  }
  public var value: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withValue(_ value: RawTokenSyntax, arena: SyntaxArena) -> RawLabeledSpecializeEntrySyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(value), arena: arena).as(RawLabeledSpecializeEntrySyntax.self)!
  }
  public var unexpectedBetweenValueAndTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenValueAndTrailingComma(_ unexpectedBetweenValueAndTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawLabeledSpecializeEntrySyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenValueAndTrailingComma.map(RawSyntax.init), arena: arena).as(RawLabeledSpecializeEntrySyntax.self)!
  }
  public var trailingComma: RawTokenSyntax? {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))
  }
  public func withTrailingComma(_ trailingComma: RawTokenSyntax?, arena: SyntaxArena) -> RawLabeledSpecializeEntrySyntax {
    return layoutView.replacingChild(at: 7, with: trailingComma.map(RawSyntax.init), arena: arena).as(RawLabeledSpecializeEntrySyntax.self)!
  }
  public var unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterTrailingComma(_ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawLabeledSpecializeEntrySyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedAfterTrailingComma.map(RawSyntax.init), arena: arena).as(RawLabeledSpecializeEntrySyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawTargetFunctionEntrySyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = TargetFunctionEntrySyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .targetFunctionEntry
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeLabel: RawUnexpectedNodesSyntax? = nil,
    label: RawTokenSyntax,
    _ unexpectedBetweenLabelAndColon: RawUnexpectedNodesSyntax? = nil,
    colon: RawTokenSyntax,
    _ unexpectedBetweenColonAndDeclname: RawUnexpectedNodesSyntax? = nil,
    declname: RawDeclNameSyntax,
    _ unexpectedBetweenDeclnameAndTrailingComma: RawUnexpectedNodesSyntax? = nil,
    trailingComma: RawTokenSyntax?,
    _ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .targetFunctionEntry, uninitializedCount: 9, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeLabel?.raw
      layout[1] = label.raw
      layout[2] = unexpectedBetweenLabelAndColon?.raw
      layout[3] = colon.raw
      layout[4] = unexpectedBetweenColonAndDeclname?.raw
      layout[5] = declname.raw
      layout[6] = unexpectedBetweenDeclnameAndTrailingComma?.raw
      layout[7] = trailingComma?.raw
      layout[8] = unexpectedAfterTrailingComma?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeLabel: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeLabel(_ unexpectedBeforeLabel: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTargetFunctionEntrySyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeLabel.map(RawSyntax.init), arena: arena).as(RawTargetFunctionEntrySyntax.self)!
  }
  public var label: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withLabel(_ label: RawTokenSyntax, arena: SyntaxArena) -> RawTargetFunctionEntrySyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(label), arena: arena).as(RawTargetFunctionEntrySyntax.self)!
  }
  public var unexpectedBetweenLabelAndColon: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLabelAndColon(_ unexpectedBetweenLabelAndColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTargetFunctionEntrySyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenLabelAndColon.map(RawSyntax.init), arena: arena).as(RawTargetFunctionEntrySyntax.self)!
  }
  public var colon: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withColon(_ colon: RawTokenSyntax, arena: SyntaxArena) -> RawTargetFunctionEntrySyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(colon), arena: arena).as(RawTargetFunctionEntrySyntax.self)!
  }
  public var unexpectedBetweenColonAndDeclname: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenColonAndDeclname(_ unexpectedBetweenColonAndDeclname: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTargetFunctionEntrySyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenColonAndDeclname.map(RawSyntax.init), arena: arena).as(RawTargetFunctionEntrySyntax.self)!
  }
  public var declname: RawDeclNameSyntax {
    layoutView.children[5].map(RawDeclNameSyntax.init(raw:))!
  }
  public func withDeclname(_ declname: RawDeclNameSyntax, arena: SyntaxArena) -> RawTargetFunctionEntrySyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(declname), arena: arena).as(RawTargetFunctionEntrySyntax.self)!
  }
  public var unexpectedBetweenDeclnameAndTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenDeclnameAndTrailingComma(_ unexpectedBetweenDeclnameAndTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTargetFunctionEntrySyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenDeclnameAndTrailingComma.map(RawSyntax.init), arena: arena).as(RawTargetFunctionEntrySyntax.self)!
  }
  public var trailingComma: RawTokenSyntax? {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))
  }
  public func withTrailingComma(_ trailingComma: RawTokenSyntax?, arena: SyntaxArena) -> RawTargetFunctionEntrySyntax {
    return layoutView.replacingChild(at: 7, with: trailingComma.map(RawSyntax.init), arena: arena).as(RawTargetFunctionEntrySyntax.self)!
  }
  public var unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterTrailingComma(_ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTargetFunctionEntrySyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedAfterTrailingComma.map(RawSyntax.init), arena: arena).as(RawTargetFunctionEntrySyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawNamedAttributeStringArgumentSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public enum StringOrDeclname: RawSyntaxNodeProtocol {
    case `string`(RawTokenSyntax)
    case `declname`(RawDeclNameSyntax)

    public static func isKindOf(_ raw: RawSyntax) -> Bool {
      return RawTokenSyntax.isKindOf(raw) || RawDeclNameSyntax.isKindOf(raw)
    }

    public var raw: RawSyntax {
      switch self {
      case .string(let node): return node.raw
      case .declname(let node): return node.raw
      }
    }

    public init?<T>(_ other: T) where T : RawSyntaxNodeProtocol {
      if let node = RawTokenSyntax(other) {
        self = .string(node)
        return
      }
      if let node = RawDeclNameSyntax(other) {
        self = .declname(node)
        return
      }
      return nil
    }
  }

  public typealias SyntaxType = NamedAttributeStringArgumentSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .namedAttributeStringArgument
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeNameTok: RawUnexpectedNodesSyntax? = nil,
    nameTok: RawTokenSyntax,
    _ unexpectedBetweenNameTokAndColon: RawUnexpectedNodesSyntax? = nil,
    colon: RawTokenSyntax,
    _ unexpectedBetweenColonAndStringOrDeclname: RawUnexpectedNodesSyntax? = nil,
    stringOrDeclname: StringOrDeclname,
    _ unexpectedAfterStringOrDeclname: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .namedAttributeStringArgument, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeNameTok?.raw
      layout[1] = nameTok.raw
      layout[2] = unexpectedBetweenNameTokAndColon?.raw
      layout[3] = colon.raw
      layout[4] = unexpectedBetweenColonAndStringOrDeclname?.raw
      layout[5] = stringOrDeclname.raw
      layout[6] = unexpectedAfterStringOrDeclname?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeNameTok: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeNameTok(_ unexpectedBeforeNameTok: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawNamedAttributeStringArgumentSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeNameTok.map(RawSyntax.init), arena: arena).as(RawNamedAttributeStringArgumentSyntax.self)!
  }
  public var nameTok: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withNameTok(_ nameTok: RawTokenSyntax, arena: SyntaxArena) -> RawNamedAttributeStringArgumentSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(nameTok), arena: arena).as(RawNamedAttributeStringArgumentSyntax.self)!
  }
  public var unexpectedBetweenNameTokAndColon: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenNameTokAndColon(_ unexpectedBetweenNameTokAndColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawNamedAttributeStringArgumentSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenNameTokAndColon.map(RawSyntax.init), arena: arena).as(RawNamedAttributeStringArgumentSyntax.self)!
  }
  public var colon: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withColon(_ colon: RawTokenSyntax, arena: SyntaxArena) -> RawNamedAttributeStringArgumentSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(colon), arena: arena).as(RawNamedAttributeStringArgumentSyntax.self)!
  }
  public var unexpectedBetweenColonAndStringOrDeclname: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenColonAndStringOrDeclname(_ unexpectedBetweenColonAndStringOrDeclname: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawNamedAttributeStringArgumentSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenColonAndStringOrDeclname.map(RawSyntax.init), arena: arena).as(RawNamedAttributeStringArgumentSyntax.self)!
  }
  public var stringOrDeclname: RawSyntax {
    layoutView.children[5]!
  }
  public func withStringOrDeclname(_ stringOrDeclname: RawSyntax, arena: SyntaxArena) -> RawNamedAttributeStringArgumentSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(stringOrDeclname), arena: arena).as(RawNamedAttributeStringArgumentSyntax.self)!
  }
  public var unexpectedAfterStringOrDeclname: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterStringOrDeclname(_ unexpectedAfterStringOrDeclname: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawNamedAttributeStringArgumentSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterStringOrDeclname.map(RawSyntax.init), arena: arena).as(RawNamedAttributeStringArgumentSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawDeclNameSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = DeclNameSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .declName
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeDeclBaseName: RawUnexpectedNodesSyntax? = nil,
    declBaseName: RawTokenSyntax,
    _ unexpectedBetweenDeclBaseNameAndDeclNameArguments: RawUnexpectedNodesSyntax? = nil,
    declNameArguments: RawDeclNameArgumentsSyntax?,
    _ unexpectedAfterDeclNameArguments: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .declName, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeDeclBaseName?.raw
      layout[1] = declBaseName.raw
      layout[2] = unexpectedBetweenDeclBaseNameAndDeclNameArguments?.raw
      layout[3] = declNameArguments?.raw
      layout[4] = unexpectedAfterDeclNameArguments?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeDeclBaseName: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeDeclBaseName(_ unexpectedBeforeDeclBaseName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDeclNameSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeDeclBaseName.map(RawSyntax.init), arena: arena).as(RawDeclNameSyntax.self)!
  }
  public var declBaseName: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withDeclBaseName(_ declBaseName: RawTokenSyntax, arena: SyntaxArena) -> RawDeclNameSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(declBaseName), arena: arena).as(RawDeclNameSyntax.self)!
  }
  public var unexpectedBetweenDeclBaseNameAndDeclNameArguments: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenDeclBaseNameAndDeclNameArguments(_ unexpectedBetweenDeclBaseNameAndDeclNameArguments: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDeclNameSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenDeclBaseNameAndDeclNameArguments.map(RawSyntax.init), arena: arena).as(RawDeclNameSyntax.self)!
  }
  public var declNameArguments: RawDeclNameArgumentsSyntax? {
    layoutView.children[3].map(RawDeclNameArgumentsSyntax.init(raw:))
  }
  public func withDeclNameArguments(_ declNameArguments: RawDeclNameArgumentsSyntax?, arena: SyntaxArena) -> RawDeclNameSyntax {
    return layoutView.replacingChild(at: 3, with: declNameArguments.map(RawSyntax.init), arena: arena).as(RawDeclNameSyntax.self)!
  }
  public var unexpectedAfterDeclNameArguments: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterDeclNameArguments(_ unexpectedAfterDeclNameArguments: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDeclNameSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterDeclNameArguments.map(RawSyntax.init), arena: arena).as(RawDeclNameSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawImplementsAttributeArgumentsSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ImplementsAttributeArgumentsSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .implementsAttributeArguments
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeType: RawUnexpectedNodesSyntax? = nil,
    type: RawTypeSyntax,
    _ unexpectedBetweenTypeAndComma: RawUnexpectedNodesSyntax? = nil,
    comma: RawTokenSyntax,
    _ unexpectedBetweenCommaAndDeclBaseName: RawUnexpectedNodesSyntax? = nil,
    declBaseName: RawTokenSyntax,
    _ unexpectedBetweenDeclBaseNameAndDeclNameArguments: RawUnexpectedNodesSyntax? = nil,
    declNameArguments: RawDeclNameArgumentsSyntax?,
    _ unexpectedAfterDeclNameArguments: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .implementsAttributeArguments, uninitializedCount: 9, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeType?.raw
      layout[1] = type.raw
      layout[2] = unexpectedBetweenTypeAndComma?.raw
      layout[3] = comma.raw
      layout[4] = unexpectedBetweenCommaAndDeclBaseName?.raw
      layout[5] = declBaseName.raw
      layout[6] = unexpectedBetweenDeclBaseNameAndDeclNameArguments?.raw
      layout[7] = declNameArguments?.raw
      layout[8] = unexpectedAfterDeclNameArguments?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeType: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeType(_ unexpectedBeforeType: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawImplementsAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeType.map(RawSyntax.init), arena: arena).as(RawImplementsAttributeArgumentsSyntax.self)!
  }
  public var type: RawTypeSyntax {
    layoutView.children[1].map(RawTypeSyntax.init(raw:))!
  }
  public func withType(_ type: RawTypeSyntax, arena: SyntaxArena) -> RawImplementsAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(type), arena: arena).as(RawImplementsAttributeArgumentsSyntax.self)!
  }
  public var unexpectedBetweenTypeAndComma: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenTypeAndComma(_ unexpectedBetweenTypeAndComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawImplementsAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenTypeAndComma.map(RawSyntax.init), arena: arena).as(RawImplementsAttributeArgumentsSyntax.self)!
  }
  public var comma: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withComma(_ comma: RawTokenSyntax, arena: SyntaxArena) -> RawImplementsAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(comma), arena: arena).as(RawImplementsAttributeArgumentsSyntax.self)!
  }
  public var unexpectedBetweenCommaAndDeclBaseName: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenCommaAndDeclBaseName(_ unexpectedBetweenCommaAndDeclBaseName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawImplementsAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenCommaAndDeclBaseName.map(RawSyntax.init), arena: arena).as(RawImplementsAttributeArgumentsSyntax.self)!
  }
  public var declBaseName: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withDeclBaseName(_ declBaseName: RawTokenSyntax, arena: SyntaxArena) -> RawImplementsAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(declBaseName), arena: arena).as(RawImplementsAttributeArgumentsSyntax.self)!
  }
  public var unexpectedBetweenDeclBaseNameAndDeclNameArguments: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenDeclBaseNameAndDeclNameArguments(_ unexpectedBetweenDeclBaseNameAndDeclNameArguments: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawImplementsAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenDeclBaseNameAndDeclNameArguments.map(RawSyntax.init), arena: arena).as(RawImplementsAttributeArgumentsSyntax.self)!
  }
  public var declNameArguments: RawDeclNameArgumentsSyntax? {
    layoutView.children[7].map(RawDeclNameArgumentsSyntax.init(raw:))
  }
  public func withDeclNameArguments(_ declNameArguments: RawDeclNameArgumentsSyntax?, arena: SyntaxArena) -> RawImplementsAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 7, with: declNameArguments.map(RawSyntax.init), arena: arena).as(RawImplementsAttributeArgumentsSyntax.self)!
  }
  public var unexpectedAfterDeclNameArguments: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterDeclNameArguments(_ unexpectedAfterDeclNameArguments: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawImplementsAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedAfterDeclNameArguments.map(RawSyntax.init), arena: arena).as(RawImplementsAttributeArgumentsSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawObjCSelectorPieceSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ObjCSelectorPieceSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .objCSelectorPiece
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeName: RawUnexpectedNodesSyntax? = nil,
    name: RawTokenSyntax?,
    _ unexpectedBetweenNameAndColon: RawUnexpectedNodesSyntax? = nil,
    colon: RawTokenSyntax?,
    _ unexpectedAfterColon: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .objCSelectorPiece, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeName?.raw
      layout[1] = name?.raw
      layout[2] = unexpectedBetweenNameAndColon?.raw
      layout[3] = colon?.raw
      layout[4] = unexpectedAfterColon?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeName: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeName(_ unexpectedBeforeName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawObjCSelectorPieceSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeName.map(RawSyntax.init), arena: arena).as(RawObjCSelectorPieceSyntax.self)!
  }
  public var name: RawTokenSyntax? {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))
  }
  public func withName(_ name: RawTokenSyntax?, arena: SyntaxArena) -> RawObjCSelectorPieceSyntax {
    return layoutView.replacingChild(at: 1, with: name.map(RawSyntax.init), arena: arena).as(RawObjCSelectorPieceSyntax.self)!
  }
  public var unexpectedBetweenNameAndColon: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenNameAndColon(_ unexpectedBetweenNameAndColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawObjCSelectorPieceSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenNameAndColon.map(RawSyntax.init), arena: arena).as(RawObjCSelectorPieceSyntax.self)!
  }
  public var colon: RawTokenSyntax? {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))
  }
  public func withColon(_ colon: RawTokenSyntax?, arena: SyntaxArena) -> RawObjCSelectorPieceSyntax {
    return layoutView.replacingChild(at: 3, with: colon.map(RawSyntax.init), arena: arena).as(RawObjCSelectorPieceSyntax.self)!
  }
  public var unexpectedAfterColon: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterColon(_ unexpectedAfterColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawObjCSelectorPieceSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterColon.map(RawSyntax.init), arena: arena).as(RawObjCSelectorPieceSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawObjCSelectorSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ObjCSelectorSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .objCSelector
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawObjCSelectorPieceSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .objCSelector, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawObjCSelectorPieceSyntax] {
    layoutView.children.map { RawObjCSelectorPieceSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawDifferentiableAttributeArgumentsSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = DifferentiableAttributeArgumentsSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .differentiableAttributeArguments
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeDiffKind: RawUnexpectedNodesSyntax? = nil,
    diffKind: RawTokenSyntax?,
    _ unexpectedBetweenDiffKindAndDiffKindComma: RawUnexpectedNodesSyntax? = nil,
    diffKindComma: RawTokenSyntax?,
    _ unexpectedBetweenDiffKindCommaAndDiffParams: RawUnexpectedNodesSyntax? = nil,
    diffParams: RawDifferentiabilityParamsClauseSyntax?,
    _ unexpectedBetweenDiffParamsAndDiffParamsComma: RawUnexpectedNodesSyntax? = nil,
    diffParamsComma: RawTokenSyntax?,
    _ unexpectedBetweenDiffParamsCommaAndWhereClause: RawUnexpectedNodesSyntax? = nil,
    whereClause: RawGenericWhereClauseSyntax?,
    _ unexpectedAfterWhereClause: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .differentiableAttributeArguments, uninitializedCount: 11, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeDiffKind?.raw
      layout[1] = diffKind?.raw
      layout[2] = unexpectedBetweenDiffKindAndDiffKindComma?.raw
      layout[3] = diffKindComma?.raw
      layout[4] = unexpectedBetweenDiffKindCommaAndDiffParams?.raw
      layout[5] = diffParams?.raw
      layout[6] = unexpectedBetweenDiffParamsAndDiffParamsComma?.raw
      layout[7] = diffParamsComma?.raw
      layout[8] = unexpectedBetweenDiffParamsCommaAndWhereClause?.raw
      layout[9] = whereClause?.raw
      layout[10] = unexpectedAfterWhereClause?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeDiffKind: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeDiffKind(_ unexpectedBeforeDiffKind: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDifferentiableAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeDiffKind.map(RawSyntax.init), arena: arena).as(RawDifferentiableAttributeArgumentsSyntax.self)!
  }
  public var diffKind: RawTokenSyntax? {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))
  }
  public func withDiffKind(_ diffKind: RawTokenSyntax?, arena: SyntaxArena) -> RawDifferentiableAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 1, with: diffKind.map(RawSyntax.init), arena: arena).as(RawDifferentiableAttributeArgumentsSyntax.self)!
  }
  public var unexpectedBetweenDiffKindAndDiffKindComma: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenDiffKindAndDiffKindComma(_ unexpectedBetweenDiffKindAndDiffKindComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDifferentiableAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenDiffKindAndDiffKindComma.map(RawSyntax.init), arena: arena).as(RawDifferentiableAttributeArgumentsSyntax.self)!
  }
  public var diffKindComma: RawTokenSyntax? {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))
  }
  public func withDiffKindComma(_ diffKindComma: RawTokenSyntax?, arena: SyntaxArena) -> RawDifferentiableAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 3, with: diffKindComma.map(RawSyntax.init), arena: arena).as(RawDifferentiableAttributeArgumentsSyntax.self)!
  }
  public var unexpectedBetweenDiffKindCommaAndDiffParams: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenDiffKindCommaAndDiffParams(_ unexpectedBetweenDiffKindCommaAndDiffParams: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDifferentiableAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenDiffKindCommaAndDiffParams.map(RawSyntax.init), arena: arena).as(RawDifferentiableAttributeArgumentsSyntax.self)!
  }
  public var diffParams: RawDifferentiabilityParamsClauseSyntax? {
    layoutView.children[5].map(RawDifferentiabilityParamsClauseSyntax.init(raw:))
  }
  public func withDiffParams(_ diffParams: RawDifferentiabilityParamsClauseSyntax?, arena: SyntaxArena) -> RawDifferentiableAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 5, with: diffParams.map(RawSyntax.init), arena: arena).as(RawDifferentiableAttributeArgumentsSyntax.self)!
  }
  public var unexpectedBetweenDiffParamsAndDiffParamsComma: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenDiffParamsAndDiffParamsComma(_ unexpectedBetweenDiffParamsAndDiffParamsComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDifferentiableAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenDiffParamsAndDiffParamsComma.map(RawSyntax.init), arena: arena).as(RawDifferentiableAttributeArgumentsSyntax.self)!
  }
  public var diffParamsComma: RawTokenSyntax? {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))
  }
  public func withDiffParamsComma(_ diffParamsComma: RawTokenSyntax?, arena: SyntaxArena) -> RawDifferentiableAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 7, with: diffParamsComma.map(RawSyntax.init), arena: arena).as(RawDifferentiableAttributeArgumentsSyntax.self)!
  }
  public var unexpectedBetweenDiffParamsCommaAndWhereClause: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenDiffParamsCommaAndWhereClause(_ unexpectedBetweenDiffParamsCommaAndWhereClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDifferentiableAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenDiffParamsCommaAndWhereClause.map(RawSyntax.init), arena: arena).as(RawDifferentiableAttributeArgumentsSyntax.self)!
  }
  public var whereClause: RawGenericWhereClauseSyntax? {
    layoutView.children[9].map(RawGenericWhereClauseSyntax.init(raw:))
  }
  public func withWhereClause(_ whereClause: RawGenericWhereClauseSyntax?, arena: SyntaxArena) -> RawDifferentiableAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 9, with: whereClause.map(RawSyntax.init), arena: arena).as(RawDifferentiableAttributeArgumentsSyntax.self)!
  }
  public var unexpectedAfterWhereClause: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterWhereClause(_ unexpectedAfterWhereClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDifferentiableAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedAfterWhereClause.map(RawSyntax.init), arena: arena).as(RawDifferentiableAttributeArgumentsSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawDifferentiabilityParamsClauseSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public enum Parameters: RawSyntaxNodeProtocol {
    case `parameter`(RawDifferentiabilityParamSyntax)
    case `parameterList`(RawDifferentiabilityParamsSyntax)

    public static func isKindOf(_ raw: RawSyntax) -> Bool {
      return RawDifferentiabilityParamSyntax.isKindOf(raw) || RawDifferentiabilityParamsSyntax.isKindOf(raw)
    }

    public var raw: RawSyntax {
      switch self {
      case .parameter(let node): return node.raw
      case .parameterList(let node): return node.raw
      }
    }

    public init?<T>(_ other: T) where T : RawSyntaxNodeProtocol {
      if let node = RawDifferentiabilityParamSyntax(other) {
        self = .parameter(node)
        return
      }
      if let node = RawDifferentiabilityParamsSyntax(other) {
        self = .parameterList(node)
        return
      }
      return nil
    }
  }

  public typealias SyntaxType = DifferentiabilityParamsClauseSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .differentiabilityParamsClause
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeWrtLabel: RawUnexpectedNodesSyntax? = nil,
    wrtLabel: RawTokenSyntax,
    _ unexpectedBetweenWrtLabelAndColon: RawUnexpectedNodesSyntax? = nil,
    colon: RawTokenSyntax,
    _ unexpectedBetweenColonAndParameters: RawUnexpectedNodesSyntax? = nil,
    parameters: Parameters,
    _ unexpectedAfterParameters: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .differentiabilityParamsClause, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeWrtLabel?.raw
      layout[1] = wrtLabel.raw
      layout[2] = unexpectedBetweenWrtLabelAndColon?.raw
      layout[3] = colon.raw
      layout[4] = unexpectedBetweenColonAndParameters?.raw
      layout[5] = parameters.raw
      layout[6] = unexpectedAfterParameters?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeWrtLabel: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeWrtLabel(_ unexpectedBeforeWrtLabel: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDifferentiabilityParamsClauseSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeWrtLabel.map(RawSyntax.init), arena: arena).as(RawDifferentiabilityParamsClauseSyntax.self)!
  }
  public var wrtLabel: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withWrtLabel(_ wrtLabel: RawTokenSyntax, arena: SyntaxArena) -> RawDifferentiabilityParamsClauseSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(wrtLabel), arena: arena).as(RawDifferentiabilityParamsClauseSyntax.self)!
  }
  public var unexpectedBetweenWrtLabelAndColon: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenWrtLabelAndColon(_ unexpectedBetweenWrtLabelAndColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDifferentiabilityParamsClauseSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenWrtLabelAndColon.map(RawSyntax.init), arena: arena).as(RawDifferentiabilityParamsClauseSyntax.self)!
  }
  public var colon: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withColon(_ colon: RawTokenSyntax, arena: SyntaxArena) -> RawDifferentiabilityParamsClauseSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(colon), arena: arena).as(RawDifferentiabilityParamsClauseSyntax.self)!
  }
  public var unexpectedBetweenColonAndParameters: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenColonAndParameters(_ unexpectedBetweenColonAndParameters: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDifferentiabilityParamsClauseSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenColonAndParameters.map(RawSyntax.init), arena: arena).as(RawDifferentiabilityParamsClauseSyntax.self)!
  }
  public var parameters: RawSyntax {
    layoutView.children[5]!
  }
  public func withParameters(_ parameters: RawSyntax, arena: SyntaxArena) -> RawDifferentiabilityParamsClauseSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(parameters), arena: arena).as(RawDifferentiabilityParamsClauseSyntax.self)!
  }
  public var unexpectedAfterParameters: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterParameters(_ unexpectedAfterParameters: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDifferentiabilityParamsClauseSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterParameters.map(RawSyntax.init), arena: arena).as(RawDifferentiabilityParamsClauseSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawDifferentiabilityParamsSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = DifferentiabilityParamsSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .differentiabilityParams
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeLeftParen: RawUnexpectedNodesSyntax? = nil,
    leftParen: RawTokenSyntax,
    _ unexpectedBetweenLeftParenAndDiffParams: RawUnexpectedNodesSyntax? = nil,
    diffParams: RawDifferentiabilityParamListSyntax,
    _ unexpectedBetweenDiffParamsAndRightParen: RawUnexpectedNodesSyntax? = nil,
    rightParen: RawTokenSyntax,
    _ unexpectedAfterRightParen: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .differentiabilityParams, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeLeftParen?.raw
      layout[1] = leftParen.raw
      layout[2] = unexpectedBetweenLeftParenAndDiffParams?.raw
      layout[3] = diffParams.raw
      layout[4] = unexpectedBetweenDiffParamsAndRightParen?.raw
      layout[5] = rightParen.raw
      layout[6] = unexpectedAfterRightParen?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeLeftParen: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeLeftParen(_ unexpectedBeforeLeftParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDifferentiabilityParamsSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeLeftParen.map(RawSyntax.init), arena: arena).as(RawDifferentiabilityParamsSyntax.self)!
  }
  public var leftParen: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeftParen(_ leftParen: RawTokenSyntax, arena: SyntaxArena) -> RawDifferentiabilityParamsSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(leftParen), arena: arena).as(RawDifferentiabilityParamsSyntax.self)!
  }
  public var unexpectedBetweenLeftParenAndDiffParams: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftParenAndDiffParams(_ unexpectedBetweenLeftParenAndDiffParams: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDifferentiabilityParamsSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenLeftParenAndDiffParams.map(RawSyntax.init), arena: arena).as(RawDifferentiabilityParamsSyntax.self)!
  }
  public var diffParams: RawDifferentiabilityParamListSyntax {
    layoutView.children[3].map(RawDifferentiabilityParamListSyntax.init(raw:))!
  }
  public func withDiffParams(_ diffParams: RawDifferentiabilityParamListSyntax, arena: SyntaxArena) -> RawDifferentiabilityParamsSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(diffParams), arena: arena).as(RawDifferentiabilityParamsSyntax.self)!
  }
  public var unexpectedBetweenDiffParamsAndRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenDiffParamsAndRightParen(_ unexpectedBetweenDiffParamsAndRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDifferentiabilityParamsSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenDiffParamsAndRightParen.map(RawSyntax.init), arena: arena).as(RawDifferentiabilityParamsSyntax.self)!
  }
  public var rightParen: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withRightParen(_ rightParen: RawTokenSyntax, arena: SyntaxArena) -> RawDifferentiabilityParamsSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(rightParen), arena: arena).as(RawDifferentiabilityParamsSyntax.self)!
  }
  public var unexpectedAfterRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightParen(_ unexpectedAfterRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDifferentiabilityParamsSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterRightParen.map(RawSyntax.init), arena: arena).as(RawDifferentiabilityParamsSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawDifferentiabilityParamListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = DifferentiabilityParamListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .differentiabilityParamList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawDifferentiabilityParamSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .differentiabilityParamList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawDifferentiabilityParamSyntax] {
    layoutView.children.map { RawDifferentiabilityParamSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawDifferentiabilityParamSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = DifferentiabilityParamSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .differentiabilityParam
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeParameter: RawUnexpectedNodesSyntax? = nil,
    parameter: RawTokenSyntax,
    _ unexpectedBetweenParameterAndTrailingComma: RawUnexpectedNodesSyntax? = nil,
    trailingComma: RawTokenSyntax?,
    _ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .differentiabilityParam, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeParameter?.raw
      layout[1] = parameter.raw
      layout[2] = unexpectedBetweenParameterAndTrailingComma?.raw
      layout[3] = trailingComma?.raw
      layout[4] = unexpectedAfterTrailingComma?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeParameter: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeParameter(_ unexpectedBeforeParameter: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDifferentiabilityParamSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeParameter.map(RawSyntax.init), arena: arena).as(RawDifferentiabilityParamSyntax.self)!
  }
  public var parameter: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withParameter(_ parameter: RawTokenSyntax, arena: SyntaxArena) -> RawDifferentiabilityParamSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(parameter), arena: arena).as(RawDifferentiabilityParamSyntax.self)!
  }
  public var unexpectedBetweenParameterAndTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenParameterAndTrailingComma(_ unexpectedBetweenParameterAndTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDifferentiabilityParamSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenParameterAndTrailingComma.map(RawSyntax.init), arena: arena).as(RawDifferentiabilityParamSyntax.self)!
  }
  public var trailingComma: RawTokenSyntax? {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))
  }
  public func withTrailingComma(_ trailingComma: RawTokenSyntax?, arena: SyntaxArena) -> RawDifferentiabilityParamSyntax {
    return layoutView.replacingChild(at: 3, with: trailingComma.map(RawSyntax.init), arena: arena).as(RawDifferentiabilityParamSyntax.self)!
  }
  public var unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterTrailingComma(_ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDifferentiabilityParamSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterTrailingComma.map(RawSyntax.init), arena: arena).as(RawDifferentiabilityParamSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawDerivativeRegistrationAttributeArgumentsSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = DerivativeRegistrationAttributeArgumentsSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .derivativeRegistrationAttributeArguments
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeOfLabel: RawUnexpectedNodesSyntax? = nil,
    ofLabel: RawTokenSyntax,
    _ unexpectedBetweenOfLabelAndColon: RawUnexpectedNodesSyntax? = nil,
    colon: RawTokenSyntax,
    _ unexpectedBetweenColonAndOriginalDeclName: RawUnexpectedNodesSyntax? = nil,
    originalDeclName: RawQualifiedDeclNameSyntax,
    _ unexpectedBetweenOriginalDeclNameAndPeriod: RawUnexpectedNodesSyntax? = nil,
    period: RawTokenSyntax?,
    _ unexpectedBetweenPeriodAndAccessorKind: RawUnexpectedNodesSyntax? = nil,
    accessorKind: RawTokenSyntax?,
    _ unexpectedBetweenAccessorKindAndComma: RawUnexpectedNodesSyntax? = nil,
    comma: RawTokenSyntax?,
    _ unexpectedBetweenCommaAndDiffParams: RawUnexpectedNodesSyntax? = nil,
    diffParams: RawDifferentiabilityParamsClauseSyntax?,
    _ unexpectedAfterDiffParams: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .derivativeRegistrationAttributeArguments, uninitializedCount: 15, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeOfLabel?.raw
      layout[1] = ofLabel.raw
      layout[2] = unexpectedBetweenOfLabelAndColon?.raw
      layout[3] = colon.raw
      layout[4] = unexpectedBetweenColonAndOriginalDeclName?.raw
      layout[5] = originalDeclName.raw
      layout[6] = unexpectedBetweenOriginalDeclNameAndPeriod?.raw
      layout[7] = period?.raw
      layout[8] = unexpectedBetweenPeriodAndAccessorKind?.raw
      layout[9] = accessorKind?.raw
      layout[10] = unexpectedBetweenAccessorKindAndComma?.raw
      layout[11] = comma?.raw
      layout[12] = unexpectedBetweenCommaAndDiffParams?.raw
      layout[13] = diffParams?.raw
      layout[14] = unexpectedAfterDiffParams?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeOfLabel: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeOfLabel(_ unexpectedBeforeOfLabel: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDerivativeRegistrationAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeOfLabel.map(RawSyntax.init), arena: arena).as(RawDerivativeRegistrationAttributeArgumentsSyntax.self)!
  }
  public var ofLabel: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withOfLabel(_ ofLabel: RawTokenSyntax, arena: SyntaxArena) -> RawDerivativeRegistrationAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(ofLabel), arena: arena).as(RawDerivativeRegistrationAttributeArgumentsSyntax.self)!
  }
  public var unexpectedBetweenOfLabelAndColon: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenOfLabelAndColon(_ unexpectedBetweenOfLabelAndColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDerivativeRegistrationAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenOfLabelAndColon.map(RawSyntax.init), arena: arena).as(RawDerivativeRegistrationAttributeArgumentsSyntax.self)!
  }
  public var colon: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withColon(_ colon: RawTokenSyntax, arena: SyntaxArena) -> RawDerivativeRegistrationAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(colon), arena: arena).as(RawDerivativeRegistrationAttributeArgumentsSyntax.self)!
  }
  public var unexpectedBetweenColonAndOriginalDeclName: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenColonAndOriginalDeclName(_ unexpectedBetweenColonAndOriginalDeclName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDerivativeRegistrationAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenColonAndOriginalDeclName.map(RawSyntax.init), arena: arena).as(RawDerivativeRegistrationAttributeArgumentsSyntax.self)!
  }
  public var originalDeclName: RawQualifiedDeclNameSyntax {
    layoutView.children[5].map(RawQualifiedDeclNameSyntax.init(raw:))!
  }
  public func withOriginalDeclName(_ originalDeclName: RawQualifiedDeclNameSyntax, arena: SyntaxArena) -> RawDerivativeRegistrationAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(originalDeclName), arena: arena).as(RawDerivativeRegistrationAttributeArgumentsSyntax.self)!
  }
  public var unexpectedBetweenOriginalDeclNameAndPeriod: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenOriginalDeclNameAndPeriod(_ unexpectedBetweenOriginalDeclNameAndPeriod: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDerivativeRegistrationAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenOriginalDeclNameAndPeriod.map(RawSyntax.init), arena: arena).as(RawDerivativeRegistrationAttributeArgumentsSyntax.self)!
  }
  public var period: RawTokenSyntax? {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))
  }
  public func withPeriod(_ period: RawTokenSyntax?, arena: SyntaxArena) -> RawDerivativeRegistrationAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 7, with: period.map(RawSyntax.init), arena: arena).as(RawDerivativeRegistrationAttributeArgumentsSyntax.self)!
  }
  public var unexpectedBetweenPeriodAndAccessorKind: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenPeriodAndAccessorKind(_ unexpectedBetweenPeriodAndAccessorKind: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDerivativeRegistrationAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenPeriodAndAccessorKind.map(RawSyntax.init), arena: arena).as(RawDerivativeRegistrationAttributeArgumentsSyntax.self)!
  }
  public var accessorKind: RawTokenSyntax? {
    layoutView.children[9].map(RawTokenSyntax.init(raw:))
  }
  public func withAccessorKind(_ accessorKind: RawTokenSyntax?, arena: SyntaxArena) -> RawDerivativeRegistrationAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 9, with: accessorKind.map(RawSyntax.init), arena: arena).as(RawDerivativeRegistrationAttributeArgumentsSyntax.self)!
  }
  public var unexpectedBetweenAccessorKindAndComma: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAccessorKindAndComma(_ unexpectedBetweenAccessorKindAndComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDerivativeRegistrationAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedBetweenAccessorKindAndComma.map(RawSyntax.init), arena: arena).as(RawDerivativeRegistrationAttributeArgumentsSyntax.self)!
  }
  public var comma: RawTokenSyntax? {
    layoutView.children[11].map(RawTokenSyntax.init(raw:))
  }
  public func withComma(_ comma: RawTokenSyntax?, arena: SyntaxArena) -> RawDerivativeRegistrationAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 11, with: comma.map(RawSyntax.init), arena: arena).as(RawDerivativeRegistrationAttributeArgumentsSyntax.self)!
  }
  public var unexpectedBetweenCommaAndDiffParams: RawUnexpectedNodesSyntax? {
    layoutView.children[12].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenCommaAndDiffParams(_ unexpectedBetweenCommaAndDiffParams: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDerivativeRegistrationAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 12, with: unexpectedBetweenCommaAndDiffParams.map(RawSyntax.init), arena: arena).as(RawDerivativeRegistrationAttributeArgumentsSyntax.self)!
  }
  public var diffParams: RawDifferentiabilityParamsClauseSyntax? {
    layoutView.children[13].map(RawDifferentiabilityParamsClauseSyntax.init(raw:))
  }
  public func withDiffParams(_ diffParams: RawDifferentiabilityParamsClauseSyntax?, arena: SyntaxArena) -> RawDerivativeRegistrationAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 13, with: diffParams.map(RawSyntax.init), arena: arena).as(RawDerivativeRegistrationAttributeArgumentsSyntax.self)!
  }
  public var unexpectedAfterDiffParams: RawUnexpectedNodesSyntax? {
    layoutView.children[14].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterDiffParams(_ unexpectedAfterDiffParams: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDerivativeRegistrationAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 14, with: unexpectedAfterDiffParams.map(RawSyntax.init), arena: arena).as(RawDerivativeRegistrationAttributeArgumentsSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawQualifiedDeclNameSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = QualifiedDeclNameSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .qualifiedDeclName
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeBaseType: RawUnexpectedNodesSyntax? = nil,
    baseType: RawTypeSyntax?,
    _ unexpectedBetweenBaseTypeAndDot: RawUnexpectedNodesSyntax? = nil,
    dot: RawTokenSyntax?,
    _ unexpectedBetweenDotAndName: RawUnexpectedNodesSyntax? = nil,
    name: RawTokenSyntax,
    _ unexpectedBetweenNameAndArguments: RawUnexpectedNodesSyntax? = nil,
    arguments: RawDeclNameArgumentsSyntax?,
    _ unexpectedAfterArguments: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .qualifiedDeclName, uninitializedCount: 9, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeBaseType?.raw
      layout[1] = baseType?.raw
      layout[2] = unexpectedBetweenBaseTypeAndDot?.raw
      layout[3] = dot?.raw
      layout[4] = unexpectedBetweenDotAndName?.raw
      layout[5] = name.raw
      layout[6] = unexpectedBetweenNameAndArguments?.raw
      layout[7] = arguments?.raw
      layout[8] = unexpectedAfterArguments?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeBaseType: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeBaseType(_ unexpectedBeforeBaseType: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawQualifiedDeclNameSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeBaseType.map(RawSyntax.init), arena: arena).as(RawQualifiedDeclNameSyntax.self)!
  }
  public var baseType: RawTypeSyntax? {
    layoutView.children[1].map(RawTypeSyntax.init(raw:))
  }
  public func withBaseType(_ baseType: RawTypeSyntax?, arena: SyntaxArena) -> RawQualifiedDeclNameSyntax {
    return layoutView.replacingChild(at: 1, with: baseType.map(RawSyntax.init), arena: arena).as(RawQualifiedDeclNameSyntax.self)!
  }
  public var unexpectedBetweenBaseTypeAndDot: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenBaseTypeAndDot(_ unexpectedBetweenBaseTypeAndDot: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawQualifiedDeclNameSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenBaseTypeAndDot.map(RawSyntax.init), arena: arena).as(RawQualifiedDeclNameSyntax.self)!
  }
  public var dot: RawTokenSyntax? {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))
  }
  public func withDot(_ dot: RawTokenSyntax?, arena: SyntaxArena) -> RawQualifiedDeclNameSyntax {
    return layoutView.replacingChild(at: 3, with: dot.map(RawSyntax.init), arena: arena).as(RawQualifiedDeclNameSyntax.self)!
  }
  public var unexpectedBetweenDotAndName: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenDotAndName(_ unexpectedBetweenDotAndName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawQualifiedDeclNameSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenDotAndName.map(RawSyntax.init), arena: arena).as(RawQualifiedDeclNameSyntax.self)!
  }
  public var name: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withName(_ name: RawTokenSyntax, arena: SyntaxArena) -> RawQualifiedDeclNameSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(name), arena: arena).as(RawQualifiedDeclNameSyntax.self)!
  }
  public var unexpectedBetweenNameAndArguments: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenNameAndArguments(_ unexpectedBetweenNameAndArguments: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawQualifiedDeclNameSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenNameAndArguments.map(RawSyntax.init), arena: arena).as(RawQualifiedDeclNameSyntax.self)!
  }
  public var arguments: RawDeclNameArgumentsSyntax? {
    layoutView.children[7].map(RawDeclNameArgumentsSyntax.init(raw:))
  }
  public func withArguments(_ arguments: RawDeclNameArgumentsSyntax?, arena: SyntaxArena) -> RawQualifiedDeclNameSyntax {
    return layoutView.replacingChild(at: 7, with: arguments.map(RawSyntax.init), arena: arena).as(RawQualifiedDeclNameSyntax.self)!
  }
  public var unexpectedAfterArguments: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterArguments(_ unexpectedAfterArguments: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawQualifiedDeclNameSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedAfterArguments.map(RawSyntax.init), arena: arena).as(RawQualifiedDeclNameSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawFunctionDeclNameSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = FunctionDeclNameSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .functionDeclName
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeName: RawUnexpectedNodesSyntax? = nil,
    name: RawTokenSyntax,
    _ unexpectedBetweenNameAndArguments: RawUnexpectedNodesSyntax? = nil,
    arguments: RawDeclNameArgumentsSyntax?,
    _ unexpectedAfterArguments: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .functionDeclName, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeName?.raw
      layout[1] = name.raw
      layout[2] = unexpectedBetweenNameAndArguments?.raw
      layout[3] = arguments?.raw
      layout[4] = unexpectedAfterArguments?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeName: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeName(_ unexpectedBeforeName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionDeclNameSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeName.map(RawSyntax.init), arena: arena).as(RawFunctionDeclNameSyntax.self)!
  }
  public var name: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withName(_ name: RawTokenSyntax, arena: SyntaxArena) -> RawFunctionDeclNameSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(name), arena: arena).as(RawFunctionDeclNameSyntax.self)!
  }
  public var unexpectedBetweenNameAndArguments: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenNameAndArguments(_ unexpectedBetweenNameAndArguments: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionDeclNameSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenNameAndArguments.map(RawSyntax.init), arena: arena).as(RawFunctionDeclNameSyntax.self)!
  }
  public var arguments: RawDeclNameArgumentsSyntax? {
    layoutView.children[3].map(RawDeclNameArgumentsSyntax.init(raw:))
  }
  public func withArguments(_ arguments: RawDeclNameArgumentsSyntax?, arena: SyntaxArena) -> RawFunctionDeclNameSyntax {
    return layoutView.replacingChild(at: 3, with: arguments.map(RawSyntax.init), arena: arena).as(RawFunctionDeclNameSyntax.self)!
  }
  public var unexpectedAfterArguments: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterArguments(_ unexpectedAfterArguments: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionDeclNameSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterArguments.map(RawSyntax.init), arena: arena).as(RawFunctionDeclNameSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawBackDeployAttributeSpecListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = BackDeployAttributeSpecListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .backDeployAttributeSpecList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeBeforeLabel: RawUnexpectedNodesSyntax? = nil,
    beforeLabel: RawTokenSyntax,
    _ unexpectedBetweenBeforeLabelAndColon: RawUnexpectedNodesSyntax? = nil,
    colon: RawTokenSyntax,
    _ unexpectedBetweenColonAndVersionList: RawUnexpectedNodesSyntax? = nil,
    versionList: RawBackDeployVersionListSyntax,
    _ unexpectedAfterVersionList: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .backDeployAttributeSpecList, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeBeforeLabel?.raw
      layout[1] = beforeLabel.raw
      layout[2] = unexpectedBetweenBeforeLabelAndColon?.raw
      layout[3] = colon.raw
      layout[4] = unexpectedBetweenColonAndVersionList?.raw
      layout[5] = versionList.raw
      layout[6] = unexpectedAfterVersionList?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeBeforeLabel: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeBeforeLabel(_ unexpectedBeforeBeforeLabel: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawBackDeployAttributeSpecListSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeBeforeLabel.map(RawSyntax.init), arena: arena).as(RawBackDeployAttributeSpecListSyntax.self)!
  }
  public var beforeLabel: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withBeforeLabel(_ beforeLabel: RawTokenSyntax, arena: SyntaxArena) -> RawBackDeployAttributeSpecListSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(beforeLabel), arena: arena).as(RawBackDeployAttributeSpecListSyntax.self)!
  }
  public var unexpectedBetweenBeforeLabelAndColon: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenBeforeLabelAndColon(_ unexpectedBetweenBeforeLabelAndColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawBackDeployAttributeSpecListSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenBeforeLabelAndColon.map(RawSyntax.init), arena: arena).as(RawBackDeployAttributeSpecListSyntax.self)!
  }
  public var colon: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withColon(_ colon: RawTokenSyntax, arena: SyntaxArena) -> RawBackDeployAttributeSpecListSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(colon), arena: arena).as(RawBackDeployAttributeSpecListSyntax.self)!
  }
  public var unexpectedBetweenColonAndVersionList: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenColonAndVersionList(_ unexpectedBetweenColonAndVersionList: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawBackDeployAttributeSpecListSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenColonAndVersionList.map(RawSyntax.init), arena: arena).as(RawBackDeployAttributeSpecListSyntax.self)!
  }
  public var versionList: RawBackDeployVersionListSyntax {
    layoutView.children[5].map(RawBackDeployVersionListSyntax.init(raw:))!
  }
  public func withVersionList(_ versionList: RawBackDeployVersionListSyntax, arena: SyntaxArena) -> RawBackDeployAttributeSpecListSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(versionList), arena: arena).as(RawBackDeployAttributeSpecListSyntax.self)!
  }
  public var unexpectedAfterVersionList: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterVersionList(_ unexpectedAfterVersionList: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawBackDeployAttributeSpecListSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterVersionList.map(RawSyntax.init), arena: arena).as(RawBackDeployAttributeSpecListSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawBackDeployVersionListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = BackDeployVersionListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .backDeployVersionList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawBackDeployVersionArgumentSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .backDeployVersionList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawBackDeployVersionArgumentSyntax] {
    layoutView.children.map { RawBackDeployVersionArgumentSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawBackDeployVersionArgumentSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = BackDeployVersionArgumentSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .backDeployVersionArgument
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeAvailabilityVersionRestriction: RawUnexpectedNodesSyntax? = nil,
    availabilityVersionRestriction: RawAvailabilityVersionRestrictionSyntax,
    _ unexpectedBetweenAvailabilityVersionRestrictionAndTrailingComma: RawUnexpectedNodesSyntax? = nil,
    trailingComma: RawTokenSyntax?,
    _ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .backDeployVersionArgument, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeAvailabilityVersionRestriction?.raw
      layout[1] = availabilityVersionRestriction.raw
      layout[2] = unexpectedBetweenAvailabilityVersionRestrictionAndTrailingComma?.raw
      layout[3] = trailingComma?.raw
      layout[4] = unexpectedAfterTrailingComma?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeAvailabilityVersionRestriction: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeAvailabilityVersionRestriction(_ unexpectedBeforeAvailabilityVersionRestriction: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawBackDeployVersionArgumentSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeAvailabilityVersionRestriction.map(RawSyntax.init), arena: arena).as(RawBackDeployVersionArgumentSyntax.self)!
  }
  public var availabilityVersionRestriction: RawAvailabilityVersionRestrictionSyntax {
    layoutView.children[1].map(RawAvailabilityVersionRestrictionSyntax.init(raw:))!
  }
  public func withAvailabilityVersionRestriction(_ availabilityVersionRestriction: RawAvailabilityVersionRestrictionSyntax, arena: SyntaxArena) -> RawBackDeployVersionArgumentSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(availabilityVersionRestriction), arena: arena).as(RawBackDeployVersionArgumentSyntax.self)!
  }
  public var unexpectedBetweenAvailabilityVersionRestrictionAndTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAvailabilityVersionRestrictionAndTrailingComma(_ unexpectedBetweenAvailabilityVersionRestrictionAndTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawBackDeployVersionArgumentSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenAvailabilityVersionRestrictionAndTrailingComma.map(RawSyntax.init), arena: arena).as(RawBackDeployVersionArgumentSyntax.self)!
  }
  public var trailingComma: RawTokenSyntax? {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))
  }
  public func withTrailingComma(_ trailingComma: RawTokenSyntax?, arena: SyntaxArena) -> RawBackDeployVersionArgumentSyntax {
    return layoutView.replacingChild(at: 3, with: trailingComma.map(RawSyntax.init), arena: arena).as(RawBackDeployVersionArgumentSyntax.self)!
  }
  public var unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterTrailingComma(_ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawBackDeployVersionArgumentSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterTrailingComma.map(RawSyntax.init), arena: arena).as(RawBackDeployVersionArgumentSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawOpaqueReturnTypeOfAttributeArgumentsSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = OpaqueReturnTypeOfAttributeArgumentsSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .opaqueReturnTypeOfAttributeArguments
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeMangledName: RawUnexpectedNodesSyntax? = nil,
    mangledName: RawTokenSyntax,
    _ unexpectedBetweenMangledNameAndComma: RawUnexpectedNodesSyntax? = nil,
    comma: RawTokenSyntax,
    _ unexpectedBetweenCommaAndOrdinal: RawUnexpectedNodesSyntax? = nil,
    ordinal: RawTokenSyntax,
    _ unexpectedAfterOrdinal: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .opaqueReturnTypeOfAttributeArguments, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeMangledName?.raw
      layout[1] = mangledName.raw
      layout[2] = unexpectedBetweenMangledNameAndComma?.raw
      layout[3] = comma.raw
      layout[4] = unexpectedBetweenCommaAndOrdinal?.raw
      layout[5] = ordinal.raw
      layout[6] = unexpectedAfterOrdinal?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeMangledName: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeMangledName(_ unexpectedBeforeMangledName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawOpaqueReturnTypeOfAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeMangledName.map(RawSyntax.init), arena: arena).as(RawOpaqueReturnTypeOfAttributeArgumentsSyntax.self)!
  }
  public var mangledName: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withMangledName(_ mangledName: RawTokenSyntax, arena: SyntaxArena) -> RawOpaqueReturnTypeOfAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(mangledName), arena: arena).as(RawOpaqueReturnTypeOfAttributeArgumentsSyntax.self)!
  }
  public var unexpectedBetweenMangledNameAndComma: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenMangledNameAndComma(_ unexpectedBetweenMangledNameAndComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawOpaqueReturnTypeOfAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenMangledNameAndComma.map(RawSyntax.init), arena: arena).as(RawOpaqueReturnTypeOfAttributeArgumentsSyntax.self)!
  }
  public var comma: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withComma(_ comma: RawTokenSyntax, arena: SyntaxArena) -> RawOpaqueReturnTypeOfAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(comma), arena: arena).as(RawOpaqueReturnTypeOfAttributeArgumentsSyntax.self)!
  }
  public var unexpectedBetweenCommaAndOrdinal: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenCommaAndOrdinal(_ unexpectedBetweenCommaAndOrdinal: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawOpaqueReturnTypeOfAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenCommaAndOrdinal.map(RawSyntax.init), arena: arena).as(RawOpaqueReturnTypeOfAttributeArgumentsSyntax.self)!
  }
  public var ordinal: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withOrdinal(_ ordinal: RawTokenSyntax, arena: SyntaxArena) -> RawOpaqueReturnTypeOfAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(ordinal), arena: arena).as(RawOpaqueReturnTypeOfAttributeArgumentsSyntax.self)!
  }
  public var unexpectedAfterOrdinal: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterOrdinal(_ unexpectedAfterOrdinal: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawOpaqueReturnTypeOfAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterOrdinal.map(RawSyntax.init), arena: arena).as(RawOpaqueReturnTypeOfAttributeArgumentsSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawConventionAttributeArgumentsSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ConventionAttributeArgumentsSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .conventionAttributeArguments
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeConventionLabel: RawUnexpectedNodesSyntax? = nil,
    conventionLabel: RawTokenSyntax,
    _ unexpectedBetweenConventionLabelAndComma: RawUnexpectedNodesSyntax? = nil,
    comma: RawTokenSyntax?,
    _ unexpectedBetweenCommaAndCTypeLabel: RawUnexpectedNodesSyntax? = nil,
    cTypeLabel: RawTokenSyntax?,
    _ unexpectedBetweenCTypeLabelAndColon: RawUnexpectedNodesSyntax? = nil,
    colon: RawTokenSyntax?,
    _ unexpectedBetweenColonAndCTypeString: RawUnexpectedNodesSyntax? = nil,
    cTypeString: RawTokenSyntax?,
    _ unexpectedAfterCTypeString: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .conventionAttributeArguments, uninitializedCount: 11, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeConventionLabel?.raw
      layout[1] = conventionLabel.raw
      layout[2] = unexpectedBetweenConventionLabelAndComma?.raw
      layout[3] = comma?.raw
      layout[4] = unexpectedBetweenCommaAndCTypeLabel?.raw
      layout[5] = cTypeLabel?.raw
      layout[6] = unexpectedBetweenCTypeLabelAndColon?.raw
      layout[7] = colon?.raw
      layout[8] = unexpectedBetweenColonAndCTypeString?.raw
      layout[9] = cTypeString?.raw
      layout[10] = unexpectedAfterCTypeString?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeConventionLabel: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeConventionLabel(_ unexpectedBeforeConventionLabel: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawConventionAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeConventionLabel.map(RawSyntax.init), arena: arena).as(RawConventionAttributeArgumentsSyntax.self)!
  }
  public var conventionLabel: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withConventionLabel(_ conventionLabel: RawTokenSyntax, arena: SyntaxArena) -> RawConventionAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(conventionLabel), arena: arena).as(RawConventionAttributeArgumentsSyntax.self)!
  }
  public var unexpectedBetweenConventionLabelAndComma: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenConventionLabelAndComma(_ unexpectedBetweenConventionLabelAndComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawConventionAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenConventionLabelAndComma.map(RawSyntax.init), arena: arena).as(RawConventionAttributeArgumentsSyntax.self)!
  }
  public var comma: RawTokenSyntax? {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))
  }
  public func withComma(_ comma: RawTokenSyntax?, arena: SyntaxArena) -> RawConventionAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 3, with: comma.map(RawSyntax.init), arena: arena).as(RawConventionAttributeArgumentsSyntax.self)!
  }
  public var unexpectedBetweenCommaAndCTypeLabel: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenCommaAndCTypeLabel(_ unexpectedBetweenCommaAndCTypeLabel: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawConventionAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenCommaAndCTypeLabel.map(RawSyntax.init), arena: arena).as(RawConventionAttributeArgumentsSyntax.self)!
  }
  public var cTypeLabel: RawTokenSyntax? {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))
  }
  public func withCTypeLabel(_ cTypeLabel: RawTokenSyntax?, arena: SyntaxArena) -> RawConventionAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 5, with: cTypeLabel.map(RawSyntax.init), arena: arena).as(RawConventionAttributeArgumentsSyntax.self)!
  }
  public var unexpectedBetweenCTypeLabelAndColon: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenCTypeLabelAndColon(_ unexpectedBetweenCTypeLabelAndColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawConventionAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenCTypeLabelAndColon.map(RawSyntax.init), arena: arena).as(RawConventionAttributeArgumentsSyntax.self)!
  }
  public var colon: RawTokenSyntax? {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))
  }
  public func withColon(_ colon: RawTokenSyntax?, arena: SyntaxArena) -> RawConventionAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 7, with: colon.map(RawSyntax.init), arena: arena).as(RawConventionAttributeArgumentsSyntax.self)!
  }
  public var unexpectedBetweenColonAndCTypeString: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenColonAndCTypeString(_ unexpectedBetweenColonAndCTypeString: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawConventionAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenColonAndCTypeString.map(RawSyntax.init), arena: arena).as(RawConventionAttributeArgumentsSyntax.self)!
  }
  public var cTypeString: RawTokenSyntax? {
    layoutView.children[9].map(RawTokenSyntax.init(raw:))
  }
  public func withCTypeString(_ cTypeString: RawTokenSyntax?, arena: SyntaxArena) -> RawConventionAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 9, with: cTypeString.map(RawSyntax.init), arena: arena).as(RawConventionAttributeArgumentsSyntax.self)!
  }
  public var unexpectedAfterCTypeString: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterCTypeString(_ unexpectedAfterCTypeString: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawConventionAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedAfterCTypeString.map(RawSyntax.init), arena: arena).as(RawConventionAttributeArgumentsSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawConventionWitnessMethodAttributeArgumentsSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ConventionWitnessMethodAttributeArgumentsSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .conventionWitnessMethodAttributeArguments
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeWitnessMethodLabel: RawUnexpectedNodesSyntax? = nil,
    witnessMethodLabel: RawTokenSyntax,
    _ unexpectedBetweenWitnessMethodLabelAndColon: RawUnexpectedNodesSyntax? = nil,
    colon: RawTokenSyntax,
    _ unexpectedBetweenColonAndProtocolName: RawUnexpectedNodesSyntax? = nil,
    protocolName: RawTokenSyntax,
    _ unexpectedAfterProtocolName: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .conventionWitnessMethodAttributeArguments, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeWitnessMethodLabel?.raw
      layout[1] = witnessMethodLabel.raw
      layout[2] = unexpectedBetweenWitnessMethodLabelAndColon?.raw
      layout[3] = colon.raw
      layout[4] = unexpectedBetweenColonAndProtocolName?.raw
      layout[5] = protocolName.raw
      layout[6] = unexpectedAfterProtocolName?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeWitnessMethodLabel: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeWitnessMethodLabel(_ unexpectedBeforeWitnessMethodLabel: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawConventionWitnessMethodAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeWitnessMethodLabel.map(RawSyntax.init), arena: arena).as(RawConventionWitnessMethodAttributeArgumentsSyntax.self)!
  }
  public var witnessMethodLabel: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withWitnessMethodLabel(_ witnessMethodLabel: RawTokenSyntax, arena: SyntaxArena) -> RawConventionWitnessMethodAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(witnessMethodLabel), arena: arena).as(RawConventionWitnessMethodAttributeArgumentsSyntax.self)!
  }
  public var unexpectedBetweenWitnessMethodLabelAndColon: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenWitnessMethodLabelAndColon(_ unexpectedBetweenWitnessMethodLabelAndColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawConventionWitnessMethodAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenWitnessMethodLabelAndColon.map(RawSyntax.init), arena: arena).as(RawConventionWitnessMethodAttributeArgumentsSyntax.self)!
  }
  public var colon: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withColon(_ colon: RawTokenSyntax, arena: SyntaxArena) -> RawConventionWitnessMethodAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(colon), arena: arena).as(RawConventionWitnessMethodAttributeArgumentsSyntax.self)!
  }
  public var unexpectedBetweenColonAndProtocolName: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenColonAndProtocolName(_ unexpectedBetweenColonAndProtocolName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawConventionWitnessMethodAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenColonAndProtocolName.map(RawSyntax.init), arena: arena).as(RawConventionWitnessMethodAttributeArgumentsSyntax.self)!
  }
  public var protocolName: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withProtocolName(_ protocolName: RawTokenSyntax, arena: SyntaxArena) -> RawConventionWitnessMethodAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(protocolName), arena: arena).as(RawConventionWitnessMethodAttributeArgumentsSyntax.self)!
  }
  public var unexpectedAfterProtocolName: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterProtocolName(_ unexpectedAfterProtocolName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawConventionWitnessMethodAttributeArgumentsSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterProtocolName.map(RawSyntax.init), arena: arena).as(RawConventionWitnessMethodAttributeArgumentsSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawLabeledStmtSyntax: RawStmtSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = LabeledStmtSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .labeledStmt
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeLabelName: RawUnexpectedNodesSyntax? = nil,
    labelName: RawTokenSyntax,
    _ unexpectedBetweenLabelNameAndLabelColon: RawUnexpectedNodesSyntax? = nil,
    labelColon: RawTokenSyntax,
    _ unexpectedBetweenLabelColonAndStatement: RawUnexpectedNodesSyntax? = nil,
    statement: RawStmtSyntax,
    _ unexpectedAfterStatement: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .labeledStmt, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeLabelName?.raw
      layout[1] = labelName.raw
      layout[2] = unexpectedBetweenLabelNameAndLabelColon?.raw
      layout[3] = labelColon.raw
      layout[4] = unexpectedBetweenLabelColonAndStatement?.raw
      layout[5] = statement.raw
      layout[6] = unexpectedAfterStatement?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeLabelName: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeLabelName(_ unexpectedBeforeLabelName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawLabeledStmtSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeLabelName.map(RawSyntax.init), arena: arena).as(RawLabeledStmtSyntax.self)!
  }
  public var labelName: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withLabelName(_ labelName: RawTokenSyntax, arena: SyntaxArena) -> RawLabeledStmtSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(labelName), arena: arena).as(RawLabeledStmtSyntax.self)!
  }
  public var unexpectedBetweenLabelNameAndLabelColon: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLabelNameAndLabelColon(_ unexpectedBetweenLabelNameAndLabelColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawLabeledStmtSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenLabelNameAndLabelColon.map(RawSyntax.init), arena: arena).as(RawLabeledStmtSyntax.self)!
  }
  public var labelColon: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withLabelColon(_ labelColon: RawTokenSyntax, arena: SyntaxArena) -> RawLabeledStmtSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(labelColon), arena: arena).as(RawLabeledStmtSyntax.self)!
  }
  public var unexpectedBetweenLabelColonAndStatement: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLabelColonAndStatement(_ unexpectedBetweenLabelColonAndStatement: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawLabeledStmtSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenLabelColonAndStatement.map(RawSyntax.init), arena: arena).as(RawLabeledStmtSyntax.self)!
  }
  public var statement: RawStmtSyntax {
    layoutView.children[5].map(RawStmtSyntax.init(raw:))!
  }
  public func withStatement(_ statement: RawStmtSyntax, arena: SyntaxArena) -> RawLabeledStmtSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(statement), arena: arena).as(RawLabeledStmtSyntax.self)!
  }
  public var unexpectedAfterStatement: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterStatement(_ unexpectedAfterStatement: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawLabeledStmtSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterStatement.map(RawSyntax.init), arena: arena).as(RawLabeledStmtSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawContinueStmtSyntax: RawStmtSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ContinueStmtSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .continueStmt
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeContinueKeyword: RawUnexpectedNodesSyntax? = nil,
    continueKeyword: RawTokenSyntax,
    _ unexpectedBetweenContinueKeywordAndLabel: RawUnexpectedNodesSyntax? = nil,
    label: RawTokenSyntax?,
    _ unexpectedAfterLabel: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .continueStmt, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeContinueKeyword?.raw
      layout[1] = continueKeyword.raw
      layout[2] = unexpectedBetweenContinueKeywordAndLabel?.raw
      layout[3] = label?.raw
      layout[4] = unexpectedAfterLabel?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeContinueKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeContinueKeyword(_ unexpectedBeforeContinueKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawContinueStmtSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeContinueKeyword.map(RawSyntax.init), arena: arena).as(RawContinueStmtSyntax.self)!
  }
  public var continueKeyword: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withContinueKeyword(_ continueKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawContinueStmtSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(continueKeyword), arena: arena).as(RawContinueStmtSyntax.self)!
  }
  public var unexpectedBetweenContinueKeywordAndLabel: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenContinueKeywordAndLabel(_ unexpectedBetweenContinueKeywordAndLabel: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawContinueStmtSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenContinueKeywordAndLabel.map(RawSyntax.init), arena: arena).as(RawContinueStmtSyntax.self)!
  }
  public var label: RawTokenSyntax? {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))
  }
  public func withLabel(_ label: RawTokenSyntax?, arena: SyntaxArena) -> RawContinueStmtSyntax {
    return layoutView.replacingChild(at: 3, with: label.map(RawSyntax.init), arena: arena).as(RawContinueStmtSyntax.self)!
  }
  public var unexpectedAfterLabel: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterLabel(_ unexpectedAfterLabel: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawContinueStmtSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterLabel.map(RawSyntax.init), arena: arena).as(RawContinueStmtSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawWhileStmtSyntax: RawStmtSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = WhileStmtSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .whileStmt
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeWhileKeyword: RawUnexpectedNodesSyntax? = nil,
    whileKeyword: RawTokenSyntax,
    _ unexpectedBetweenWhileKeywordAndConditions: RawUnexpectedNodesSyntax? = nil,
    conditions: RawConditionElementListSyntax,
    _ unexpectedBetweenConditionsAndBody: RawUnexpectedNodesSyntax? = nil,
    body: RawCodeBlockSyntax,
    _ unexpectedAfterBody: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .whileStmt, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeWhileKeyword?.raw
      layout[1] = whileKeyword.raw
      layout[2] = unexpectedBetweenWhileKeywordAndConditions?.raw
      layout[3] = conditions.raw
      layout[4] = unexpectedBetweenConditionsAndBody?.raw
      layout[5] = body.raw
      layout[6] = unexpectedAfterBody?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeWhileKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeWhileKeyword(_ unexpectedBeforeWhileKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawWhileStmtSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeWhileKeyword.map(RawSyntax.init), arena: arena).as(RawWhileStmtSyntax.self)!
  }
  public var whileKeyword: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withWhileKeyword(_ whileKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawWhileStmtSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(whileKeyword), arena: arena).as(RawWhileStmtSyntax.self)!
  }
  public var unexpectedBetweenWhileKeywordAndConditions: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenWhileKeywordAndConditions(_ unexpectedBetweenWhileKeywordAndConditions: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawWhileStmtSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenWhileKeywordAndConditions.map(RawSyntax.init), arena: arena).as(RawWhileStmtSyntax.self)!
  }
  public var conditions: RawConditionElementListSyntax {
    layoutView.children[3].map(RawConditionElementListSyntax.init(raw:))!
  }
  public func withConditions(_ conditions: RawConditionElementListSyntax, arena: SyntaxArena) -> RawWhileStmtSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(conditions), arena: arena).as(RawWhileStmtSyntax.self)!
  }
  public var unexpectedBetweenConditionsAndBody: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenConditionsAndBody(_ unexpectedBetweenConditionsAndBody: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawWhileStmtSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenConditionsAndBody.map(RawSyntax.init), arena: arena).as(RawWhileStmtSyntax.self)!
  }
  public var body: RawCodeBlockSyntax {
    layoutView.children[5].map(RawCodeBlockSyntax.init(raw:))!
  }
  public func withBody(_ body: RawCodeBlockSyntax, arena: SyntaxArena) -> RawWhileStmtSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(body), arena: arena).as(RawWhileStmtSyntax.self)!
  }
  public var unexpectedAfterBody: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterBody(_ unexpectedAfterBody: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawWhileStmtSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterBody.map(RawSyntax.init), arena: arena).as(RawWhileStmtSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawDeferStmtSyntax: RawStmtSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = DeferStmtSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .deferStmt
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeDeferKeyword: RawUnexpectedNodesSyntax? = nil,
    deferKeyword: RawTokenSyntax,
    _ unexpectedBetweenDeferKeywordAndBody: RawUnexpectedNodesSyntax? = nil,
    body: RawCodeBlockSyntax,
    _ unexpectedAfterBody: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .deferStmt, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeDeferKeyword?.raw
      layout[1] = deferKeyword.raw
      layout[2] = unexpectedBetweenDeferKeywordAndBody?.raw
      layout[3] = body.raw
      layout[4] = unexpectedAfterBody?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeDeferKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeDeferKeyword(_ unexpectedBeforeDeferKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDeferStmtSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeDeferKeyword.map(RawSyntax.init), arena: arena).as(RawDeferStmtSyntax.self)!
  }
  public var deferKeyword: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withDeferKeyword(_ deferKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawDeferStmtSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(deferKeyword), arena: arena).as(RawDeferStmtSyntax.self)!
  }
  public var unexpectedBetweenDeferKeywordAndBody: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenDeferKeywordAndBody(_ unexpectedBetweenDeferKeywordAndBody: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDeferStmtSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenDeferKeywordAndBody.map(RawSyntax.init), arena: arena).as(RawDeferStmtSyntax.self)!
  }
  public var body: RawCodeBlockSyntax {
    layoutView.children[3].map(RawCodeBlockSyntax.init(raw:))!
  }
  public func withBody(_ body: RawCodeBlockSyntax, arena: SyntaxArena) -> RawDeferStmtSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(body), arena: arena).as(RawDeferStmtSyntax.self)!
  }
  public var unexpectedAfterBody: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterBody(_ unexpectedAfterBody: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDeferStmtSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterBody.map(RawSyntax.init), arena: arena).as(RawDeferStmtSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawExpressionStmtSyntax: RawStmtSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ExpressionStmtSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .expressionStmt
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeExpression: RawUnexpectedNodesSyntax? = nil,
    expression: RawExprSyntax,
    _ unexpectedAfterExpression: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .expressionStmt, uninitializedCount: 3, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeExpression?.raw
      layout[1] = expression.raw
      layout[2] = unexpectedAfterExpression?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeExpression: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeExpression(_ unexpectedBeforeExpression: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawExpressionStmtSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeExpression.map(RawSyntax.init), arena: arena).as(RawExpressionStmtSyntax.self)!
  }
  public var expression: RawExprSyntax {
    layoutView.children[1].map(RawExprSyntax.init(raw:))!
  }
  public func withExpression(_ expression: RawExprSyntax, arena: SyntaxArena) -> RawExpressionStmtSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(expression), arena: arena).as(RawExpressionStmtSyntax.self)!
  }
  public var unexpectedAfterExpression: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterExpression(_ unexpectedAfterExpression: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawExpressionStmtSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedAfterExpression.map(RawSyntax.init), arena: arena).as(RawExpressionStmtSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawSwitchCaseListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public enum Element: RawSyntaxNodeProtocol {
    case `switchCase`(RawSwitchCaseSyntax)
    case `ifConfigDecl`(RawIfConfigDeclSyntax)

    public static func isKindOf(_ raw: RawSyntax) -> Bool {
      return RawSwitchCaseSyntax.isKindOf(raw) || RawIfConfigDeclSyntax.isKindOf(raw)
    }

    public var raw: RawSyntax {
      switch self {
      case .switchCase(let node): return node.raw
      case .ifConfigDecl(let node): return node.raw
      }
    }

    public init?<T>(_ other: T) where T : RawSyntaxNodeProtocol {
      if let node = RawSwitchCaseSyntax(other) {
        self = .switchCase(node)
        return
      }
      if let node = RawIfConfigDeclSyntax(other) {
        self = .ifConfigDecl(node)
        return
      }
      return nil
    }
  }

  public typealias SyntaxType = SwitchCaseListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .switchCaseList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [Element], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .switchCaseList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawSyntax] {
    layoutView.children.map { RawSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawRepeatWhileStmtSyntax: RawStmtSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = RepeatWhileStmtSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .repeatWhileStmt
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeRepeatKeyword: RawUnexpectedNodesSyntax? = nil,
    repeatKeyword: RawTokenSyntax,
    _ unexpectedBetweenRepeatKeywordAndBody: RawUnexpectedNodesSyntax? = nil,
    body: RawCodeBlockSyntax,
    _ unexpectedBetweenBodyAndWhileKeyword: RawUnexpectedNodesSyntax? = nil,
    whileKeyword: RawTokenSyntax,
    _ unexpectedBetweenWhileKeywordAndCondition: RawUnexpectedNodesSyntax? = nil,
    condition: RawExprSyntax,
    _ unexpectedAfterCondition: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .repeatWhileStmt, uninitializedCount: 9, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeRepeatKeyword?.raw
      layout[1] = repeatKeyword.raw
      layout[2] = unexpectedBetweenRepeatKeywordAndBody?.raw
      layout[3] = body.raw
      layout[4] = unexpectedBetweenBodyAndWhileKeyword?.raw
      layout[5] = whileKeyword.raw
      layout[6] = unexpectedBetweenWhileKeywordAndCondition?.raw
      layout[7] = condition.raw
      layout[8] = unexpectedAfterCondition?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeRepeatKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeRepeatKeyword(_ unexpectedBeforeRepeatKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawRepeatWhileStmtSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeRepeatKeyword.map(RawSyntax.init), arena: arena).as(RawRepeatWhileStmtSyntax.self)!
  }
  public var repeatKeyword: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withRepeatKeyword(_ repeatKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawRepeatWhileStmtSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(repeatKeyword), arena: arena).as(RawRepeatWhileStmtSyntax.self)!
  }
  public var unexpectedBetweenRepeatKeywordAndBody: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenRepeatKeywordAndBody(_ unexpectedBetweenRepeatKeywordAndBody: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawRepeatWhileStmtSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenRepeatKeywordAndBody.map(RawSyntax.init), arena: arena).as(RawRepeatWhileStmtSyntax.self)!
  }
  public var body: RawCodeBlockSyntax {
    layoutView.children[3].map(RawCodeBlockSyntax.init(raw:))!
  }
  public func withBody(_ body: RawCodeBlockSyntax, arena: SyntaxArena) -> RawRepeatWhileStmtSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(body), arena: arena).as(RawRepeatWhileStmtSyntax.self)!
  }
  public var unexpectedBetweenBodyAndWhileKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenBodyAndWhileKeyword(_ unexpectedBetweenBodyAndWhileKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawRepeatWhileStmtSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenBodyAndWhileKeyword.map(RawSyntax.init), arena: arena).as(RawRepeatWhileStmtSyntax.self)!
  }
  public var whileKeyword: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withWhileKeyword(_ whileKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawRepeatWhileStmtSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(whileKeyword), arena: arena).as(RawRepeatWhileStmtSyntax.self)!
  }
  public var unexpectedBetweenWhileKeywordAndCondition: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenWhileKeywordAndCondition(_ unexpectedBetweenWhileKeywordAndCondition: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawRepeatWhileStmtSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenWhileKeywordAndCondition.map(RawSyntax.init), arena: arena).as(RawRepeatWhileStmtSyntax.self)!
  }
  public var condition: RawExprSyntax {
    layoutView.children[7].map(RawExprSyntax.init(raw:))!
  }
  public func withCondition(_ condition: RawExprSyntax, arena: SyntaxArena) -> RawRepeatWhileStmtSyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(condition), arena: arena).as(RawRepeatWhileStmtSyntax.self)!
  }
  public var unexpectedAfterCondition: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterCondition(_ unexpectedAfterCondition: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawRepeatWhileStmtSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedAfterCondition.map(RawSyntax.init), arena: arena).as(RawRepeatWhileStmtSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawGuardStmtSyntax: RawStmtSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = GuardStmtSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .guardStmt
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeGuardKeyword: RawUnexpectedNodesSyntax? = nil,
    guardKeyword: RawTokenSyntax,
    _ unexpectedBetweenGuardKeywordAndConditions: RawUnexpectedNodesSyntax? = nil,
    conditions: RawConditionElementListSyntax,
    _ unexpectedBetweenConditionsAndElseKeyword: RawUnexpectedNodesSyntax? = nil,
    elseKeyword: RawTokenSyntax,
    _ unexpectedBetweenElseKeywordAndBody: RawUnexpectedNodesSyntax? = nil,
    body: RawCodeBlockSyntax,
    _ unexpectedAfterBody: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .guardStmt, uninitializedCount: 9, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeGuardKeyword?.raw
      layout[1] = guardKeyword.raw
      layout[2] = unexpectedBetweenGuardKeywordAndConditions?.raw
      layout[3] = conditions.raw
      layout[4] = unexpectedBetweenConditionsAndElseKeyword?.raw
      layout[5] = elseKeyword.raw
      layout[6] = unexpectedBetweenElseKeywordAndBody?.raw
      layout[7] = body.raw
      layout[8] = unexpectedAfterBody?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeGuardKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeGuardKeyword(_ unexpectedBeforeGuardKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawGuardStmtSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeGuardKeyword.map(RawSyntax.init), arena: arena).as(RawGuardStmtSyntax.self)!
  }
  public var guardKeyword: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withGuardKeyword(_ guardKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawGuardStmtSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(guardKeyword), arena: arena).as(RawGuardStmtSyntax.self)!
  }
  public var unexpectedBetweenGuardKeywordAndConditions: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenGuardKeywordAndConditions(_ unexpectedBetweenGuardKeywordAndConditions: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawGuardStmtSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenGuardKeywordAndConditions.map(RawSyntax.init), arena: arena).as(RawGuardStmtSyntax.self)!
  }
  public var conditions: RawConditionElementListSyntax {
    layoutView.children[3].map(RawConditionElementListSyntax.init(raw:))!
  }
  public func withConditions(_ conditions: RawConditionElementListSyntax, arena: SyntaxArena) -> RawGuardStmtSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(conditions), arena: arena).as(RawGuardStmtSyntax.self)!
  }
  public var unexpectedBetweenConditionsAndElseKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenConditionsAndElseKeyword(_ unexpectedBetweenConditionsAndElseKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawGuardStmtSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenConditionsAndElseKeyword.map(RawSyntax.init), arena: arena).as(RawGuardStmtSyntax.self)!
  }
  public var elseKeyword: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withElseKeyword(_ elseKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawGuardStmtSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(elseKeyword), arena: arena).as(RawGuardStmtSyntax.self)!
  }
  public var unexpectedBetweenElseKeywordAndBody: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenElseKeywordAndBody(_ unexpectedBetweenElseKeywordAndBody: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawGuardStmtSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenElseKeywordAndBody.map(RawSyntax.init), arena: arena).as(RawGuardStmtSyntax.self)!
  }
  public var body: RawCodeBlockSyntax {
    layoutView.children[7].map(RawCodeBlockSyntax.init(raw:))!
  }
  public func withBody(_ body: RawCodeBlockSyntax, arena: SyntaxArena) -> RawGuardStmtSyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(body), arena: arena).as(RawGuardStmtSyntax.self)!
  }
  public var unexpectedAfterBody: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterBody(_ unexpectedAfterBody: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawGuardStmtSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedAfterBody.map(RawSyntax.init), arena: arena).as(RawGuardStmtSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawWhereClauseSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = WhereClauseSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .whereClause
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeWhereKeyword: RawUnexpectedNodesSyntax? = nil,
    whereKeyword: RawTokenSyntax,
    _ unexpectedBetweenWhereKeywordAndGuardResult: RawUnexpectedNodesSyntax? = nil,
    guardResult: RawExprSyntax,
    _ unexpectedAfterGuardResult: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .whereClause, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeWhereKeyword?.raw
      layout[1] = whereKeyword.raw
      layout[2] = unexpectedBetweenWhereKeywordAndGuardResult?.raw
      layout[3] = guardResult.raw
      layout[4] = unexpectedAfterGuardResult?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeWhereKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeWhereKeyword(_ unexpectedBeforeWhereKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawWhereClauseSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeWhereKeyword.map(RawSyntax.init), arena: arena).as(RawWhereClauseSyntax.self)!
  }
  public var whereKeyword: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withWhereKeyword(_ whereKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawWhereClauseSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(whereKeyword), arena: arena).as(RawWhereClauseSyntax.self)!
  }
  public var unexpectedBetweenWhereKeywordAndGuardResult: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenWhereKeywordAndGuardResult(_ unexpectedBetweenWhereKeywordAndGuardResult: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawWhereClauseSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenWhereKeywordAndGuardResult.map(RawSyntax.init), arena: arena).as(RawWhereClauseSyntax.self)!
  }
  public var guardResult: RawExprSyntax {
    layoutView.children[3].map(RawExprSyntax.init(raw:))!
  }
  public func withGuardResult(_ guardResult: RawExprSyntax, arena: SyntaxArena) -> RawWhereClauseSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(guardResult), arena: arena).as(RawWhereClauseSyntax.self)!
  }
  public var unexpectedAfterGuardResult: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterGuardResult(_ unexpectedAfterGuardResult: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawWhereClauseSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterGuardResult.map(RawSyntax.init), arena: arena).as(RawWhereClauseSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawForInStmtSyntax: RawStmtSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ForInStmtSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .forInStmt
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeForKeyword: RawUnexpectedNodesSyntax? = nil,
    forKeyword: RawTokenSyntax,
    _ unexpectedBetweenForKeywordAndTryKeyword: RawUnexpectedNodesSyntax? = nil,
    tryKeyword: RawTokenSyntax?,
    _ unexpectedBetweenTryKeywordAndAwaitKeyword: RawUnexpectedNodesSyntax? = nil,
    awaitKeyword: RawTokenSyntax?,
    _ unexpectedBetweenAwaitKeywordAndCaseKeyword: RawUnexpectedNodesSyntax? = nil,
    caseKeyword: RawTokenSyntax?,
    _ unexpectedBetweenCaseKeywordAndPattern: RawUnexpectedNodesSyntax? = nil,
    pattern: RawPatternSyntax,
    _ unexpectedBetweenPatternAndTypeAnnotation: RawUnexpectedNodesSyntax? = nil,
    typeAnnotation: RawTypeAnnotationSyntax?,
    _ unexpectedBetweenTypeAnnotationAndInKeyword: RawUnexpectedNodesSyntax? = nil,
    inKeyword: RawTokenSyntax,
    _ unexpectedBetweenInKeywordAndSequenceExpr: RawUnexpectedNodesSyntax? = nil,
    sequenceExpr: RawExprSyntax,
    _ unexpectedBetweenSequenceExprAndWhereClause: RawUnexpectedNodesSyntax? = nil,
    whereClause: RawWhereClauseSyntax?,
    _ unexpectedBetweenWhereClauseAndBody: RawUnexpectedNodesSyntax? = nil,
    body: RawCodeBlockSyntax,
    _ unexpectedAfterBody: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .forInStmt, uninitializedCount: 21, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeForKeyword?.raw
      layout[1] = forKeyword.raw
      layout[2] = unexpectedBetweenForKeywordAndTryKeyword?.raw
      layout[3] = tryKeyword?.raw
      layout[4] = unexpectedBetweenTryKeywordAndAwaitKeyword?.raw
      layout[5] = awaitKeyword?.raw
      layout[6] = unexpectedBetweenAwaitKeywordAndCaseKeyword?.raw
      layout[7] = caseKeyword?.raw
      layout[8] = unexpectedBetweenCaseKeywordAndPattern?.raw
      layout[9] = pattern.raw
      layout[10] = unexpectedBetweenPatternAndTypeAnnotation?.raw
      layout[11] = typeAnnotation?.raw
      layout[12] = unexpectedBetweenTypeAnnotationAndInKeyword?.raw
      layout[13] = inKeyword.raw
      layout[14] = unexpectedBetweenInKeywordAndSequenceExpr?.raw
      layout[15] = sequenceExpr.raw
      layout[16] = unexpectedBetweenSequenceExprAndWhereClause?.raw
      layout[17] = whereClause?.raw
      layout[18] = unexpectedBetweenWhereClauseAndBody?.raw
      layout[19] = body.raw
      layout[20] = unexpectedAfterBody?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeForKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeForKeyword(_ unexpectedBeforeForKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawForInStmtSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeForKeyword.map(RawSyntax.init), arena: arena).as(RawForInStmtSyntax.self)!
  }
  public var forKeyword: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withForKeyword(_ forKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawForInStmtSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(forKeyword), arena: arena).as(RawForInStmtSyntax.self)!
  }
  public var unexpectedBetweenForKeywordAndTryKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenForKeywordAndTryKeyword(_ unexpectedBetweenForKeywordAndTryKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawForInStmtSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenForKeywordAndTryKeyword.map(RawSyntax.init), arena: arena).as(RawForInStmtSyntax.self)!
  }
  public var tryKeyword: RawTokenSyntax? {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))
  }
  public func withTryKeyword(_ tryKeyword: RawTokenSyntax?, arena: SyntaxArena) -> RawForInStmtSyntax {
    return layoutView.replacingChild(at: 3, with: tryKeyword.map(RawSyntax.init), arena: arena).as(RawForInStmtSyntax.self)!
  }
  public var unexpectedBetweenTryKeywordAndAwaitKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenTryKeywordAndAwaitKeyword(_ unexpectedBetweenTryKeywordAndAwaitKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawForInStmtSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenTryKeywordAndAwaitKeyword.map(RawSyntax.init), arena: arena).as(RawForInStmtSyntax.self)!
  }
  public var awaitKeyword: RawTokenSyntax? {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))
  }
  public func withAwaitKeyword(_ awaitKeyword: RawTokenSyntax?, arena: SyntaxArena) -> RawForInStmtSyntax {
    return layoutView.replacingChild(at: 5, with: awaitKeyword.map(RawSyntax.init), arena: arena).as(RawForInStmtSyntax.self)!
  }
  public var unexpectedBetweenAwaitKeywordAndCaseKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAwaitKeywordAndCaseKeyword(_ unexpectedBetweenAwaitKeywordAndCaseKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawForInStmtSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenAwaitKeywordAndCaseKeyword.map(RawSyntax.init), arena: arena).as(RawForInStmtSyntax.self)!
  }
  public var caseKeyword: RawTokenSyntax? {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))
  }
  public func withCaseKeyword(_ caseKeyword: RawTokenSyntax?, arena: SyntaxArena) -> RawForInStmtSyntax {
    return layoutView.replacingChild(at: 7, with: caseKeyword.map(RawSyntax.init), arena: arena).as(RawForInStmtSyntax.self)!
  }
  public var unexpectedBetweenCaseKeywordAndPattern: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenCaseKeywordAndPattern(_ unexpectedBetweenCaseKeywordAndPattern: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawForInStmtSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenCaseKeywordAndPattern.map(RawSyntax.init), arena: arena).as(RawForInStmtSyntax.self)!
  }
  public var pattern: RawPatternSyntax {
    layoutView.children[9].map(RawPatternSyntax.init(raw:))!
  }
  public func withPattern(_ pattern: RawPatternSyntax, arena: SyntaxArena) -> RawForInStmtSyntax {
    return layoutView.replacingChild(at: 9, with: RawSyntax(pattern), arena: arena).as(RawForInStmtSyntax.self)!
  }
  public var unexpectedBetweenPatternAndTypeAnnotation: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenPatternAndTypeAnnotation(_ unexpectedBetweenPatternAndTypeAnnotation: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawForInStmtSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedBetweenPatternAndTypeAnnotation.map(RawSyntax.init), arena: arena).as(RawForInStmtSyntax.self)!
  }
  public var typeAnnotation: RawTypeAnnotationSyntax? {
    layoutView.children[11].map(RawTypeAnnotationSyntax.init(raw:))
  }
  public func withTypeAnnotation(_ typeAnnotation: RawTypeAnnotationSyntax?, arena: SyntaxArena) -> RawForInStmtSyntax {
    return layoutView.replacingChild(at: 11, with: typeAnnotation.map(RawSyntax.init), arena: arena).as(RawForInStmtSyntax.self)!
  }
  public var unexpectedBetweenTypeAnnotationAndInKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[12].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenTypeAnnotationAndInKeyword(_ unexpectedBetweenTypeAnnotationAndInKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawForInStmtSyntax {
    return layoutView.replacingChild(at: 12, with: unexpectedBetweenTypeAnnotationAndInKeyword.map(RawSyntax.init), arena: arena).as(RawForInStmtSyntax.self)!
  }
  public var inKeyword: RawTokenSyntax {
    layoutView.children[13].map(RawTokenSyntax.init(raw:))!
  }
  public func withInKeyword(_ inKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawForInStmtSyntax {
    return layoutView.replacingChild(at: 13, with: RawSyntax(inKeyword), arena: arena).as(RawForInStmtSyntax.self)!
  }
  public var unexpectedBetweenInKeywordAndSequenceExpr: RawUnexpectedNodesSyntax? {
    layoutView.children[14].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenInKeywordAndSequenceExpr(_ unexpectedBetweenInKeywordAndSequenceExpr: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawForInStmtSyntax {
    return layoutView.replacingChild(at: 14, with: unexpectedBetweenInKeywordAndSequenceExpr.map(RawSyntax.init), arena: arena).as(RawForInStmtSyntax.self)!
  }
  public var sequenceExpr: RawExprSyntax {
    layoutView.children[15].map(RawExprSyntax.init(raw:))!
  }
  public func withSequenceExpr(_ sequenceExpr: RawExprSyntax, arena: SyntaxArena) -> RawForInStmtSyntax {
    return layoutView.replacingChild(at: 15, with: RawSyntax(sequenceExpr), arena: arena).as(RawForInStmtSyntax.self)!
  }
  public var unexpectedBetweenSequenceExprAndWhereClause: RawUnexpectedNodesSyntax? {
    layoutView.children[16].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenSequenceExprAndWhereClause(_ unexpectedBetweenSequenceExprAndWhereClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawForInStmtSyntax {
    return layoutView.replacingChild(at: 16, with: unexpectedBetweenSequenceExprAndWhereClause.map(RawSyntax.init), arena: arena).as(RawForInStmtSyntax.self)!
  }
  public var whereClause: RawWhereClauseSyntax? {
    layoutView.children[17].map(RawWhereClauseSyntax.init(raw:))
  }
  public func withWhereClause(_ whereClause: RawWhereClauseSyntax?, arena: SyntaxArena) -> RawForInStmtSyntax {
    return layoutView.replacingChild(at: 17, with: whereClause.map(RawSyntax.init), arena: arena).as(RawForInStmtSyntax.self)!
  }
  public var unexpectedBetweenWhereClauseAndBody: RawUnexpectedNodesSyntax? {
    layoutView.children[18].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenWhereClauseAndBody(_ unexpectedBetweenWhereClauseAndBody: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawForInStmtSyntax {
    return layoutView.replacingChild(at: 18, with: unexpectedBetweenWhereClauseAndBody.map(RawSyntax.init), arena: arena).as(RawForInStmtSyntax.self)!
  }
  public var body: RawCodeBlockSyntax {
    layoutView.children[19].map(RawCodeBlockSyntax.init(raw:))!
  }
  public func withBody(_ body: RawCodeBlockSyntax, arena: SyntaxArena) -> RawForInStmtSyntax {
    return layoutView.replacingChild(at: 19, with: RawSyntax(body), arena: arena).as(RawForInStmtSyntax.self)!
  }
  public var unexpectedAfterBody: RawUnexpectedNodesSyntax? {
    layoutView.children[20].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterBody(_ unexpectedAfterBody: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawForInStmtSyntax {
    return layoutView.replacingChild(at: 20, with: unexpectedAfterBody.map(RawSyntax.init), arena: arena).as(RawForInStmtSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawSwitchStmtSyntax: RawStmtSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = SwitchStmtSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .switchStmt
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeSwitchKeyword: RawUnexpectedNodesSyntax? = nil,
    switchKeyword: RawTokenSyntax,
    _ unexpectedBetweenSwitchKeywordAndExpression: RawUnexpectedNodesSyntax? = nil,
    expression: RawExprSyntax,
    _ unexpectedBetweenExpressionAndLeftBrace: RawUnexpectedNodesSyntax? = nil,
    leftBrace: RawTokenSyntax,
    _ unexpectedBetweenLeftBraceAndCases: RawUnexpectedNodesSyntax? = nil,
    cases: RawSwitchCaseListSyntax,
    _ unexpectedBetweenCasesAndRightBrace: RawUnexpectedNodesSyntax? = nil,
    rightBrace: RawTokenSyntax,
    _ unexpectedAfterRightBrace: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .switchStmt, uninitializedCount: 11, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeSwitchKeyword?.raw
      layout[1] = switchKeyword.raw
      layout[2] = unexpectedBetweenSwitchKeywordAndExpression?.raw
      layout[3] = expression.raw
      layout[4] = unexpectedBetweenExpressionAndLeftBrace?.raw
      layout[5] = leftBrace.raw
      layout[6] = unexpectedBetweenLeftBraceAndCases?.raw
      layout[7] = cases.raw
      layout[8] = unexpectedBetweenCasesAndRightBrace?.raw
      layout[9] = rightBrace.raw
      layout[10] = unexpectedAfterRightBrace?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeSwitchKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeSwitchKeyword(_ unexpectedBeforeSwitchKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSwitchStmtSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeSwitchKeyword.map(RawSyntax.init), arena: arena).as(RawSwitchStmtSyntax.self)!
  }
  public var switchKeyword: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withSwitchKeyword(_ switchKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawSwitchStmtSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(switchKeyword), arena: arena).as(RawSwitchStmtSyntax.self)!
  }
  public var unexpectedBetweenSwitchKeywordAndExpression: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenSwitchKeywordAndExpression(_ unexpectedBetweenSwitchKeywordAndExpression: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSwitchStmtSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenSwitchKeywordAndExpression.map(RawSyntax.init), arena: arena).as(RawSwitchStmtSyntax.self)!
  }
  public var expression: RawExprSyntax {
    layoutView.children[3].map(RawExprSyntax.init(raw:))!
  }
  public func withExpression(_ expression: RawExprSyntax, arena: SyntaxArena) -> RawSwitchStmtSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(expression), arena: arena).as(RawSwitchStmtSyntax.self)!
  }
  public var unexpectedBetweenExpressionAndLeftBrace: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenExpressionAndLeftBrace(_ unexpectedBetweenExpressionAndLeftBrace: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSwitchStmtSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenExpressionAndLeftBrace.map(RawSyntax.init), arena: arena).as(RawSwitchStmtSyntax.self)!
  }
  public var leftBrace: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeftBrace(_ leftBrace: RawTokenSyntax, arena: SyntaxArena) -> RawSwitchStmtSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(leftBrace), arena: arena).as(RawSwitchStmtSyntax.self)!
  }
  public var unexpectedBetweenLeftBraceAndCases: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftBraceAndCases(_ unexpectedBetweenLeftBraceAndCases: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSwitchStmtSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenLeftBraceAndCases.map(RawSyntax.init), arena: arena).as(RawSwitchStmtSyntax.self)!
  }
  public var cases: RawSwitchCaseListSyntax {
    layoutView.children[7].map(RawSwitchCaseListSyntax.init(raw:))!
  }
  public func withCases(_ cases: RawSwitchCaseListSyntax, arena: SyntaxArena) -> RawSwitchStmtSyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(cases), arena: arena).as(RawSwitchStmtSyntax.self)!
  }
  public var unexpectedBetweenCasesAndRightBrace: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenCasesAndRightBrace(_ unexpectedBetweenCasesAndRightBrace: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSwitchStmtSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenCasesAndRightBrace.map(RawSyntax.init), arena: arena).as(RawSwitchStmtSyntax.self)!
  }
  public var rightBrace: RawTokenSyntax {
    layoutView.children[9].map(RawTokenSyntax.init(raw:))!
  }
  public func withRightBrace(_ rightBrace: RawTokenSyntax, arena: SyntaxArena) -> RawSwitchStmtSyntax {
    return layoutView.replacingChild(at: 9, with: RawSyntax(rightBrace), arena: arena).as(RawSwitchStmtSyntax.self)!
  }
  public var unexpectedAfterRightBrace: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightBrace(_ unexpectedAfterRightBrace: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSwitchStmtSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedAfterRightBrace.map(RawSyntax.init), arena: arena).as(RawSwitchStmtSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawCatchClauseListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = CatchClauseListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .catchClauseList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawCatchClauseSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .catchClauseList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawCatchClauseSyntax] {
    layoutView.children.map { RawCatchClauseSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawDoStmtSyntax: RawStmtSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = DoStmtSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .doStmt
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeDoKeyword: RawUnexpectedNodesSyntax? = nil,
    doKeyword: RawTokenSyntax,
    _ unexpectedBetweenDoKeywordAndBody: RawUnexpectedNodesSyntax? = nil,
    body: RawCodeBlockSyntax,
    _ unexpectedBetweenBodyAndCatchClauses: RawUnexpectedNodesSyntax? = nil,
    catchClauses: RawCatchClauseListSyntax?,
    _ unexpectedAfterCatchClauses: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .doStmt, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeDoKeyword?.raw
      layout[1] = doKeyword.raw
      layout[2] = unexpectedBetweenDoKeywordAndBody?.raw
      layout[3] = body.raw
      layout[4] = unexpectedBetweenBodyAndCatchClauses?.raw
      layout[5] = catchClauses?.raw
      layout[6] = unexpectedAfterCatchClauses?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeDoKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeDoKeyword(_ unexpectedBeforeDoKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDoStmtSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeDoKeyword.map(RawSyntax.init), arena: arena).as(RawDoStmtSyntax.self)!
  }
  public var doKeyword: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withDoKeyword(_ doKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawDoStmtSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(doKeyword), arena: arena).as(RawDoStmtSyntax.self)!
  }
  public var unexpectedBetweenDoKeywordAndBody: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenDoKeywordAndBody(_ unexpectedBetweenDoKeywordAndBody: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDoStmtSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenDoKeywordAndBody.map(RawSyntax.init), arena: arena).as(RawDoStmtSyntax.self)!
  }
  public var body: RawCodeBlockSyntax {
    layoutView.children[3].map(RawCodeBlockSyntax.init(raw:))!
  }
  public func withBody(_ body: RawCodeBlockSyntax, arena: SyntaxArena) -> RawDoStmtSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(body), arena: arena).as(RawDoStmtSyntax.self)!
  }
  public var unexpectedBetweenBodyAndCatchClauses: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenBodyAndCatchClauses(_ unexpectedBetweenBodyAndCatchClauses: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDoStmtSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenBodyAndCatchClauses.map(RawSyntax.init), arena: arena).as(RawDoStmtSyntax.self)!
  }
  public var catchClauses: RawCatchClauseListSyntax? {
    layoutView.children[5].map(RawCatchClauseListSyntax.init(raw:))
  }
  public func withCatchClauses(_ catchClauses: RawCatchClauseListSyntax?, arena: SyntaxArena) -> RawDoStmtSyntax {
    return layoutView.replacingChild(at: 5, with: catchClauses.map(RawSyntax.init), arena: arena).as(RawDoStmtSyntax.self)!
  }
  public var unexpectedAfterCatchClauses: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterCatchClauses(_ unexpectedAfterCatchClauses: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDoStmtSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterCatchClauses.map(RawSyntax.init), arena: arena).as(RawDoStmtSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawReturnStmtSyntax: RawStmtSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ReturnStmtSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .returnStmt
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeReturnKeyword: RawUnexpectedNodesSyntax? = nil,
    returnKeyword: RawTokenSyntax,
    _ unexpectedBetweenReturnKeywordAndExpression: RawUnexpectedNodesSyntax? = nil,
    expression: RawExprSyntax?,
    _ unexpectedAfterExpression: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .returnStmt, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeReturnKeyword?.raw
      layout[1] = returnKeyword.raw
      layout[2] = unexpectedBetweenReturnKeywordAndExpression?.raw
      layout[3] = expression?.raw
      layout[4] = unexpectedAfterExpression?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeReturnKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeReturnKeyword(_ unexpectedBeforeReturnKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawReturnStmtSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeReturnKeyword.map(RawSyntax.init), arena: arena).as(RawReturnStmtSyntax.self)!
  }
  public var returnKeyword: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withReturnKeyword(_ returnKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawReturnStmtSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(returnKeyword), arena: arena).as(RawReturnStmtSyntax.self)!
  }
  public var unexpectedBetweenReturnKeywordAndExpression: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenReturnKeywordAndExpression(_ unexpectedBetweenReturnKeywordAndExpression: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawReturnStmtSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenReturnKeywordAndExpression.map(RawSyntax.init), arena: arena).as(RawReturnStmtSyntax.self)!
  }
  public var expression: RawExprSyntax? {
    layoutView.children[3].map(RawExprSyntax.init(raw:))
  }
  public func withExpression(_ expression: RawExprSyntax?, arena: SyntaxArena) -> RawReturnStmtSyntax {
    return layoutView.replacingChild(at: 3, with: expression.map(RawSyntax.init), arena: arena).as(RawReturnStmtSyntax.self)!
  }
  public var unexpectedAfterExpression: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterExpression(_ unexpectedAfterExpression: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawReturnStmtSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterExpression.map(RawSyntax.init), arena: arena).as(RawReturnStmtSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawYieldStmtSyntax: RawStmtSyntaxNodeProtocol, RawSyntaxToSyntax {
  public enum Yields: RawSyntaxNodeProtocol {
    case `yieldList`(RawYieldListSyntax)
    case `simpleYield`(RawExprSyntax)

    public static func isKindOf(_ raw: RawSyntax) -> Bool {
      return RawYieldListSyntax.isKindOf(raw) || RawExprSyntax.isKindOf(raw)
    }

    public var raw: RawSyntax {
      switch self {
      case .yieldList(let node): return node.raw
      case .simpleYield(let node): return node.raw
      }
    }

    public init?<T>(_ other: T) where T : RawSyntaxNodeProtocol {
      if let node = RawYieldListSyntax(other) {
        self = .yieldList(node)
        return
      }
      if let node = RawExprSyntax(other) {
        self = .simpleYield(node)
        return
      }
      return nil
    }
  }

  public typealias SyntaxType = YieldStmtSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .yieldStmt
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeYieldKeyword: RawUnexpectedNodesSyntax? = nil,
    yieldKeyword: RawTokenSyntax,
    _ unexpectedBetweenYieldKeywordAndYields: RawUnexpectedNodesSyntax? = nil,
    yields: Yields,
    _ unexpectedAfterYields: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .yieldStmt, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeYieldKeyword?.raw
      layout[1] = yieldKeyword.raw
      layout[2] = unexpectedBetweenYieldKeywordAndYields?.raw
      layout[3] = yields.raw
      layout[4] = unexpectedAfterYields?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeYieldKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeYieldKeyword(_ unexpectedBeforeYieldKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawYieldStmtSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeYieldKeyword.map(RawSyntax.init), arena: arena).as(RawYieldStmtSyntax.self)!
  }
  public var yieldKeyword: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withYieldKeyword(_ yieldKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawYieldStmtSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(yieldKeyword), arena: arena).as(RawYieldStmtSyntax.self)!
  }
  public var unexpectedBetweenYieldKeywordAndYields: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenYieldKeywordAndYields(_ unexpectedBetweenYieldKeywordAndYields: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawYieldStmtSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenYieldKeywordAndYields.map(RawSyntax.init), arena: arena).as(RawYieldStmtSyntax.self)!
  }
  public var yields: RawSyntax {
    layoutView.children[3]!
  }
  public func withYields(_ yields: RawSyntax, arena: SyntaxArena) -> RawYieldStmtSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(yields), arena: arena).as(RawYieldStmtSyntax.self)!
  }
  public var unexpectedAfterYields: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterYields(_ unexpectedAfterYields: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawYieldStmtSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterYields.map(RawSyntax.init), arena: arena).as(RawYieldStmtSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawYieldListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = YieldListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .yieldList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeLeftParen: RawUnexpectedNodesSyntax? = nil,
    leftParen: RawTokenSyntax,
    _ unexpectedBetweenLeftParenAndElementList: RawUnexpectedNodesSyntax? = nil,
    elementList: RawYieldExprListSyntax,
    _ unexpectedBetweenElementListAndRightParen: RawUnexpectedNodesSyntax? = nil,
    rightParen: RawTokenSyntax,
    _ unexpectedAfterRightParen: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .yieldList, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeLeftParen?.raw
      layout[1] = leftParen.raw
      layout[2] = unexpectedBetweenLeftParenAndElementList?.raw
      layout[3] = elementList.raw
      layout[4] = unexpectedBetweenElementListAndRightParen?.raw
      layout[5] = rightParen.raw
      layout[6] = unexpectedAfterRightParen?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeLeftParen: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeLeftParen(_ unexpectedBeforeLeftParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawYieldListSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeLeftParen.map(RawSyntax.init), arena: arena).as(RawYieldListSyntax.self)!
  }
  public var leftParen: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeftParen(_ leftParen: RawTokenSyntax, arena: SyntaxArena) -> RawYieldListSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(leftParen), arena: arena).as(RawYieldListSyntax.self)!
  }
  public var unexpectedBetweenLeftParenAndElementList: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftParenAndElementList(_ unexpectedBetweenLeftParenAndElementList: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawYieldListSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenLeftParenAndElementList.map(RawSyntax.init), arena: arena).as(RawYieldListSyntax.self)!
  }
  public var elementList: RawYieldExprListSyntax {
    layoutView.children[3].map(RawYieldExprListSyntax.init(raw:))!
  }
  public func withElementList(_ elementList: RawYieldExprListSyntax, arena: SyntaxArena) -> RawYieldListSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(elementList), arena: arena).as(RawYieldListSyntax.self)!
  }
  public var unexpectedBetweenElementListAndRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenElementListAndRightParen(_ unexpectedBetweenElementListAndRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawYieldListSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenElementListAndRightParen.map(RawSyntax.init), arena: arena).as(RawYieldListSyntax.self)!
  }
  public var rightParen: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withRightParen(_ rightParen: RawTokenSyntax, arena: SyntaxArena) -> RawYieldListSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(rightParen), arena: arena).as(RawYieldListSyntax.self)!
  }
  public var unexpectedAfterRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightParen(_ unexpectedAfterRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawYieldListSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterRightParen.map(RawSyntax.init), arena: arena).as(RawYieldListSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawFallthroughStmtSyntax: RawStmtSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = FallthroughStmtSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .fallthroughStmt
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeFallthroughKeyword: RawUnexpectedNodesSyntax? = nil,
    fallthroughKeyword: RawTokenSyntax,
    _ unexpectedAfterFallthroughKeyword: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .fallthroughStmt, uninitializedCount: 3, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeFallthroughKeyword?.raw
      layout[1] = fallthroughKeyword.raw
      layout[2] = unexpectedAfterFallthroughKeyword?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeFallthroughKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeFallthroughKeyword(_ unexpectedBeforeFallthroughKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFallthroughStmtSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeFallthroughKeyword.map(RawSyntax.init), arena: arena).as(RawFallthroughStmtSyntax.self)!
  }
  public var fallthroughKeyword: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withFallthroughKeyword(_ fallthroughKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawFallthroughStmtSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(fallthroughKeyword), arena: arena).as(RawFallthroughStmtSyntax.self)!
  }
  public var unexpectedAfterFallthroughKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterFallthroughKeyword(_ unexpectedAfterFallthroughKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFallthroughStmtSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedAfterFallthroughKeyword.map(RawSyntax.init), arena: arena).as(RawFallthroughStmtSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawBreakStmtSyntax: RawStmtSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = BreakStmtSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .breakStmt
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeBreakKeyword: RawUnexpectedNodesSyntax? = nil,
    breakKeyword: RawTokenSyntax,
    _ unexpectedBetweenBreakKeywordAndLabel: RawUnexpectedNodesSyntax? = nil,
    label: RawTokenSyntax?,
    _ unexpectedAfterLabel: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .breakStmt, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeBreakKeyword?.raw
      layout[1] = breakKeyword.raw
      layout[2] = unexpectedBetweenBreakKeywordAndLabel?.raw
      layout[3] = label?.raw
      layout[4] = unexpectedAfterLabel?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeBreakKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeBreakKeyword(_ unexpectedBeforeBreakKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawBreakStmtSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeBreakKeyword.map(RawSyntax.init), arena: arena).as(RawBreakStmtSyntax.self)!
  }
  public var breakKeyword: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withBreakKeyword(_ breakKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawBreakStmtSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(breakKeyword), arena: arena).as(RawBreakStmtSyntax.self)!
  }
  public var unexpectedBetweenBreakKeywordAndLabel: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenBreakKeywordAndLabel(_ unexpectedBetweenBreakKeywordAndLabel: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawBreakStmtSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenBreakKeywordAndLabel.map(RawSyntax.init), arena: arena).as(RawBreakStmtSyntax.self)!
  }
  public var label: RawTokenSyntax? {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))
  }
  public func withLabel(_ label: RawTokenSyntax?, arena: SyntaxArena) -> RawBreakStmtSyntax {
    return layoutView.replacingChild(at: 3, with: label.map(RawSyntax.init), arena: arena).as(RawBreakStmtSyntax.self)!
  }
  public var unexpectedAfterLabel: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterLabel(_ unexpectedAfterLabel: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawBreakStmtSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterLabel.map(RawSyntax.init), arena: arena).as(RawBreakStmtSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawCaseItemListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = CaseItemListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .caseItemList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawCaseItemSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .caseItemList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawCaseItemSyntax] {
    layoutView.children.map { RawCaseItemSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawCatchItemListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = CatchItemListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .catchItemList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawCatchItemSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .catchItemList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawCatchItemSyntax] {
    layoutView.children.map { RawCatchItemSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawConditionElementSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public enum Condition: RawSyntaxNodeProtocol {
    case `expression`(RawExprSyntax)
    case `availability`(RawAvailabilityConditionSyntax)
    case `unavailability`(RawUnavailabilityConditionSyntax)
    case `matchingPattern`(RawMatchingPatternConditionSyntax)
    case `optionalBinding`(RawOptionalBindingConditionSyntax)
    case `hasSymbol`(RawHasSymbolConditionSyntax)

    public static func isKindOf(_ raw: RawSyntax) -> Bool {
      return RawExprSyntax.isKindOf(raw) || RawAvailabilityConditionSyntax.isKindOf(raw) || RawUnavailabilityConditionSyntax.isKindOf(raw) || RawMatchingPatternConditionSyntax.isKindOf(raw) || RawOptionalBindingConditionSyntax.isKindOf(raw) || RawHasSymbolConditionSyntax.isKindOf(raw)
    }

    public var raw: RawSyntax {
      switch self {
      case .expression(let node): return node.raw
      case .availability(let node): return node.raw
      case .unavailability(let node): return node.raw
      case .matchingPattern(let node): return node.raw
      case .optionalBinding(let node): return node.raw
      case .hasSymbol(let node): return node.raw
      }
    }

    public init?<T>(_ other: T) where T : RawSyntaxNodeProtocol {
      if let node = RawExprSyntax(other) {
        self = .expression(node)
        return
      }
      if let node = RawAvailabilityConditionSyntax(other) {
        self = .availability(node)
        return
      }
      if let node = RawUnavailabilityConditionSyntax(other) {
        self = .unavailability(node)
        return
      }
      if let node = RawMatchingPatternConditionSyntax(other) {
        self = .matchingPattern(node)
        return
      }
      if let node = RawOptionalBindingConditionSyntax(other) {
        self = .optionalBinding(node)
        return
      }
      if let node = RawHasSymbolConditionSyntax(other) {
        self = .hasSymbol(node)
        return
      }
      return nil
    }
  }

  public typealias SyntaxType = ConditionElementSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .conditionElement
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeCondition: RawUnexpectedNodesSyntax? = nil,
    condition: Condition,
    _ unexpectedBetweenConditionAndTrailingComma: RawUnexpectedNodesSyntax? = nil,
    trailingComma: RawTokenSyntax?,
    _ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .conditionElement, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeCondition?.raw
      layout[1] = condition.raw
      layout[2] = unexpectedBetweenConditionAndTrailingComma?.raw
      layout[3] = trailingComma?.raw
      layout[4] = unexpectedAfterTrailingComma?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeCondition: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeCondition(_ unexpectedBeforeCondition: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawConditionElementSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeCondition.map(RawSyntax.init), arena: arena).as(RawConditionElementSyntax.self)!
  }
  public var condition: RawSyntax {
    layoutView.children[1]!
  }
  public func withCondition(_ condition: RawSyntax, arena: SyntaxArena) -> RawConditionElementSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(condition), arena: arena).as(RawConditionElementSyntax.self)!
  }
  public var unexpectedBetweenConditionAndTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenConditionAndTrailingComma(_ unexpectedBetweenConditionAndTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawConditionElementSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenConditionAndTrailingComma.map(RawSyntax.init), arena: arena).as(RawConditionElementSyntax.self)!
  }
  public var trailingComma: RawTokenSyntax? {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))
  }
  public func withTrailingComma(_ trailingComma: RawTokenSyntax?, arena: SyntaxArena) -> RawConditionElementSyntax {
    return layoutView.replacingChild(at: 3, with: trailingComma.map(RawSyntax.init), arena: arena).as(RawConditionElementSyntax.self)!
  }
  public var unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterTrailingComma(_ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawConditionElementSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterTrailingComma.map(RawSyntax.init), arena: arena).as(RawConditionElementSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawAvailabilityConditionSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = AvailabilityConditionSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .availabilityCondition
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforePoundAvailableKeyword: RawUnexpectedNodesSyntax? = nil,
    poundAvailableKeyword: RawTokenSyntax,
    _ unexpectedBetweenPoundAvailableKeywordAndLeftParen: RawUnexpectedNodesSyntax? = nil,
    leftParen: RawTokenSyntax,
    _ unexpectedBetweenLeftParenAndAvailabilitySpec: RawUnexpectedNodesSyntax? = nil,
    availabilitySpec: RawAvailabilitySpecListSyntax,
    _ unexpectedBetweenAvailabilitySpecAndRightParen: RawUnexpectedNodesSyntax? = nil,
    rightParen: RawTokenSyntax,
    _ unexpectedAfterRightParen: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .availabilityCondition, uninitializedCount: 9, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforePoundAvailableKeyword?.raw
      layout[1] = poundAvailableKeyword.raw
      layout[2] = unexpectedBetweenPoundAvailableKeywordAndLeftParen?.raw
      layout[3] = leftParen.raw
      layout[4] = unexpectedBetweenLeftParenAndAvailabilitySpec?.raw
      layout[5] = availabilitySpec.raw
      layout[6] = unexpectedBetweenAvailabilitySpecAndRightParen?.raw
      layout[7] = rightParen.raw
      layout[8] = unexpectedAfterRightParen?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforePoundAvailableKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforePoundAvailableKeyword(_ unexpectedBeforePoundAvailableKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAvailabilityConditionSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforePoundAvailableKeyword.map(RawSyntax.init), arena: arena).as(RawAvailabilityConditionSyntax.self)!
  }
  public var poundAvailableKeyword: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withPoundAvailableKeyword(_ poundAvailableKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawAvailabilityConditionSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(poundAvailableKeyword), arena: arena).as(RawAvailabilityConditionSyntax.self)!
  }
  public var unexpectedBetweenPoundAvailableKeywordAndLeftParen: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenPoundAvailableKeywordAndLeftParen(_ unexpectedBetweenPoundAvailableKeywordAndLeftParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAvailabilityConditionSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenPoundAvailableKeywordAndLeftParen.map(RawSyntax.init), arena: arena).as(RawAvailabilityConditionSyntax.self)!
  }
  public var leftParen: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeftParen(_ leftParen: RawTokenSyntax, arena: SyntaxArena) -> RawAvailabilityConditionSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(leftParen), arena: arena).as(RawAvailabilityConditionSyntax.self)!
  }
  public var unexpectedBetweenLeftParenAndAvailabilitySpec: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftParenAndAvailabilitySpec(_ unexpectedBetweenLeftParenAndAvailabilitySpec: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAvailabilityConditionSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenLeftParenAndAvailabilitySpec.map(RawSyntax.init), arena: arena).as(RawAvailabilityConditionSyntax.self)!
  }
  public var availabilitySpec: RawAvailabilitySpecListSyntax {
    layoutView.children[5].map(RawAvailabilitySpecListSyntax.init(raw:))!
  }
  public func withAvailabilitySpec(_ availabilitySpec: RawAvailabilitySpecListSyntax, arena: SyntaxArena) -> RawAvailabilityConditionSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(availabilitySpec), arena: arena).as(RawAvailabilityConditionSyntax.self)!
  }
  public var unexpectedBetweenAvailabilitySpecAndRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAvailabilitySpecAndRightParen(_ unexpectedBetweenAvailabilitySpecAndRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAvailabilityConditionSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenAvailabilitySpecAndRightParen.map(RawSyntax.init), arena: arena).as(RawAvailabilityConditionSyntax.self)!
  }
  public var rightParen: RawTokenSyntax {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))!
  }
  public func withRightParen(_ rightParen: RawTokenSyntax, arena: SyntaxArena) -> RawAvailabilityConditionSyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(rightParen), arena: arena).as(RawAvailabilityConditionSyntax.self)!
  }
  public var unexpectedAfterRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightParen(_ unexpectedAfterRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAvailabilityConditionSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedAfterRightParen.map(RawSyntax.init), arena: arena).as(RawAvailabilityConditionSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawMatchingPatternConditionSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = MatchingPatternConditionSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .matchingPatternCondition
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeCaseKeyword: RawUnexpectedNodesSyntax? = nil,
    caseKeyword: RawTokenSyntax,
    _ unexpectedBetweenCaseKeywordAndPattern: RawUnexpectedNodesSyntax? = nil,
    pattern: RawPatternSyntax,
    _ unexpectedBetweenPatternAndTypeAnnotation: RawUnexpectedNodesSyntax? = nil,
    typeAnnotation: RawTypeAnnotationSyntax?,
    _ unexpectedBetweenTypeAnnotationAndInitializer: RawUnexpectedNodesSyntax? = nil,
    initializer: RawInitializerClauseSyntax,
    _ unexpectedAfterInitializer: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .matchingPatternCondition, uninitializedCount: 9, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeCaseKeyword?.raw
      layout[1] = caseKeyword.raw
      layout[2] = unexpectedBetweenCaseKeywordAndPattern?.raw
      layout[3] = pattern.raw
      layout[4] = unexpectedBetweenPatternAndTypeAnnotation?.raw
      layout[5] = typeAnnotation?.raw
      layout[6] = unexpectedBetweenTypeAnnotationAndInitializer?.raw
      layout[7] = initializer.raw
      layout[8] = unexpectedAfterInitializer?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeCaseKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeCaseKeyword(_ unexpectedBeforeCaseKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMatchingPatternConditionSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeCaseKeyword.map(RawSyntax.init), arena: arena).as(RawMatchingPatternConditionSyntax.self)!
  }
  public var caseKeyword: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withCaseKeyword(_ caseKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawMatchingPatternConditionSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(caseKeyword), arena: arena).as(RawMatchingPatternConditionSyntax.self)!
  }
  public var unexpectedBetweenCaseKeywordAndPattern: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenCaseKeywordAndPattern(_ unexpectedBetweenCaseKeywordAndPattern: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMatchingPatternConditionSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenCaseKeywordAndPattern.map(RawSyntax.init), arena: arena).as(RawMatchingPatternConditionSyntax.self)!
  }
  public var pattern: RawPatternSyntax {
    layoutView.children[3].map(RawPatternSyntax.init(raw:))!
  }
  public func withPattern(_ pattern: RawPatternSyntax, arena: SyntaxArena) -> RawMatchingPatternConditionSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(pattern), arena: arena).as(RawMatchingPatternConditionSyntax.self)!
  }
  public var unexpectedBetweenPatternAndTypeAnnotation: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenPatternAndTypeAnnotation(_ unexpectedBetweenPatternAndTypeAnnotation: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMatchingPatternConditionSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenPatternAndTypeAnnotation.map(RawSyntax.init), arena: arena).as(RawMatchingPatternConditionSyntax.self)!
  }
  public var typeAnnotation: RawTypeAnnotationSyntax? {
    layoutView.children[5].map(RawTypeAnnotationSyntax.init(raw:))
  }
  public func withTypeAnnotation(_ typeAnnotation: RawTypeAnnotationSyntax?, arena: SyntaxArena) -> RawMatchingPatternConditionSyntax {
    return layoutView.replacingChild(at: 5, with: typeAnnotation.map(RawSyntax.init), arena: arena).as(RawMatchingPatternConditionSyntax.self)!
  }
  public var unexpectedBetweenTypeAnnotationAndInitializer: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenTypeAnnotationAndInitializer(_ unexpectedBetweenTypeAnnotationAndInitializer: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMatchingPatternConditionSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenTypeAnnotationAndInitializer.map(RawSyntax.init), arena: arena).as(RawMatchingPatternConditionSyntax.self)!
  }
  public var initializer: RawInitializerClauseSyntax {
    layoutView.children[7].map(RawInitializerClauseSyntax.init(raw:))!
  }
  public func withInitializer(_ initializer: RawInitializerClauseSyntax, arena: SyntaxArena) -> RawMatchingPatternConditionSyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(initializer), arena: arena).as(RawMatchingPatternConditionSyntax.self)!
  }
  public var unexpectedAfterInitializer: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterInitializer(_ unexpectedAfterInitializer: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMatchingPatternConditionSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedAfterInitializer.map(RawSyntax.init), arena: arena).as(RawMatchingPatternConditionSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawOptionalBindingConditionSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = OptionalBindingConditionSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .optionalBindingCondition
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeLetOrVarKeyword: RawUnexpectedNodesSyntax? = nil,
    letOrVarKeyword: RawTokenSyntax,
    _ unexpectedBetweenLetOrVarKeywordAndPattern: RawUnexpectedNodesSyntax? = nil,
    pattern: RawPatternSyntax,
    _ unexpectedBetweenPatternAndTypeAnnotation: RawUnexpectedNodesSyntax? = nil,
    typeAnnotation: RawTypeAnnotationSyntax?,
    _ unexpectedBetweenTypeAnnotationAndInitializer: RawUnexpectedNodesSyntax? = nil,
    initializer: RawInitializerClauseSyntax?,
    _ unexpectedAfterInitializer: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .optionalBindingCondition, uninitializedCount: 9, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeLetOrVarKeyword?.raw
      layout[1] = letOrVarKeyword.raw
      layout[2] = unexpectedBetweenLetOrVarKeywordAndPattern?.raw
      layout[3] = pattern.raw
      layout[4] = unexpectedBetweenPatternAndTypeAnnotation?.raw
      layout[5] = typeAnnotation?.raw
      layout[6] = unexpectedBetweenTypeAnnotationAndInitializer?.raw
      layout[7] = initializer?.raw
      layout[8] = unexpectedAfterInitializer?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeLetOrVarKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeLetOrVarKeyword(_ unexpectedBeforeLetOrVarKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawOptionalBindingConditionSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeLetOrVarKeyword.map(RawSyntax.init), arena: arena).as(RawOptionalBindingConditionSyntax.self)!
  }
  public var letOrVarKeyword: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withLetOrVarKeyword(_ letOrVarKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawOptionalBindingConditionSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(letOrVarKeyword), arena: arena).as(RawOptionalBindingConditionSyntax.self)!
  }
  public var unexpectedBetweenLetOrVarKeywordAndPattern: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLetOrVarKeywordAndPattern(_ unexpectedBetweenLetOrVarKeywordAndPattern: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawOptionalBindingConditionSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenLetOrVarKeywordAndPattern.map(RawSyntax.init), arena: arena).as(RawOptionalBindingConditionSyntax.self)!
  }
  public var pattern: RawPatternSyntax {
    layoutView.children[3].map(RawPatternSyntax.init(raw:))!
  }
  public func withPattern(_ pattern: RawPatternSyntax, arena: SyntaxArena) -> RawOptionalBindingConditionSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(pattern), arena: arena).as(RawOptionalBindingConditionSyntax.self)!
  }
  public var unexpectedBetweenPatternAndTypeAnnotation: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenPatternAndTypeAnnotation(_ unexpectedBetweenPatternAndTypeAnnotation: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawOptionalBindingConditionSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenPatternAndTypeAnnotation.map(RawSyntax.init), arena: arena).as(RawOptionalBindingConditionSyntax.self)!
  }
  public var typeAnnotation: RawTypeAnnotationSyntax? {
    layoutView.children[5].map(RawTypeAnnotationSyntax.init(raw:))
  }
  public func withTypeAnnotation(_ typeAnnotation: RawTypeAnnotationSyntax?, arena: SyntaxArena) -> RawOptionalBindingConditionSyntax {
    return layoutView.replacingChild(at: 5, with: typeAnnotation.map(RawSyntax.init), arena: arena).as(RawOptionalBindingConditionSyntax.self)!
  }
  public var unexpectedBetweenTypeAnnotationAndInitializer: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenTypeAnnotationAndInitializer(_ unexpectedBetweenTypeAnnotationAndInitializer: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawOptionalBindingConditionSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenTypeAnnotationAndInitializer.map(RawSyntax.init), arena: arena).as(RawOptionalBindingConditionSyntax.self)!
  }
  public var initializer: RawInitializerClauseSyntax? {
    layoutView.children[7].map(RawInitializerClauseSyntax.init(raw:))
  }
  public func withInitializer(_ initializer: RawInitializerClauseSyntax?, arena: SyntaxArena) -> RawOptionalBindingConditionSyntax {
    return layoutView.replacingChild(at: 7, with: initializer.map(RawSyntax.init), arena: arena).as(RawOptionalBindingConditionSyntax.self)!
  }
  public var unexpectedAfterInitializer: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterInitializer(_ unexpectedAfterInitializer: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawOptionalBindingConditionSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedAfterInitializer.map(RawSyntax.init), arena: arena).as(RawOptionalBindingConditionSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawUnavailabilityConditionSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = UnavailabilityConditionSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .unavailabilityCondition
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforePoundUnavailableKeyword: RawUnexpectedNodesSyntax? = nil,
    poundUnavailableKeyword: RawTokenSyntax,
    _ unexpectedBetweenPoundUnavailableKeywordAndLeftParen: RawUnexpectedNodesSyntax? = nil,
    leftParen: RawTokenSyntax,
    _ unexpectedBetweenLeftParenAndAvailabilitySpec: RawUnexpectedNodesSyntax? = nil,
    availabilitySpec: RawAvailabilitySpecListSyntax,
    _ unexpectedBetweenAvailabilitySpecAndRightParen: RawUnexpectedNodesSyntax? = nil,
    rightParen: RawTokenSyntax,
    _ unexpectedAfterRightParen: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .unavailabilityCondition, uninitializedCount: 9, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforePoundUnavailableKeyword?.raw
      layout[1] = poundUnavailableKeyword.raw
      layout[2] = unexpectedBetweenPoundUnavailableKeywordAndLeftParen?.raw
      layout[3] = leftParen.raw
      layout[4] = unexpectedBetweenLeftParenAndAvailabilitySpec?.raw
      layout[5] = availabilitySpec.raw
      layout[6] = unexpectedBetweenAvailabilitySpecAndRightParen?.raw
      layout[7] = rightParen.raw
      layout[8] = unexpectedAfterRightParen?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforePoundUnavailableKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforePoundUnavailableKeyword(_ unexpectedBeforePoundUnavailableKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawUnavailabilityConditionSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforePoundUnavailableKeyword.map(RawSyntax.init), arena: arena).as(RawUnavailabilityConditionSyntax.self)!
  }
  public var poundUnavailableKeyword: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withPoundUnavailableKeyword(_ poundUnavailableKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawUnavailabilityConditionSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(poundUnavailableKeyword), arena: arena).as(RawUnavailabilityConditionSyntax.self)!
  }
  public var unexpectedBetweenPoundUnavailableKeywordAndLeftParen: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenPoundUnavailableKeywordAndLeftParen(_ unexpectedBetweenPoundUnavailableKeywordAndLeftParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawUnavailabilityConditionSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenPoundUnavailableKeywordAndLeftParen.map(RawSyntax.init), arena: arena).as(RawUnavailabilityConditionSyntax.self)!
  }
  public var leftParen: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeftParen(_ leftParen: RawTokenSyntax, arena: SyntaxArena) -> RawUnavailabilityConditionSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(leftParen), arena: arena).as(RawUnavailabilityConditionSyntax.self)!
  }
  public var unexpectedBetweenLeftParenAndAvailabilitySpec: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftParenAndAvailabilitySpec(_ unexpectedBetweenLeftParenAndAvailabilitySpec: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawUnavailabilityConditionSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenLeftParenAndAvailabilitySpec.map(RawSyntax.init), arena: arena).as(RawUnavailabilityConditionSyntax.self)!
  }
  public var availabilitySpec: RawAvailabilitySpecListSyntax {
    layoutView.children[5].map(RawAvailabilitySpecListSyntax.init(raw:))!
  }
  public func withAvailabilitySpec(_ availabilitySpec: RawAvailabilitySpecListSyntax, arena: SyntaxArena) -> RawUnavailabilityConditionSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(availabilitySpec), arena: arena).as(RawUnavailabilityConditionSyntax.self)!
  }
  public var unexpectedBetweenAvailabilitySpecAndRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAvailabilitySpecAndRightParen(_ unexpectedBetweenAvailabilitySpecAndRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawUnavailabilityConditionSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenAvailabilitySpecAndRightParen.map(RawSyntax.init), arena: arena).as(RawUnavailabilityConditionSyntax.self)!
  }
  public var rightParen: RawTokenSyntax {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))!
  }
  public func withRightParen(_ rightParen: RawTokenSyntax, arena: SyntaxArena) -> RawUnavailabilityConditionSyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(rightParen), arena: arena).as(RawUnavailabilityConditionSyntax.self)!
  }
  public var unexpectedAfterRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightParen(_ unexpectedAfterRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawUnavailabilityConditionSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedAfterRightParen.map(RawSyntax.init), arena: arena).as(RawUnavailabilityConditionSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawHasSymbolConditionSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = HasSymbolConditionSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .hasSymbolCondition
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeHasSymbolKeyword: RawUnexpectedNodesSyntax? = nil,
    hasSymbolKeyword: RawTokenSyntax,
    _ unexpectedBetweenHasSymbolKeywordAndLeftParen: RawUnexpectedNodesSyntax? = nil,
    leftParen: RawTokenSyntax,
    _ unexpectedBetweenLeftParenAndExpression: RawUnexpectedNodesSyntax? = nil,
    expression: RawExprSyntax,
    _ unexpectedBetweenExpressionAndRightParen: RawUnexpectedNodesSyntax? = nil,
    rightParen: RawTokenSyntax,
    _ unexpectedAfterRightParen: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .hasSymbolCondition, uninitializedCount: 9, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeHasSymbolKeyword?.raw
      layout[1] = hasSymbolKeyword.raw
      layout[2] = unexpectedBetweenHasSymbolKeywordAndLeftParen?.raw
      layout[3] = leftParen.raw
      layout[4] = unexpectedBetweenLeftParenAndExpression?.raw
      layout[5] = expression.raw
      layout[6] = unexpectedBetweenExpressionAndRightParen?.raw
      layout[7] = rightParen.raw
      layout[8] = unexpectedAfterRightParen?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeHasSymbolKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeHasSymbolKeyword(_ unexpectedBeforeHasSymbolKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawHasSymbolConditionSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeHasSymbolKeyword.map(RawSyntax.init), arena: arena).as(RawHasSymbolConditionSyntax.self)!
  }
  public var hasSymbolKeyword: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withHasSymbolKeyword(_ hasSymbolKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawHasSymbolConditionSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(hasSymbolKeyword), arena: arena).as(RawHasSymbolConditionSyntax.self)!
  }
  public var unexpectedBetweenHasSymbolKeywordAndLeftParen: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenHasSymbolKeywordAndLeftParen(_ unexpectedBetweenHasSymbolKeywordAndLeftParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawHasSymbolConditionSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenHasSymbolKeywordAndLeftParen.map(RawSyntax.init), arena: arena).as(RawHasSymbolConditionSyntax.self)!
  }
  public var leftParen: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeftParen(_ leftParen: RawTokenSyntax, arena: SyntaxArena) -> RawHasSymbolConditionSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(leftParen), arena: arena).as(RawHasSymbolConditionSyntax.self)!
  }
  public var unexpectedBetweenLeftParenAndExpression: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftParenAndExpression(_ unexpectedBetweenLeftParenAndExpression: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawHasSymbolConditionSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenLeftParenAndExpression.map(RawSyntax.init), arena: arena).as(RawHasSymbolConditionSyntax.self)!
  }
  public var expression: RawExprSyntax {
    layoutView.children[5].map(RawExprSyntax.init(raw:))!
  }
  public func withExpression(_ expression: RawExprSyntax, arena: SyntaxArena) -> RawHasSymbolConditionSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(expression), arena: arena).as(RawHasSymbolConditionSyntax.self)!
  }
  public var unexpectedBetweenExpressionAndRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenExpressionAndRightParen(_ unexpectedBetweenExpressionAndRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawHasSymbolConditionSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenExpressionAndRightParen.map(RawSyntax.init), arena: arena).as(RawHasSymbolConditionSyntax.self)!
  }
  public var rightParen: RawTokenSyntax {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))!
  }
  public func withRightParen(_ rightParen: RawTokenSyntax, arena: SyntaxArena) -> RawHasSymbolConditionSyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(rightParen), arena: arena).as(RawHasSymbolConditionSyntax.self)!
  }
  public var unexpectedAfterRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightParen(_ unexpectedAfterRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawHasSymbolConditionSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedAfterRightParen.map(RawSyntax.init), arena: arena).as(RawHasSymbolConditionSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawConditionElementListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ConditionElementListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .conditionElementList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawConditionElementSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .conditionElementList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawConditionElementSyntax] {
    layoutView.children.map { RawConditionElementSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawDeclarationStmtSyntax: RawStmtSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = DeclarationStmtSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .declarationStmt
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeDeclaration: RawUnexpectedNodesSyntax? = nil,
    declaration: RawDeclSyntax,
    _ unexpectedAfterDeclaration: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .declarationStmt, uninitializedCount: 3, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeDeclaration?.raw
      layout[1] = declaration.raw
      layout[2] = unexpectedAfterDeclaration?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeDeclaration: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeDeclaration(_ unexpectedBeforeDeclaration: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDeclarationStmtSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeDeclaration.map(RawSyntax.init), arena: arena).as(RawDeclarationStmtSyntax.self)!
  }
  public var declaration: RawDeclSyntax {
    layoutView.children[1].map(RawDeclSyntax.init(raw:))!
  }
  public func withDeclaration(_ declaration: RawDeclSyntax, arena: SyntaxArena) -> RawDeclarationStmtSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(declaration), arena: arena).as(RawDeclarationStmtSyntax.self)!
  }
  public var unexpectedAfterDeclaration: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterDeclaration(_ unexpectedAfterDeclaration: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDeclarationStmtSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedAfterDeclaration.map(RawSyntax.init), arena: arena).as(RawDeclarationStmtSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawThrowStmtSyntax: RawStmtSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ThrowStmtSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .throwStmt
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeThrowKeyword: RawUnexpectedNodesSyntax? = nil,
    throwKeyword: RawTokenSyntax,
    _ unexpectedBetweenThrowKeywordAndExpression: RawUnexpectedNodesSyntax? = nil,
    expression: RawExprSyntax,
    _ unexpectedAfterExpression: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .throwStmt, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeThrowKeyword?.raw
      layout[1] = throwKeyword.raw
      layout[2] = unexpectedBetweenThrowKeywordAndExpression?.raw
      layout[3] = expression.raw
      layout[4] = unexpectedAfterExpression?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeThrowKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeThrowKeyword(_ unexpectedBeforeThrowKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawThrowStmtSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeThrowKeyword.map(RawSyntax.init), arena: arena).as(RawThrowStmtSyntax.self)!
  }
  public var throwKeyword: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withThrowKeyword(_ throwKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawThrowStmtSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(throwKeyword), arena: arena).as(RawThrowStmtSyntax.self)!
  }
  public var unexpectedBetweenThrowKeywordAndExpression: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenThrowKeywordAndExpression(_ unexpectedBetweenThrowKeywordAndExpression: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawThrowStmtSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenThrowKeywordAndExpression.map(RawSyntax.init), arena: arena).as(RawThrowStmtSyntax.self)!
  }
  public var expression: RawExprSyntax {
    layoutView.children[3].map(RawExprSyntax.init(raw:))!
  }
  public func withExpression(_ expression: RawExprSyntax, arena: SyntaxArena) -> RawThrowStmtSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(expression), arena: arena).as(RawThrowStmtSyntax.self)!
  }
  public var unexpectedAfterExpression: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterExpression(_ unexpectedAfterExpression: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawThrowStmtSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterExpression.map(RawSyntax.init), arena: arena).as(RawThrowStmtSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawIfStmtSyntax: RawStmtSyntaxNodeProtocol, RawSyntaxToSyntax {
  public enum ElseBody: RawSyntaxNodeProtocol {
    case `ifStmt`(RawIfStmtSyntax)
    case `codeBlock`(RawCodeBlockSyntax)

    public static func isKindOf(_ raw: RawSyntax) -> Bool {
      return RawIfStmtSyntax.isKindOf(raw) || RawCodeBlockSyntax.isKindOf(raw)
    }

    public var raw: RawSyntax {
      switch self {
      case .ifStmt(let node): return node.raw
      case .codeBlock(let node): return node.raw
      }
    }

    public init?<T>(_ other: T) where T : RawSyntaxNodeProtocol {
      if let node = RawIfStmtSyntax(other) {
        self = .ifStmt(node)
        return
      }
      if let node = RawCodeBlockSyntax(other) {
        self = .codeBlock(node)
        return
      }
      return nil
    }
  }

  public typealias SyntaxType = IfStmtSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .ifStmt
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeIfKeyword: RawUnexpectedNodesSyntax? = nil,
    ifKeyword: RawTokenSyntax,
    _ unexpectedBetweenIfKeywordAndConditions: RawUnexpectedNodesSyntax? = nil,
    conditions: RawConditionElementListSyntax,
    _ unexpectedBetweenConditionsAndBody: RawUnexpectedNodesSyntax? = nil,
    body: RawCodeBlockSyntax,
    _ unexpectedBetweenBodyAndElseKeyword: RawUnexpectedNodesSyntax? = nil,
    elseKeyword: RawTokenSyntax?,
    _ unexpectedBetweenElseKeywordAndElseBody: RawUnexpectedNodesSyntax? = nil,
    elseBody: ElseBody?,
    _ unexpectedAfterElseBody: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .ifStmt, uninitializedCount: 11, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeIfKeyword?.raw
      layout[1] = ifKeyword.raw
      layout[2] = unexpectedBetweenIfKeywordAndConditions?.raw
      layout[3] = conditions.raw
      layout[4] = unexpectedBetweenConditionsAndBody?.raw
      layout[5] = body.raw
      layout[6] = unexpectedBetweenBodyAndElseKeyword?.raw
      layout[7] = elseKeyword?.raw
      layout[8] = unexpectedBetweenElseKeywordAndElseBody?.raw
      layout[9] = elseBody?.raw
      layout[10] = unexpectedAfterElseBody?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeIfKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeIfKeyword(_ unexpectedBeforeIfKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawIfStmtSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeIfKeyword.map(RawSyntax.init), arena: arena).as(RawIfStmtSyntax.self)!
  }
  public var ifKeyword: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withIfKeyword(_ ifKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawIfStmtSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(ifKeyword), arena: arena).as(RawIfStmtSyntax.self)!
  }
  public var unexpectedBetweenIfKeywordAndConditions: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenIfKeywordAndConditions(_ unexpectedBetweenIfKeywordAndConditions: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawIfStmtSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenIfKeywordAndConditions.map(RawSyntax.init), arena: arena).as(RawIfStmtSyntax.self)!
  }
  public var conditions: RawConditionElementListSyntax {
    layoutView.children[3].map(RawConditionElementListSyntax.init(raw:))!
  }
  public func withConditions(_ conditions: RawConditionElementListSyntax, arena: SyntaxArena) -> RawIfStmtSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(conditions), arena: arena).as(RawIfStmtSyntax.self)!
  }
  public var unexpectedBetweenConditionsAndBody: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenConditionsAndBody(_ unexpectedBetweenConditionsAndBody: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawIfStmtSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenConditionsAndBody.map(RawSyntax.init), arena: arena).as(RawIfStmtSyntax.self)!
  }
  public var body: RawCodeBlockSyntax {
    layoutView.children[5].map(RawCodeBlockSyntax.init(raw:))!
  }
  public func withBody(_ body: RawCodeBlockSyntax, arena: SyntaxArena) -> RawIfStmtSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(body), arena: arena).as(RawIfStmtSyntax.self)!
  }
  public var unexpectedBetweenBodyAndElseKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenBodyAndElseKeyword(_ unexpectedBetweenBodyAndElseKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawIfStmtSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenBodyAndElseKeyword.map(RawSyntax.init), arena: arena).as(RawIfStmtSyntax.self)!
  }
  public var elseKeyword: RawTokenSyntax? {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))
  }
  public func withElseKeyword(_ elseKeyword: RawTokenSyntax?, arena: SyntaxArena) -> RawIfStmtSyntax {
    return layoutView.replacingChild(at: 7, with: elseKeyword.map(RawSyntax.init), arena: arena).as(RawIfStmtSyntax.self)!
  }
  public var unexpectedBetweenElseKeywordAndElseBody: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenElseKeywordAndElseBody(_ unexpectedBetweenElseKeywordAndElseBody: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawIfStmtSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenElseKeywordAndElseBody.map(RawSyntax.init), arena: arena).as(RawIfStmtSyntax.self)!
  }
  public var elseBody: RawSyntax? {
    layoutView.children[9]
  }
  public func withElseBody(_ elseBody: RawSyntax?, arena: SyntaxArena) -> RawIfStmtSyntax {
    return layoutView.replacingChild(at: 9, with: elseBody.map(RawSyntax.init), arena: arena).as(RawIfStmtSyntax.self)!
  }
  public var unexpectedAfterElseBody: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterElseBody(_ unexpectedAfterElseBody: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawIfStmtSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedAfterElseBody.map(RawSyntax.init), arena: arena).as(RawIfStmtSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawSwitchCaseSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public enum Label: RawSyntaxNodeProtocol {
    case `default`(RawSwitchDefaultLabelSyntax)
    case `case`(RawSwitchCaseLabelSyntax)

    public static func isKindOf(_ raw: RawSyntax) -> Bool {
      return RawSwitchDefaultLabelSyntax.isKindOf(raw) || RawSwitchCaseLabelSyntax.isKindOf(raw)
    }

    public var raw: RawSyntax {
      switch self {
      case .default(let node): return node.raw
      case .case(let node): return node.raw
      }
    }

    public init?<T>(_ other: T) where T : RawSyntaxNodeProtocol {
      if let node = RawSwitchDefaultLabelSyntax(other) {
        self = .default(node)
        return
      }
      if let node = RawSwitchCaseLabelSyntax(other) {
        self = .case(node)
        return
      }
      return nil
    }
  }

  public typealias SyntaxType = SwitchCaseSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .switchCase
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeUnknownAttr: RawUnexpectedNodesSyntax? = nil,
    unknownAttr: RawAttributeSyntax?,
    _ unexpectedBetweenUnknownAttrAndLabel: RawUnexpectedNodesSyntax? = nil,
    label: Label,
    _ unexpectedBetweenLabelAndStatements: RawUnexpectedNodesSyntax? = nil,
    statements: RawCodeBlockItemListSyntax,
    _ unexpectedAfterStatements: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .switchCase, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeUnknownAttr?.raw
      layout[1] = unknownAttr?.raw
      layout[2] = unexpectedBetweenUnknownAttrAndLabel?.raw
      layout[3] = label.raw
      layout[4] = unexpectedBetweenLabelAndStatements?.raw
      layout[5] = statements.raw
      layout[6] = unexpectedAfterStatements?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeUnknownAttr: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeUnknownAttr(_ unexpectedBeforeUnknownAttr: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSwitchCaseSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeUnknownAttr.map(RawSyntax.init), arena: arena).as(RawSwitchCaseSyntax.self)!
  }
  public var unknownAttr: RawAttributeSyntax? {
    layoutView.children[1].map(RawAttributeSyntax.init(raw:))
  }
  public func withUnknownAttr(_ unknownAttr: RawAttributeSyntax?, arena: SyntaxArena) -> RawSwitchCaseSyntax {
    return layoutView.replacingChild(at: 1, with: unknownAttr.map(RawSyntax.init), arena: arena).as(RawSwitchCaseSyntax.self)!
  }
  public var unexpectedBetweenUnknownAttrAndLabel: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenUnknownAttrAndLabel(_ unexpectedBetweenUnknownAttrAndLabel: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSwitchCaseSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenUnknownAttrAndLabel.map(RawSyntax.init), arena: arena).as(RawSwitchCaseSyntax.self)!
  }
  public var label: RawSyntax {
    layoutView.children[3]!
  }
  public func withLabel(_ label: RawSyntax, arena: SyntaxArena) -> RawSwitchCaseSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(label), arena: arena).as(RawSwitchCaseSyntax.self)!
  }
  public var unexpectedBetweenLabelAndStatements: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLabelAndStatements(_ unexpectedBetweenLabelAndStatements: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSwitchCaseSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenLabelAndStatements.map(RawSyntax.init), arena: arena).as(RawSwitchCaseSyntax.self)!
  }
  public var statements: RawCodeBlockItemListSyntax {
    layoutView.children[5].map(RawCodeBlockItemListSyntax.init(raw:))!
  }
  public func withStatements(_ statements: RawCodeBlockItemListSyntax, arena: SyntaxArena) -> RawSwitchCaseSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(statements), arena: arena).as(RawSwitchCaseSyntax.self)!
  }
  public var unexpectedAfterStatements: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterStatements(_ unexpectedAfterStatements: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSwitchCaseSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterStatements.map(RawSyntax.init), arena: arena).as(RawSwitchCaseSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawSwitchDefaultLabelSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = SwitchDefaultLabelSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .switchDefaultLabel
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeDefaultKeyword: RawUnexpectedNodesSyntax? = nil,
    defaultKeyword: RawTokenSyntax,
    _ unexpectedBetweenDefaultKeywordAndColon: RawUnexpectedNodesSyntax? = nil,
    colon: RawTokenSyntax,
    _ unexpectedAfterColon: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .switchDefaultLabel, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeDefaultKeyword?.raw
      layout[1] = defaultKeyword.raw
      layout[2] = unexpectedBetweenDefaultKeywordAndColon?.raw
      layout[3] = colon.raw
      layout[4] = unexpectedAfterColon?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeDefaultKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeDefaultKeyword(_ unexpectedBeforeDefaultKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSwitchDefaultLabelSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeDefaultKeyword.map(RawSyntax.init), arena: arena).as(RawSwitchDefaultLabelSyntax.self)!
  }
  public var defaultKeyword: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withDefaultKeyword(_ defaultKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawSwitchDefaultLabelSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(defaultKeyword), arena: arena).as(RawSwitchDefaultLabelSyntax.self)!
  }
  public var unexpectedBetweenDefaultKeywordAndColon: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenDefaultKeywordAndColon(_ unexpectedBetweenDefaultKeywordAndColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSwitchDefaultLabelSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenDefaultKeywordAndColon.map(RawSyntax.init), arena: arena).as(RawSwitchDefaultLabelSyntax.self)!
  }
  public var colon: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withColon(_ colon: RawTokenSyntax, arena: SyntaxArena) -> RawSwitchDefaultLabelSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(colon), arena: arena).as(RawSwitchDefaultLabelSyntax.self)!
  }
  public var unexpectedAfterColon: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterColon(_ unexpectedAfterColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSwitchDefaultLabelSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterColon.map(RawSyntax.init), arena: arena).as(RawSwitchDefaultLabelSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawCaseItemSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = CaseItemSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .caseItem
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforePattern: RawUnexpectedNodesSyntax? = nil,
    pattern: RawPatternSyntax,
    _ unexpectedBetweenPatternAndWhereClause: RawUnexpectedNodesSyntax? = nil,
    whereClause: RawWhereClauseSyntax?,
    _ unexpectedBetweenWhereClauseAndTrailingComma: RawUnexpectedNodesSyntax? = nil,
    trailingComma: RawTokenSyntax?,
    _ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .caseItem, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforePattern?.raw
      layout[1] = pattern.raw
      layout[2] = unexpectedBetweenPatternAndWhereClause?.raw
      layout[3] = whereClause?.raw
      layout[4] = unexpectedBetweenWhereClauseAndTrailingComma?.raw
      layout[5] = trailingComma?.raw
      layout[6] = unexpectedAfterTrailingComma?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforePattern: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforePattern(_ unexpectedBeforePattern: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawCaseItemSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforePattern.map(RawSyntax.init), arena: arena).as(RawCaseItemSyntax.self)!
  }
  public var pattern: RawPatternSyntax {
    layoutView.children[1].map(RawPatternSyntax.init(raw:))!
  }
  public func withPattern(_ pattern: RawPatternSyntax, arena: SyntaxArena) -> RawCaseItemSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(pattern), arena: arena).as(RawCaseItemSyntax.self)!
  }
  public var unexpectedBetweenPatternAndWhereClause: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenPatternAndWhereClause(_ unexpectedBetweenPatternAndWhereClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawCaseItemSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenPatternAndWhereClause.map(RawSyntax.init), arena: arena).as(RawCaseItemSyntax.self)!
  }
  public var whereClause: RawWhereClauseSyntax? {
    layoutView.children[3].map(RawWhereClauseSyntax.init(raw:))
  }
  public func withWhereClause(_ whereClause: RawWhereClauseSyntax?, arena: SyntaxArena) -> RawCaseItemSyntax {
    return layoutView.replacingChild(at: 3, with: whereClause.map(RawSyntax.init), arena: arena).as(RawCaseItemSyntax.self)!
  }
  public var unexpectedBetweenWhereClauseAndTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenWhereClauseAndTrailingComma(_ unexpectedBetweenWhereClauseAndTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawCaseItemSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenWhereClauseAndTrailingComma.map(RawSyntax.init), arena: arena).as(RawCaseItemSyntax.self)!
  }
  public var trailingComma: RawTokenSyntax? {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))
  }
  public func withTrailingComma(_ trailingComma: RawTokenSyntax?, arena: SyntaxArena) -> RawCaseItemSyntax {
    return layoutView.replacingChild(at: 5, with: trailingComma.map(RawSyntax.init), arena: arena).as(RawCaseItemSyntax.self)!
  }
  public var unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterTrailingComma(_ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawCaseItemSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterTrailingComma.map(RawSyntax.init), arena: arena).as(RawCaseItemSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawCatchItemSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = CatchItemSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .catchItem
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforePattern: RawUnexpectedNodesSyntax? = nil,
    pattern: RawPatternSyntax?,
    _ unexpectedBetweenPatternAndWhereClause: RawUnexpectedNodesSyntax? = nil,
    whereClause: RawWhereClauseSyntax?,
    _ unexpectedBetweenWhereClauseAndTrailingComma: RawUnexpectedNodesSyntax? = nil,
    trailingComma: RawTokenSyntax?,
    _ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .catchItem, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforePattern?.raw
      layout[1] = pattern?.raw
      layout[2] = unexpectedBetweenPatternAndWhereClause?.raw
      layout[3] = whereClause?.raw
      layout[4] = unexpectedBetweenWhereClauseAndTrailingComma?.raw
      layout[5] = trailingComma?.raw
      layout[6] = unexpectedAfterTrailingComma?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforePattern: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforePattern(_ unexpectedBeforePattern: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawCatchItemSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforePattern.map(RawSyntax.init), arena: arena).as(RawCatchItemSyntax.self)!
  }
  public var pattern: RawPatternSyntax? {
    layoutView.children[1].map(RawPatternSyntax.init(raw:))
  }
  public func withPattern(_ pattern: RawPatternSyntax?, arena: SyntaxArena) -> RawCatchItemSyntax {
    return layoutView.replacingChild(at: 1, with: pattern.map(RawSyntax.init), arena: arena).as(RawCatchItemSyntax.self)!
  }
  public var unexpectedBetweenPatternAndWhereClause: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenPatternAndWhereClause(_ unexpectedBetweenPatternAndWhereClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawCatchItemSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenPatternAndWhereClause.map(RawSyntax.init), arena: arena).as(RawCatchItemSyntax.self)!
  }
  public var whereClause: RawWhereClauseSyntax? {
    layoutView.children[3].map(RawWhereClauseSyntax.init(raw:))
  }
  public func withWhereClause(_ whereClause: RawWhereClauseSyntax?, arena: SyntaxArena) -> RawCatchItemSyntax {
    return layoutView.replacingChild(at: 3, with: whereClause.map(RawSyntax.init), arena: arena).as(RawCatchItemSyntax.self)!
  }
  public var unexpectedBetweenWhereClauseAndTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenWhereClauseAndTrailingComma(_ unexpectedBetweenWhereClauseAndTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawCatchItemSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenWhereClauseAndTrailingComma.map(RawSyntax.init), arena: arena).as(RawCatchItemSyntax.self)!
  }
  public var trailingComma: RawTokenSyntax? {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))
  }
  public func withTrailingComma(_ trailingComma: RawTokenSyntax?, arena: SyntaxArena) -> RawCatchItemSyntax {
    return layoutView.replacingChild(at: 5, with: trailingComma.map(RawSyntax.init), arena: arena).as(RawCatchItemSyntax.self)!
  }
  public var unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterTrailingComma(_ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawCatchItemSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterTrailingComma.map(RawSyntax.init), arena: arena).as(RawCatchItemSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawSwitchCaseLabelSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = SwitchCaseLabelSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .switchCaseLabel
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeCaseKeyword: RawUnexpectedNodesSyntax? = nil,
    caseKeyword: RawTokenSyntax,
    _ unexpectedBetweenCaseKeywordAndCaseItems: RawUnexpectedNodesSyntax? = nil,
    caseItems: RawCaseItemListSyntax,
    _ unexpectedBetweenCaseItemsAndColon: RawUnexpectedNodesSyntax? = nil,
    colon: RawTokenSyntax,
    _ unexpectedAfterColon: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .switchCaseLabel, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeCaseKeyword?.raw
      layout[1] = caseKeyword.raw
      layout[2] = unexpectedBetweenCaseKeywordAndCaseItems?.raw
      layout[3] = caseItems.raw
      layout[4] = unexpectedBetweenCaseItemsAndColon?.raw
      layout[5] = colon.raw
      layout[6] = unexpectedAfterColon?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeCaseKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeCaseKeyword(_ unexpectedBeforeCaseKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSwitchCaseLabelSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeCaseKeyword.map(RawSyntax.init), arena: arena).as(RawSwitchCaseLabelSyntax.self)!
  }
  public var caseKeyword: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withCaseKeyword(_ caseKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawSwitchCaseLabelSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(caseKeyword), arena: arena).as(RawSwitchCaseLabelSyntax.self)!
  }
  public var unexpectedBetweenCaseKeywordAndCaseItems: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenCaseKeywordAndCaseItems(_ unexpectedBetweenCaseKeywordAndCaseItems: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSwitchCaseLabelSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenCaseKeywordAndCaseItems.map(RawSyntax.init), arena: arena).as(RawSwitchCaseLabelSyntax.self)!
  }
  public var caseItems: RawCaseItemListSyntax {
    layoutView.children[3].map(RawCaseItemListSyntax.init(raw:))!
  }
  public func withCaseItems(_ caseItems: RawCaseItemListSyntax, arena: SyntaxArena) -> RawSwitchCaseLabelSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(caseItems), arena: arena).as(RawSwitchCaseLabelSyntax.self)!
  }
  public var unexpectedBetweenCaseItemsAndColon: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenCaseItemsAndColon(_ unexpectedBetweenCaseItemsAndColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSwitchCaseLabelSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenCaseItemsAndColon.map(RawSyntax.init), arena: arena).as(RawSwitchCaseLabelSyntax.self)!
  }
  public var colon: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withColon(_ colon: RawTokenSyntax, arena: SyntaxArena) -> RawSwitchCaseLabelSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(colon), arena: arena).as(RawSwitchCaseLabelSyntax.self)!
  }
  public var unexpectedAfterColon: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterColon(_ unexpectedAfterColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSwitchCaseLabelSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterColon.map(RawSyntax.init), arena: arena).as(RawSwitchCaseLabelSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawCatchClauseSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = CatchClauseSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .catchClause
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeCatchKeyword: RawUnexpectedNodesSyntax? = nil,
    catchKeyword: RawTokenSyntax,
    _ unexpectedBetweenCatchKeywordAndCatchItems: RawUnexpectedNodesSyntax? = nil,
    catchItems: RawCatchItemListSyntax?,
    _ unexpectedBetweenCatchItemsAndBody: RawUnexpectedNodesSyntax? = nil,
    body: RawCodeBlockSyntax,
    _ unexpectedAfterBody: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .catchClause, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeCatchKeyword?.raw
      layout[1] = catchKeyword.raw
      layout[2] = unexpectedBetweenCatchKeywordAndCatchItems?.raw
      layout[3] = catchItems?.raw
      layout[4] = unexpectedBetweenCatchItemsAndBody?.raw
      layout[5] = body.raw
      layout[6] = unexpectedAfterBody?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeCatchKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeCatchKeyword(_ unexpectedBeforeCatchKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawCatchClauseSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeCatchKeyword.map(RawSyntax.init), arena: arena).as(RawCatchClauseSyntax.self)!
  }
  public var catchKeyword: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withCatchKeyword(_ catchKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawCatchClauseSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(catchKeyword), arena: arena).as(RawCatchClauseSyntax.self)!
  }
  public var unexpectedBetweenCatchKeywordAndCatchItems: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenCatchKeywordAndCatchItems(_ unexpectedBetweenCatchKeywordAndCatchItems: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawCatchClauseSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenCatchKeywordAndCatchItems.map(RawSyntax.init), arena: arena).as(RawCatchClauseSyntax.self)!
  }
  public var catchItems: RawCatchItemListSyntax? {
    layoutView.children[3].map(RawCatchItemListSyntax.init(raw:))
  }
  public func withCatchItems(_ catchItems: RawCatchItemListSyntax?, arena: SyntaxArena) -> RawCatchClauseSyntax {
    return layoutView.replacingChild(at: 3, with: catchItems.map(RawSyntax.init), arena: arena).as(RawCatchClauseSyntax.self)!
  }
  public var unexpectedBetweenCatchItemsAndBody: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenCatchItemsAndBody(_ unexpectedBetweenCatchItemsAndBody: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawCatchClauseSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenCatchItemsAndBody.map(RawSyntax.init), arena: arena).as(RawCatchClauseSyntax.self)!
  }
  public var body: RawCodeBlockSyntax {
    layoutView.children[5].map(RawCodeBlockSyntax.init(raw:))!
  }
  public func withBody(_ body: RawCodeBlockSyntax, arena: SyntaxArena) -> RawCatchClauseSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(body), arena: arena).as(RawCatchClauseSyntax.self)!
  }
  public var unexpectedAfterBody: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterBody(_ unexpectedAfterBody: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawCatchClauseSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterBody.map(RawSyntax.init), arena: arena).as(RawCatchClauseSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawPoundAssertStmtSyntax: RawStmtSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = PoundAssertStmtSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .poundAssertStmt
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforePoundAssert: RawUnexpectedNodesSyntax? = nil,
    poundAssert: RawTokenSyntax,
    _ unexpectedBetweenPoundAssertAndLeftParen: RawUnexpectedNodesSyntax? = nil,
    leftParen: RawTokenSyntax,
    _ unexpectedBetweenLeftParenAndCondition: RawUnexpectedNodesSyntax? = nil,
    condition: RawExprSyntax,
    _ unexpectedBetweenConditionAndComma: RawUnexpectedNodesSyntax? = nil,
    comma: RawTokenSyntax?,
    _ unexpectedBetweenCommaAndMessage: RawUnexpectedNodesSyntax? = nil,
    message: RawTokenSyntax?,
    _ unexpectedBetweenMessageAndRightParen: RawUnexpectedNodesSyntax? = nil,
    rightParen: RawTokenSyntax,
    _ unexpectedAfterRightParen: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .poundAssertStmt, uninitializedCount: 13, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforePoundAssert?.raw
      layout[1] = poundAssert.raw
      layout[2] = unexpectedBetweenPoundAssertAndLeftParen?.raw
      layout[3] = leftParen.raw
      layout[4] = unexpectedBetweenLeftParenAndCondition?.raw
      layout[5] = condition.raw
      layout[6] = unexpectedBetweenConditionAndComma?.raw
      layout[7] = comma?.raw
      layout[8] = unexpectedBetweenCommaAndMessage?.raw
      layout[9] = message?.raw
      layout[10] = unexpectedBetweenMessageAndRightParen?.raw
      layout[11] = rightParen.raw
      layout[12] = unexpectedAfterRightParen?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforePoundAssert: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforePoundAssert(_ unexpectedBeforePoundAssert: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundAssertStmtSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforePoundAssert.map(RawSyntax.init), arena: arena).as(RawPoundAssertStmtSyntax.self)!
  }
  public var poundAssert: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withPoundAssert(_ poundAssert: RawTokenSyntax, arena: SyntaxArena) -> RawPoundAssertStmtSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(poundAssert), arena: arena).as(RawPoundAssertStmtSyntax.self)!
  }
  public var unexpectedBetweenPoundAssertAndLeftParen: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenPoundAssertAndLeftParen(_ unexpectedBetweenPoundAssertAndLeftParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundAssertStmtSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenPoundAssertAndLeftParen.map(RawSyntax.init), arena: arena).as(RawPoundAssertStmtSyntax.self)!
  }
  public var leftParen: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeftParen(_ leftParen: RawTokenSyntax, arena: SyntaxArena) -> RawPoundAssertStmtSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(leftParen), arena: arena).as(RawPoundAssertStmtSyntax.self)!
  }
  public var unexpectedBetweenLeftParenAndCondition: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftParenAndCondition(_ unexpectedBetweenLeftParenAndCondition: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundAssertStmtSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenLeftParenAndCondition.map(RawSyntax.init), arena: arena).as(RawPoundAssertStmtSyntax.self)!
  }
  public var condition: RawExprSyntax {
    layoutView.children[5].map(RawExprSyntax.init(raw:))!
  }
  public func withCondition(_ condition: RawExprSyntax, arena: SyntaxArena) -> RawPoundAssertStmtSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(condition), arena: arena).as(RawPoundAssertStmtSyntax.self)!
  }
  public var unexpectedBetweenConditionAndComma: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenConditionAndComma(_ unexpectedBetweenConditionAndComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundAssertStmtSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenConditionAndComma.map(RawSyntax.init), arena: arena).as(RawPoundAssertStmtSyntax.self)!
  }
  public var comma: RawTokenSyntax? {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))
  }
  public func withComma(_ comma: RawTokenSyntax?, arena: SyntaxArena) -> RawPoundAssertStmtSyntax {
    return layoutView.replacingChild(at: 7, with: comma.map(RawSyntax.init), arena: arena).as(RawPoundAssertStmtSyntax.self)!
  }
  public var unexpectedBetweenCommaAndMessage: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenCommaAndMessage(_ unexpectedBetweenCommaAndMessage: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundAssertStmtSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenCommaAndMessage.map(RawSyntax.init), arena: arena).as(RawPoundAssertStmtSyntax.self)!
  }
  public var message: RawTokenSyntax? {
    layoutView.children[9].map(RawTokenSyntax.init(raw:))
  }
  public func withMessage(_ message: RawTokenSyntax?, arena: SyntaxArena) -> RawPoundAssertStmtSyntax {
    return layoutView.replacingChild(at: 9, with: message.map(RawSyntax.init), arena: arena).as(RawPoundAssertStmtSyntax.self)!
  }
  public var unexpectedBetweenMessageAndRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenMessageAndRightParen(_ unexpectedBetweenMessageAndRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundAssertStmtSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedBetweenMessageAndRightParen.map(RawSyntax.init), arena: arena).as(RawPoundAssertStmtSyntax.self)!
  }
  public var rightParen: RawTokenSyntax {
    layoutView.children[11].map(RawTokenSyntax.init(raw:))!
  }
  public func withRightParen(_ rightParen: RawTokenSyntax, arena: SyntaxArena) -> RawPoundAssertStmtSyntax {
    return layoutView.replacingChild(at: 11, with: RawSyntax(rightParen), arena: arena).as(RawPoundAssertStmtSyntax.self)!
  }
  public var unexpectedAfterRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[12].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightParen(_ unexpectedAfterRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPoundAssertStmtSyntax {
    return layoutView.replacingChild(at: 12, with: unexpectedAfterRightParen.map(RawSyntax.init), arena: arena).as(RawPoundAssertStmtSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawGenericWhereClauseSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = GenericWhereClauseSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .genericWhereClause
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeWhereKeyword: RawUnexpectedNodesSyntax? = nil,
    whereKeyword: RawTokenSyntax,
    _ unexpectedBetweenWhereKeywordAndRequirementList: RawUnexpectedNodesSyntax? = nil,
    requirementList: RawGenericRequirementListSyntax,
    _ unexpectedAfterRequirementList: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .genericWhereClause, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeWhereKeyword?.raw
      layout[1] = whereKeyword.raw
      layout[2] = unexpectedBetweenWhereKeywordAndRequirementList?.raw
      layout[3] = requirementList.raw
      layout[4] = unexpectedAfterRequirementList?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeWhereKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeWhereKeyword(_ unexpectedBeforeWhereKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawGenericWhereClauseSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeWhereKeyword.map(RawSyntax.init), arena: arena).as(RawGenericWhereClauseSyntax.self)!
  }
  public var whereKeyword: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withWhereKeyword(_ whereKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawGenericWhereClauseSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(whereKeyword), arena: arena).as(RawGenericWhereClauseSyntax.self)!
  }
  public var unexpectedBetweenWhereKeywordAndRequirementList: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenWhereKeywordAndRequirementList(_ unexpectedBetweenWhereKeywordAndRequirementList: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawGenericWhereClauseSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenWhereKeywordAndRequirementList.map(RawSyntax.init), arena: arena).as(RawGenericWhereClauseSyntax.self)!
  }
  public var requirementList: RawGenericRequirementListSyntax {
    layoutView.children[3].map(RawGenericRequirementListSyntax.init(raw:))!
  }
  public func withRequirementList(_ requirementList: RawGenericRequirementListSyntax, arena: SyntaxArena) -> RawGenericWhereClauseSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(requirementList), arena: arena).as(RawGenericWhereClauseSyntax.self)!
  }
  public var unexpectedAfterRequirementList: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRequirementList(_ unexpectedAfterRequirementList: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawGenericWhereClauseSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterRequirementList.map(RawSyntax.init), arena: arena).as(RawGenericWhereClauseSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawGenericRequirementListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = GenericRequirementListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .genericRequirementList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawGenericRequirementSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .genericRequirementList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawGenericRequirementSyntax] {
    layoutView.children.map { RawGenericRequirementSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawGenericRequirementSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public enum Body: RawSyntaxNodeProtocol {
    case `sameTypeRequirement`(RawSameTypeRequirementSyntax)
    case `conformanceRequirement`(RawConformanceRequirementSyntax)
    case `layoutRequirement`(RawLayoutRequirementSyntax)

    public static func isKindOf(_ raw: RawSyntax) -> Bool {
      return RawSameTypeRequirementSyntax.isKindOf(raw) || RawConformanceRequirementSyntax.isKindOf(raw) || RawLayoutRequirementSyntax.isKindOf(raw)
    }

    public var raw: RawSyntax {
      switch self {
      case .sameTypeRequirement(let node): return node.raw
      case .conformanceRequirement(let node): return node.raw
      case .layoutRequirement(let node): return node.raw
      }
    }

    public init?<T>(_ other: T) where T : RawSyntaxNodeProtocol {
      if let node = RawSameTypeRequirementSyntax(other) {
        self = .sameTypeRequirement(node)
        return
      }
      if let node = RawConformanceRequirementSyntax(other) {
        self = .conformanceRequirement(node)
        return
      }
      if let node = RawLayoutRequirementSyntax(other) {
        self = .layoutRequirement(node)
        return
      }
      return nil
    }
  }

  public typealias SyntaxType = GenericRequirementSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .genericRequirement
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeBody: RawUnexpectedNodesSyntax? = nil,
    body: Body,
    _ unexpectedBetweenBodyAndTrailingComma: RawUnexpectedNodesSyntax? = nil,
    trailingComma: RawTokenSyntax?,
    _ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .genericRequirement, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeBody?.raw
      layout[1] = body.raw
      layout[2] = unexpectedBetweenBodyAndTrailingComma?.raw
      layout[3] = trailingComma?.raw
      layout[4] = unexpectedAfterTrailingComma?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeBody: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeBody(_ unexpectedBeforeBody: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawGenericRequirementSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeBody.map(RawSyntax.init), arena: arena).as(RawGenericRequirementSyntax.self)!
  }
  public var body: RawSyntax {
    layoutView.children[1]!
  }
  public func withBody(_ body: RawSyntax, arena: SyntaxArena) -> RawGenericRequirementSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(body), arena: arena).as(RawGenericRequirementSyntax.self)!
  }
  public var unexpectedBetweenBodyAndTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenBodyAndTrailingComma(_ unexpectedBetweenBodyAndTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawGenericRequirementSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenBodyAndTrailingComma.map(RawSyntax.init), arena: arena).as(RawGenericRequirementSyntax.self)!
  }
  public var trailingComma: RawTokenSyntax? {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))
  }
  public func withTrailingComma(_ trailingComma: RawTokenSyntax?, arena: SyntaxArena) -> RawGenericRequirementSyntax {
    return layoutView.replacingChild(at: 3, with: trailingComma.map(RawSyntax.init), arena: arena).as(RawGenericRequirementSyntax.self)!
  }
  public var unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterTrailingComma(_ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawGenericRequirementSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterTrailingComma.map(RawSyntax.init), arena: arena).as(RawGenericRequirementSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawSameTypeRequirementSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = SameTypeRequirementSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .sameTypeRequirement
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeLeftTypeIdentifier: RawUnexpectedNodesSyntax? = nil,
    leftTypeIdentifier: RawTypeSyntax,
    _ unexpectedBetweenLeftTypeIdentifierAndEqualityToken: RawUnexpectedNodesSyntax? = nil,
    equalityToken: RawTokenSyntax,
    _ unexpectedBetweenEqualityTokenAndRightTypeIdentifier: RawUnexpectedNodesSyntax? = nil,
    rightTypeIdentifier: RawTypeSyntax,
    _ unexpectedAfterRightTypeIdentifier: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .sameTypeRequirement, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeLeftTypeIdentifier?.raw
      layout[1] = leftTypeIdentifier.raw
      layout[2] = unexpectedBetweenLeftTypeIdentifierAndEqualityToken?.raw
      layout[3] = equalityToken.raw
      layout[4] = unexpectedBetweenEqualityTokenAndRightTypeIdentifier?.raw
      layout[5] = rightTypeIdentifier.raw
      layout[6] = unexpectedAfterRightTypeIdentifier?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeLeftTypeIdentifier: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeLeftTypeIdentifier(_ unexpectedBeforeLeftTypeIdentifier: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSameTypeRequirementSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeLeftTypeIdentifier.map(RawSyntax.init), arena: arena).as(RawSameTypeRequirementSyntax.self)!
  }
  public var leftTypeIdentifier: RawTypeSyntax {
    layoutView.children[1].map(RawTypeSyntax.init(raw:))!
  }
  public func withLeftTypeIdentifier(_ leftTypeIdentifier: RawTypeSyntax, arena: SyntaxArena) -> RawSameTypeRequirementSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(leftTypeIdentifier), arena: arena).as(RawSameTypeRequirementSyntax.self)!
  }
  public var unexpectedBetweenLeftTypeIdentifierAndEqualityToken: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftTypeIdentifierAndEqualityToken(_ unexpectedBetweenLeftTypeIdentifierAndEqualityToken: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSameTypeRequirementSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenLeftTypeIdentifierAndEqualityToken.map(RawSyntax.init), arena: arena).as(RawSameTypeRequirementSyntax.self)!
  }
  public var equalityToken: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withEqualityToken(_ equalityToken: RawTokenSyntax, arena: SyntaxArena) -> RawSameTypeRequirementSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(equalityToken), arena: arena).as(RawSameTypeRequirementSyntax.self)!
  }
  public var unexpectedBetweenEqualityTokenAndRightTypeIdentifier: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenEqualityTokenAndRightTypeIdentifier(_ unexpectedBetweenEqualityTokenAndRightTypeIdentifier: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSameTypeRequirementSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenEqualityTokenAndRightTypeIdentifier.map(RawSyntax.init), arena: arena).as(RawSameTypeRequirementSyntax.self)!
  }
  public var rightTypeIdentifier: RawTypeSyntax {
    layoutView.children[5].map(RawTypeSyntax.init(raw:))!
  }
  public func withRightTypeIdentifier(_ rightTypeIdentifier: RawTypeSyntax, arena: SyntaxArena) -> RawSameTypeRequirementSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(rightTypeIdentifier), arena: arena).as(RawSameTypeRequirementSyntax.self)!
  }
  public var unexpectedAfterRightTypeIdentifier: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightTypeIdentifier(_ unexpectedAfterRightTypeIdentifier: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSameTypeRequirementSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterRightTypeIdentifier.map(RawSyntax.init), arena: arena).as(RawSameTypeRequirementSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawLayoutRequirementSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = LayoutRequirementSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .layoutRequirement
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeTypeIdentifier: RawUnexpectedNodesSyntax? = nil,
    typeIdentifier: RawTypeSyntax,
    _ unexpectedBetweenTypeIdentifierAndColon: RawUnexpectedNodesSyntax? = nil,
    colon: RawTokenSyntax,
    _ unexpectedBetweenColonAndLayoutConstraint: RawUnexpectedNodesSyntax? = nil,
    layoutConstraint: RawTokenSyntax,
    _ unexpectedBetweenLayoutConstraintAndLeftParen: RawUnexpectedNodesSyntax? = nil,
    leftParen: RawTokenSyntax?,
    _ unexpectedBetweenLeftParenAndSize: RawUnexpectedNodesSyntax? = nil,
    size: RawTokenSyntax?,
    _ unexpectedBetweenSizeAndComma: RawUnexpectedNodesSyntax? = nil,
    comma: RawTokenSyntax?,
    _ unexpectedBetweenCommaAndAlignment: RawUnexpectedNodesSyntax? = nil,
    alignment: RawTokenSyntax?,
    _ unexpectedBetweenAlignmentAndRightParen: RawUnexpectedNodesSyntax? = nil,
    rightParen: RawTokenSyntax?,
    _ unexpectedAfterRightParen: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .layoutRequirement, uninitializedCount: 17, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeTypeIdentifier?.raw
      layout[1] = typeIdentifier.raw
      layout[2] = unexpectedBetweenTypeIdentifierAndColon?.raw
      layout[3] = colon.raw
      layout[4] = unexpectedBetweenColonAndLayoutConstraint?.raw
      layout[5] = layoutConstraint.raw
      layout[6] = unexpectedBetweenLayoutConstraintAndLeftParen?.raw
      layout[7] = leftParen?.raw
      layout[8] = unexpectedBetweenLeftParenAndSize?.raw
      layout[9] = size?.raw
      layout[10] = unexpectedBetweenSizeAndComma?.raw
      layout[11] = comma?.raw
      layout[12] = unexpectedBetweenCommaAndAlignment?.raw
      layout[13] = alignment?.raw
      layout[14] = unexpectedBetweenAlignmentAndRightParen?.raw
      layout[15] = rightParen?.raw
      layout[16] = unexpectedAfterRightParen?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeTypeIdentifier: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeTypeIdentifier(_ unexpectedBeforeTypeIdentifier: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawLayoutRequirementSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeTypeIdentifier.map(RawSyntax.init), arena: arena).as(RawLayoutRequirementSyntax.self)!
  }
  public var typeIdentifier: RawTypeSyntax {
    layoutView.children[1].map(RawTypeSyntax.init(raw:))!
  }
  public func withTypeIdentifier(_ typeIdentifier: RawTypeSyntax, arena: SyntaxArena) -> RawLayoutRequirementSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(typeIdentifier), arena: arena).as(RawLayoutRequirementSyntax.self)!
  }
  public var unexpectedBetweenTypeIdentifierAndColon: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenTypeIdentifierAndColon(_ unexpectedBetweenTypeIdentifierAndColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawLayoutRequirementSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenTypeIdentifierAndColon.map(RawSyntax.init), arena: arena).as(RawLayoutRequirementSyntax.self)!
  }
  public var colon: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withColon(_ colon: RawTokenSyntax, arena: SyntaxArena) -> RawLayoutRequirementSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(colon), arena: arena).as(RawLayoutRequirementSyntax.self)!
  }
  public var unexpectedBetweenColonAndLayoutConstraint: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenColonAndLayoutConstraint(_ unexpectedBetweenColonAndLayoutConstraint: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawLayoutRequirementSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenColonAndLayoutConstraint.map(RawSyntax.init), arena: arena).as(RawLayoutRequirementSyntax.self)!
  }
  public var layoutConstraint: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withLayoutConstraint(_ layoutConstraint: RawTokenSyntax, arena: SyntaxArena) -> RawLayoutRequirementSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(layoutConstraint), arena: arena).as(RawLayoutRequirementSyntax.self)!
  }
  public var unexpectedBetweenLayoutConstraintAndLeftParen: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLayoutConstraintAndLeftParen(_ unexpectedBetweenLayoutConstraintAndLeftParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawLayoutRequirementSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenLayoutConstraintAndLeftParen.map(RawSyntax.init), arena: arena).as(RawLayoutRequirementSyntax.self)!
  }
  public var leftParen: RawTokenSyntax? {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))
  }
  public func withLeftParen(_ leftParen: RawTokenSyntax?, arena: SyntaxArena) -> RawLayoutRequirementSyntax {
    return layoutView.replacingChild(at: 7, with: leftParen.map(RawSyntax.init), arena: arena).as(RawLayoutRequirementSyntax.self)!
  }
  public var unexpectedBetweenLeftParenAndSize: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftParenAndSize(_ unexpectedBetweenLeftParenAndSize: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawLayoutRequirementSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenLeftParenAndSize.map(RawSyntax.init), arena: arena).as(RawLayoutRequirementSyntax.self)!
  }
  public var size: RawTokenSyntax? {
    layoutView.children[9].map(RawTokenSyntax.init(raw:))
  }
  public func withSize(_ size: RawTokenSyntax?, arena: SyntaxArena) -> RawLayoutRequirementSyntax {
    return layoutView.replacingChild(at: 9, with: size.map(RawSyntax.init), arena: arena).as(RawLayoutRequirementSyntax.self)!
  }
  public var unexpectedBetweenSizeAndComma: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenSizeAndComma(_ unexpectedBetweenSizeAndComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawLayoutRequirementSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedBetweenSizeAndComma.map(RawSyntax.init), arena: arena).as(RawLayoutRequirementSyntax.self)!
  }
  public var comma: RawTokenSyntax? {
    layoutView.children[11].map(RawTokenSyntax.init(raw:))
  }
  public func withComma(_ comma: RawTokenSyntax?, arena: SyntaxArena) -> RawLayoutRequirementSyntax {
    return layoutView.replacingChild(at: 11, with: comma.map(RawSyntax.init), arena: arena).as(RawLayoutRequirementSyntax.self)!
  }
  public var unexpectedBetweenCommaAndAlignment: RawUnexpectedNodesSyntax? {
    layoutView.children[12].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenCommaAndAlignment(_ unexpectedBetweenCommaAndAlignment: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawLayoutRequirementSyntax {
    return layoutView.replacingChild(at: 12, with: unexpectedBetweenCommaAndAlignment.map(RawSyntax.init), arena: arena).as(RawLayoutRequirementSyntax.self)!
  }
  public var alignment: RawTokenSyntax? {
    layoutView.children[13].map(RawTokenSyntax.init(raw:))
  }
  public func withAlignment(_ alignment: RawTokenSyntax?, arena: SyntaxArena) -> RawLayoutRequirementSyntax {
    return layoutView.replacingChild(at: 13, with: alignment.map(RawSyntax.init), arena: arena).as(RawLayoutRequirementSyntax.self)!
  }
  public var unexpectedBetweenAlignmentAndRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[14].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAlignmentAndRightParen(_ unexpectedBetweenAlignmentAndRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawLayoutRequirementSyntax {
    return layoutView.replacingChild(at: 14, with: unexpectedBetweenAlignmentAndRightParen.map(RawSyntax.init), arena: arena).as(RawLayoutRequirementSyntax.self)!
  }
  public var rightParen: RawTokenSyntax? {
    layoutView.children[15].map(RawTokenSyntax.init(raw:))
  }
  public func withRightParen(_ rightParen: RawTokenSyntax?, arena: SyntaxArena) -> RawLayoutRequirementSyntax {
    return layoutView.replacingChild(at: 15, with: rightParen.map(RawSyntax.init), arena: arena).as(RawLayoutRequirementSyntax.self)!
  }
  public var unexpectedAfterRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[16].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightParen(_ unexpectedAfterRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawLayoutRequirementSyntax {
    return layoutView.replacingChild(at: 16, with: unexpectedAfterRightParen.map(RawSyntax.init), arena: arena).as(RawLayoutRequirementSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawGenericParameterListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = GenericParameterListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .genericParameterList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawGenericParameterSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .genericParameterList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawGenericParameterSyntax] {
    layoutView.children.map { RawGenericParameterSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawGenericParameterSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = GenericParameterSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .genericParameter
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? = nil,
    attributes: RawAttributeListSyntax?,
    _ unexpectedBetweenAttributesAndName: RawUnexpectedNodesSyntax? = nil,
    name: RawTokenSyntax,
    _ unexpectedBetweenNameAndEllipsis: RawUnexpectedNodesSyntax? = nil,
    ellipsis: RawTokenSyntax?,
    _ unexpectedBetweenEllipsisAndColon: RawUnexpectedNodesSyntax? = nil,
    colon: RawTokenSyntax?,
    _ unexpectedBetweenColonAndInheritedType: RawUnexpectedNodesSyntax? = nil,
    inheritedType: RawTypeSyntax?,
    _ unexpectedBetweenInheritedTypeAndTrailingComma: RawUnexpectedNodesSyntax? = nil,
    trailingComma: RawTokenSyntax?,
    _ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .genericParameter, uninitializedCount: 13, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeAttributes?.raw
      layout[1] = attributes?.raw
      layout[2] = unexpectedBetweenAttributesAndName?.raw
      layout[3] = name.raw
      layout[4] = unexpectedBetweenNameAndEllipsis?.raw
      layout[5] = ellipsis?.raw
      layout[6] = unexpectedBetweenEllipsisAndColon?.raw
      layout[7] = colon?.raw
      layout[8] = unexpectedBetweenColonAndInheritedType?.raw
      layout[9] = inheritedType?.raw
      layout[10] = unexpectedBetweenInheritedTypeAndTrailingComma?.raw
      layout[11] = trailingComma?.raw
      layout[12] = unexpectedAfterTrailingComma?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeAttributes: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeAttributes(_ unexpectedBeforeAttributes: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawGenericParameterSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeAttributes.map(RawSyntax.init), arena: arena).as(RawGenericParameterSyntax.self)!
  }
  public var attributes: RawAttributeListSyntax? {
    layoutView.children[1].map(RawAttributeListSyntax.init(raw:))
  }
  public func withAttributes(_ attributes: RawAttributeListSyntax?, arena: SyntaxArena) -> RawGenericParameterSyntax {
    return layoutView.replacingChild(at: 1, with: attributes.map(RawSyntax.init), arena: arena).as(RawGenericParameterSyntax.self)!
  }
  public var unexpectedBetweenAttributesAndName: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAttributesAndName(_ unexpectedBetweenAttributesAndName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawGenericParameterSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenAttributesAndName.map(RawSyntax.init), arena: arena).as(RawGenericParameterSyntax.self)!
  }
  public var name: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withName(_ name: RawTokenSyntax, arena: SyntaxArena) -> RawGenericParameterSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(name), arena: arena).as(RawGenericParameterSyntax.self)!
  }
  public var unexpectedBetweenNameAndEllipsis: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenNameAndEllipsis(_ unexpectedBetweenNameAndEllipsis: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawGenericParameterSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenNameAndEllipsis.map(RawSyntax.init), arena: arena).as(RawGenericParameterSyntax.self)!
  }
  public var ellipsis: RawTokenSyntax? {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))
  }
  public func withEllipsis(_ ellipsis: RawTokenSyntax?, arena: SyntaxArena) -> RawGenericParameterSyntax {
    return layoutView.replacingChild(at: 5, with: ellipsis.map(RawSyntax.init), arena: arena).as(RawGenericParameterSyntax.self)!
  }
  public var unexpectedBetweenEllipsisAndColon: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenEllipsisAndColon(_ unexpectedBetweenEllipsisAndColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawGenericParameterSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenEllipsisAndColon.map(RawSyntax.init), arena: arena).as(RawGenericParameterSyntax.self)!
  }
  public var colon: RawTokenSyntax? {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))
  }
  public func withColon(_ colon: RawTokenSyntax?, arena: SyntaxArena) -> RawGenericParameterSyntax {
    return layoutView.replacingChild(at: 7, with: colon.map(RawSyntax.init), arena: arena).as(RawGenericParameterSyntax.self)!
  }
  public var unexpectedBetweenColonAndInheritedType: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenColonAndInheritedType(_ unexpectedBetweenColonAndInheritedType: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawGenericParameterSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenColonAndInheritedType.map(RawSyntax.init), arena: arena).as(RawGenericParameterSyntax.self)!
  }
  public var inheritedType: RawTypeSyntax? {
    layoutView.children[9].map(RawTypeSyntax.init(raw:))
  }
  public func withInheritedType(_ inheritedType: RawTypeSyntax?, arena: SyntaxArena) -> RawGenericParameterSyntax {
    return layoutView.replacingChild(at: 9, with: inheritedType.map(RawSyntax.init), arena: arena).as(RawGenericParameterSyntax.self)!
  }
  public var unexpectedBetweenInheritedTypeAndTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenInheritedTypeAndTrailingComma(_ unexpectedBetweenInheritedTypeAndTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawGenericParameterSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedBetweenInheritedTypeAndTrailingComma.map(RawSyntax.init), arena: arena).as(RawGenericParameterSyntax.self)!
  }
  public var trailingComma: RawTokenSyntax? {
    layoutView.children[11].map(RawTokenSyntax.init(raw:))
  }
  public func withTrailingComma(_ trailingComma: RawTokenSyntax?, arena: SyntaxArena) -> RawGenericParameterSyntax {
    return layoutView.replacingChild(at: 11, with: trailingComma.map(RawSyntax.init), arena: arena).as(RawGenericParameterSyntax.self)!
  }
  public var unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[12].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterTrailingComma(_ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawGenericParameterSyntax {
    return layoutView.replacingChild(at: 12, with: unexpectedAfterTrailingComma.map(RawSyntax.init), arena: arena).as(RawGenericParameterSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawPrimaryAssociatedTypeListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = PrimaryAssociatedTypeListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .primaryAssociatedTypeList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawPrimaryAssociatedTypeSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .primaryAssociatedTypeList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawPrimaryAssociatedTypeSyntax] {
    layoutView.children.map { RawPrimaryAssociatedTypeSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawPrimaryAssociatedTypeSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = PrimaryAssociatedTypeSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .primaryAssociatedType
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeName: RawUnexpectedNodesSyntax? = nil,
    name: RawTokenSyntax,
    _ unexpectedBetweenNameAndTrailingComma: RawUnexpectedNodesSyntax? = nil,
    trailingComma: RawTokenSyntax?,
    _ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .primaryAssociatedType, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeName?.raw
      layout[1] = name.raw
      layout[2] = unexpectedBetweenNameAndTrailingComma?.raw
      layout[3] = trailingComma?.raw
      layout[4] = unexpectedAfterTrailingComma?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeName: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeName(_ unexpectedBeforeName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPrimaryAssociatedTypeSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeName.map(RawSyntax.init), arena: arena).as(RawPrimaryAssociatedTypeSyntax.self)!
  }
  public var name: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withName(_ name: RawTokenSyntax, arena: SyntaxArena) -> RawPrimaryAssociatedTypeSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(name), arena: arena).as(RawPrimaryAssociatedTypeSyntax.self)!
  }
  public var unexpectedBetweenNameAndTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenNameAndTrailingComma(_ unexpectedBetweenNameAndTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPrimaryAssociatedTypeSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenNameAndTrailingComma.map(RawSyntax.init), arena: arena).as(RawPrimaryAssociatedTypeSyntax.self)!
  }
  public var trailingComma: RawTokenSyntax? {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))
  }
  public func withTrailingComma(_ trailingComma: RawTokenSyntax?, arena: SyntaxArena) -> RawPrimaryAssociatedTypeSyntax {
    return layoutView.replacingChild(at: 3, with: trailingComma.map(RawSyntax.init), arena: arena).as(RawPrimaryAssociatedTypeSyntax.self)!
  }
  public var unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterTrailingComma(_ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPrimaryAssociatedTypeSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterTrailingComma.map(RawSyntax.init), arena: arena).as(RawPrimaryAssociatedTypeSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawGenericParameterClauseSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = GenericParameterClauseSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .genericParameterClause
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeLeftAngleBracket: RawUnexpectedNodesSyntax? = nil,
    leftAngleBracket: RawTokenSyntax,
    _ unexpectedBetweenLeftAngleBracketAndGenericParameterList: RawUnexpectedNodesSyntax? = nil,
    genericParameterList: RawGenericParameterListSyntax,
    _ unexpectedBetweenGenericParameterListAndGenericWhereClause: RawUnexpectedNodesSyntax? = nil,
    genericWhereClause: RawGenericWhereClauseSyntax?,
    _ unexpectedBetweenGenericWhereClauseAndRightAngleBracket: RawUnexpectedNodesSyntax? = nil,
    rightAngleBracket: RawTokenSyntax,
    _ unexpectedAfterRightAngleBracket: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .genericParameterClause, uninitializedCount: 9, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeLeftAngleBracket?.raw
      layout[1] = leftAngleBracket.raw
      layout[2] = unexpectedBetweenLeftAngleBracketAndGenericParameterList?.raw
      layout[3] = genericParameterList.raw
      layout[4] = unexpectedBetweenGenericParameterListAndGenericWhereClause?.raw
      layout[5] = genericWhereClause?.raw
      layout[6] = unexpectedBetweenGenericWhereClauseAndRightAngleBracket?.raw
      layout[7] = rightAngleBracket.raw
      layout[8] = unexpectedAfterRightAngleBracket?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeLeftAngleBracket: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeLeftAngleBracket(_ unexpectedBeforeLeftAngleBracket: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawGenericParameterClauseSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeLeftAngleBracket.map(RawSyntax.init), arena: arena).as(RawGenericParameterClauseSyntax.self)!
  }
  public var leftAngleBracket: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeftAngleBracket(_ leftAngleBracket: RawTokenSyntax, arena: SyntaxArena) -> RawGenericParameterClauseSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(leftAngleBracket), arena: arena).as(RawGenericParameterClauseSyntax.self)!
  }
  public var unexpectedBetweenLeftAngleBracketAndGenericParameterList: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftAngleBracketAndGenericParameterList(_ unexpectedBetweenLeftAngleBracketAndGenericParameterList: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawGenericParameterClauseSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenLeftAngleBracketAndGenericParameterList.map(RawSyntax.init), arena: arena).as(RawGenericParameterClauseSyntax.self)!
  }
  public var genericParameterList: RawGenericParameterListSyntax {
    layoutView.children[3].map(RawGenericParameterListSyntax.init(raw:))!
  }
  public func withGenericParameterList(_ genericParameterList: RawGenericParameterListSyntax, arena: SyntaxArena) -> RawGenericParameterClauseSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(genericParameterList), arena: arena).as(RawGenericParameterClauseSyntax.self)!
  }
  public var unexpectedBetweenGenericParameterListAndGenericWhereClause: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenGenericParameterListAndGenericWhereClause(_ unexpectedBetweenGenericParameterListAndGenericWhereClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawGenericParameterClauseSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenGenericParameterListAndGenericWhereClause.map(RawSyntax.init), arena: arena).as(RawGenericParameterClauseSyntax.self)!
  }
  public var genericWhereClause: RawGenericWhereClauseSyntax? {
    layoutView.children[5].map(RawGenericWhereClauseSyntax.init(raw:))
  }
  public func withGenericWhereClause(_ genericWhereClause: RawGenericWhereClauseSyntax?, arena: SyntaxArena) -> RawGenericParameterClauseSyntax {
    return layoutView.replacingChild(at: 5, with: genericWhereClause.map(RawSyntax.init), arena: arena).as(RawGenericParameterClauseSyntax.self)!
  }
  public var unexpectedBetweenGenericWhereClauseAndRightAngleBracket: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenGenericWhereClauseAndRightAngleBracket(_ unexpectedBetweenGenericWhereClauseAndRightAngleBracket: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawGenericParameterClauseSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenGenericWhereClauseAndRightAngleBracket.map(RawSyntax.init), arena: arena).as(RawGenericParameterClauseSyntax.self)!
  }
  public var rightAngleBracket: RawTokenSyntax {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))!
  }
  public func withRightAngleBracket(_ rightAngleBracket: RawTokenSyntax, arena: SyntaxArena) -> RawGenericParameterClauseSyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(rightAngleBracket), arena: arena).as(RawGenericParameterClauseSyntax.self)!
  }
  public var unexpectedAfterRightAngleBracket: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightAngleBracket(_ unexpectedAfterRightAngleBracket: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawGenericParameterClauseSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedAfterRightAngleBracket.map(RawSyntax.init), arena: arena).as(RawGenericParameterClauseSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawConformanceRequirementSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ConformanceRequirementSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .conformanceRequirement
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeLeftTypeIdentifier: RawUnexpectedNodesSyntax? = nil,
    leftTypeIdentifier: RawTypeSyntax,
    _ unexpectedBetweenLeftTypeIdentifierAndColon: RawUnexpectedNodesSyntax? = nil,
    colon: RawTokenSyntax,
    _ unexpectedBetweenColonAndRightTypeIdentifier: RawUnexpectedNodesSyntax? = nil,
    rightTypeIdentifier: RawTypeSyntax,
    _ unexpectedAfterRightTypeIdentifier: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .conformanceRequirement, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeLeftTypeIdentifier?.raw
      layout[1] = leftTypeIdentifier.raw
      layout[2] = unexpectedBetweenLeftTypeIdentifierAndColon?.raw
      layout[3] = colon.raw
      layout[4] = unexpectedBetweenColonAndRightTypeIdentifier?.raw
      layout[5] = rightTypeIdentifier.raw
      layout[6] = unexpectedAfterRightTypeIdentifier?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeLeftTypeIdentifier: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeLeftTypeIdentifier(_ unexpectedBeforeLeftTypeIdentifier: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawConformanceRequirementSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeLeftTypeIdentifier.map(RawSyntax.init), arena: arena).as(RawConformanceRequirementSyntax.self)!
  }
  public var leftTypeIdentifier: RawTypeSyntax {
    layoutView.children[1].map(RawTypeSyntax.init(raw:))!
  }
  public func withLeftTypeIdentifier(_ leftTypeIdentifier: RawTypeSyntax, arena: SyntaxArena) -> RawConformanceRequirementSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(leftTypeIdentifier), arena: arena).as(RawConformanceRequirementSyntax.self)!
  }
  public var unexpectedBetweenLeftTypeIdentifierAndColon: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftTypeIdentifierAndColon(_ unexpectedBetweenLeftTypeIdentifierAndColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawConformanceRequirementSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenLeftTypeIdentifierAndColon.map(RawSyntax.init), arena: arena).as(RawConformanceRequirementSyntax.self)!
  }
  public var colon: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withColon(_ colon: RawTokenSyntax, arena: SyntaxArena) -> RawConformanceRequirementSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(colon), arena: arena).as(RawConformanceRequirementSyntax.self)!
  }
  public var unexpectedBetweenColonAndRightTypeIdentifier: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenColonAndRightTypeIdentifier(_ unexpectedBetweenColonAndRightTypeIdentifier: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawConformanceRequirementSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenColonAndRightTypeIdentifier.map(RawSyntax.init), arena: arena).as(RawConformanceRequirementSyntax.self)!
  }
  public var rightTypeIdentifier: RawTypeSyntax {
    layoutView.children[5].map(RawTypeSyntax.init(raw:))!
  }
  public func withRightTypeIdentifier(_ rightTypeIdentifier: RawTypeSyntax, arena: SyntaxArena) -> RawConformanceRequirementSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(rightTypeIdentifier), arena: arena).as(RawConformanceRequirementSyntax.self)!
  }
  public var unexpectedAfterRightTypeIdentifier: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightTypeIdentifier(_ unexpectedAfterRightTypeIdentifier: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawConformanceRequirementSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterRightTypeIdentifier.map(RawSyntax.init), arena: arena).as(RawConformanceRequirementSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawPrimaryAssociatedTypeClauseSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = PrimaryAssociatedTypeClauseSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .primaryAssociatedTypeClause
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeLeftAngleBracket: RawUnexpectedNodesSyntax? = nil,
    leftAngleBracket: RawTokenSyntax,
    _ unexpectedBetweenLeftAngleBracketAndPrimaryAssociatedTypeList: RawUnexpectedNodesSyntax? = nil,
    primaryAssociatedTypeList: RawPrimaryAssociatedTypeListSyntax,
    _ unexpectedBetweenPrimaryAssociatedTypeListAndRightAngleBracket: RawUnexpectedNodesSyntax? = nil,
    rightAngleBracket: RawTokenSyntax,
    _ unexpectedAfterRightAngleBracket: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .primaryAssociatedTypeClause, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeLeftAngleBracket?.raw
      layout[1] = leftAngleBracket.raw
      layout[2] = unexpectedBetweenLeftAngleBracketAndPrimaryAssociatedTypeList?.raw
      layout[3] = primaryAssociatedTypeList.raw
      layout[4] = unexpectedBetweenPrimaryAssociatedTypeListAndRightAngleBracket?.raw
      layout[5] = rightAngleBracket.raw
      layout[6] = unexpectedAfterRightAngleBracket?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeLeftAngleBracket: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeLeftAngleBracket(_ unexpectedBeforeLeftAngleBracket: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPrimaryAssociatedTypeClauseSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeLeftAngleBracket.map(RawSyntax.init), arena: arena).as(RawPrimaryAssociatedTypeClauseSyntax.self)!
  }
  public var leftAngleBracket: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeftAngleBracket(_ leftAngleBracket: RawTokenSyntax, arena: SyntaxArena) -> RawPrimaryAssociatedTypeClauseSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(leftAngleBracket), arena: arena).as(RawPrimaryAssociatedTypeClauseSyntax.self)!
  }
  public var unexpectedBetweenLeftAngleBracketAndPrimaryAssociatedTypeList: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftAngleBracketAndPrimaryAssociatedTypeList(_ unexpectedBetweenLeftAngleBracketAndPrimaryAssociatedTypeList: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPrimaryAssociatedTypeClauseSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenLeftAngleBracketAndPrimaryAssociatedTypeList.map(RawSyntax.init), arena: arena).as(RawPrimaryAssociatedTypeClauseSyntax.self)!
  }
  public var primaryAssociatedTypeList: RawPrimaryAssociatedTypeListSyntax {
    layoutView.children[3].map(RawPrimaryAssociatedTypeListSyntax.init(raw:))!
  }
  public func withPrimaryAssociatedTypeList(_ primaryAssociatedTypeList: RawPrimaryAssociatedTypeListSyntax, arena: SyntaxArena) -> RawPrimaryAssociatedTypeClauseSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(primaryAssociatedTypeList), arena: arena).as(RawPrimaryAssociatedTypeClauseSyntax.self)!
  }
  public var unexpectedBetweenPrimaryAssociatedTypeListAndRightAngleBracket: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenPrimaryAssociatedTypeListAndRightAngleBracket(_ unexpectedBetweenPrimaryAssociatedTypeListAndRightAngleBracket: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPrimaryAssociatedTypeClauseSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenPrimaryAssociatedTypeListAndRightAngleBracket.map(RawSyntax.init), arena: arena).as(RawPrimaryAssociatedTypeClauseSyntax.self)!
  }
  public var rightAngleBracket: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withRightAngleBracket(_ rightAngleBracket: RawTokenSyntax, arena: SyntaxArena) -> RawPrimaryAssociatedTypeClauseSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(rightAngleBracket), arena: arena).as(RawPrimaryAssociatedTypeClauseSyntax.self)!
  }
  public var unexpectedAfterRightAngleBracket: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightAngleBracket(_ unexpectedAfterRightAngleBracket: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPrimaryAssociatedTypeClauseSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterRightAngleBracket.map(RawSyntax.init), arena: arena).as(RawPrimaryAssociatedTypeClauseSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawSimpleTypeIdentifierSyntax: RawTypeSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = SimpleTypeIdentifierSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .simpleTypeIdentifier
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeName: RawUnexpectedNodesSyntax? = nil,
    name: RawTokenSyntax,
    _ unexpectedBetweenNameAndGenericArgumentClause: RawUnexpectedNodesSyntax? = nil,
    genericArgumentClause: RawGenericArgumentClauseSyntax?,
    _ unexpectedAfterGenericArgumentClause: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .simpleTypeIdentifier, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeName?.raw
      layout[1] = name.raw
      layout[2] = unexpectedBetweenNameAndGenericArgumentClause?.raw
      layout[3] = genericArgumentClause?.raw
      layout[4] = unexpectedAfterGenericArgumentClause?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeName: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeName(_ unexpectedBeforeName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSimpleTypeIdentifierSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeName.map(RawSyntax.init), arena: arena).as(RawSimpleTypeIdentifierSyntax.self)!
  }
  public var name: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withName(_ name: RawTokenSyntax, arena: SyntaxArena) -> RawSimpleTypeIdentifierSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(name), arena: arena).as(RawSimpleTypeIdentifierSyntax.self)!
  }
  public var unexpectedBetweenNameAndGenericArgumentClause: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenNameAndGenericArgumentClause(_ unexpectedBetweenNameAndGenericArgumentClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSimpleTypeIdentifierSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenNameAndGenericArgumentClause.map(RawSyntax.init), arena: arena).as(RawSimpleTypeIdentifierSyntax.self)!
  }
  public var genericArgumentClause: RawGenericArgumentClauseSyntax? {
    layoutView.children[3].map(RawGenericArgumentClauseSyntax.init(raw:))
  }
  public func withGenericArgumentClause(_ genericArgumentClause: RawGenericArgumentClauseSyntax?, arena: SyntaxArena) -> RawSimpleTypeIdentifierSyntax {
    return layoutView.replacingChild(at: 3, with: genericArgumentClause.map(RawSyntax.init), arena: arena).as(RawSimpleTypeIdentifierSyntax.self)!
  }
  public var unexpectedAfterGenericArgumentClause: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterGenericArgumentClause(_ unexpectedAfterGenericArgumentClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawSimpleTypeIdentifierSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterGenericArgumentClause.map(RawSyntax.init), arena: arena).as(RawSimpleTypeIdentifierSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawMemberTypeIdentifierSyntax: RawTypeSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = MemberTypeIdentifierSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .memberTypeIdentifier
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeBaseType: RawUnexpectedNodesSyntax? = nil,
    baseType: RawTypeSyntax,
    _ unexpectedBetweenBaseTypeAndPeriod: RawUnexpectedNodesSyntax? = nil,
    period: RawTokenSyntax,
    _ unexpectedBetweenPeriodAndName: RawUnexpectedNodesSyntax? = nil,
    name: RawTokenSyntax,
    _ unexpectedBetweenNameAndGenericArgumentClause: RawUnexpectedNodesSyntax? = nil,
    genericArgumentClause: RawGenericArgumentClauseSyntax?,
    _ unexpectedAfterGenericArgumentClause: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .memberTypeIdentifier, uninitializedCount: 9, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeBaseType?.raw
      layout[1] = baseType.raw
      layout[2] = unexpectedBetweenBaseTypeAndPeriod?.raw
      layout[3] = period.raw
      layout[4] = unexpectedBetweenPeriodAndName?.raw
      layout[5] = name.raw
      layout[6] = unexpectedBetweenNameAndGenericArgumentClause?.raw
      layout[7] = genericArgumentClause?.raw
      layout[8] = unexpectedAfterGenericArgumentClause?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeBaseType: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeBaseType(_ unexpectedBeforeBaseType: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMemberTypeIdentifierSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeBaseType.map(RawSyntax.init), arena: arena).as(RawMemberTypeIdentifierSyntax.self)!
  }
  public var baseType: RawTypeSyntax {
    layoutView.children[1].map(RawTypeSyntax.init(raw:))!
  }
  public func withBaseType(_ baseType: RawTypeSyntax, arena: SyntaxArena) -> RawMemberTypeIdentifierSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(baseType), arena: arena).as(RawMemberTypeIdentifierSyntax.self)!
  }
  public var unexpectedBetweenBaseTypeAndPeriod: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenBaseTypeAndPeriod(_ unexpectedBetweenBaseTypeAndPeriod: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMemberTypeIdentifierSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenBaseTypeAndPeriod.map(RawSyntax.init), arena: arena).as(RawMemberTypeIdentifierSyntax.self)!
  }
  public var period: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withPeriod(_ period: RawTokenSyntax, arena: SyntaxArena) -> RawMemberTypeIdentifierSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(period), arena: arena).as(RawMemberTypeIdentifierSyntax.self)!
  }
  public var unexpectedBetweenPeriodAndName: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenPeriodAndName(_ unexpectedBetweenPeriodAndName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMemberTypeIdentifierSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenPeriodAndName.map(RawSyntax.init), arena: arena).as(RawMemberTypeIdentifierSyntax.self)!
  }
  public var name: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withName(_ name: RawTokenSyntax, arena: SyntaxArena) -> RawMemberTypeIdentifierSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(name), arena: arena).as(RawMemberTypeIdentifierSyntax.self)!
  }
  public var unexpectedBetweenNameAndGenericArgumentClause: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenNameAndGenericArgumentClause(_ unexpectedBetweenNameAndGenericArgumentClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMemberTypeIdentifierSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenNameAndGenericArgumentClause.map(RawSyntax.init), arena: arena).as(RawMemberTypeIdentifierSyntax.self)!
  }
  public var genericArgumentClause: RawGenericArgumentClauseSyntax? {
    layoutView.children[7].map(RawGenericArgumentClauseSyntax.init(raw:))
  }
  public func withGenericArgumentClause(_ genericArgumentClause: RawGenericArgumentClauseSyntax?, arena: SyntaxArena) -> RawMemberTypeIdentifierSyntax {
    return layoutView.replacingChild(at: 7, with: genericArgumentClause.map(RawSyntax.init), arena: arena).as(RawMemberTypeIdentifierSyntax.self)!
  }
  public var unexpectedAfterGenericArgumentClause: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterGenericArgumentClause(_ unexpectedAfterGenericArgumentClause: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMemberTypeIdentifierSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedAfterGenericArgumentClause.map(RawSyntax.init), arena: arena).as(RawMemberTypeIdentifierSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawClassRestrictionTypeSyntax: RawTypeSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ClassRestrictionTypeSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .classRestrictionType
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeClassKeyword: RawUnexpectedNodesSyntax? = nil,
    classKeyword: RawTokenSyntax,
    _ unexpectedAfterClassKeyword: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .classRestrictionType, uninitializedCount: 3, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeClassKeyword?.raw
      layout[1] = classKeyword.raw
      layout[2] = unexpectedAfterClassKeyword?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeClassKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeClassKeyword(_ unexpectedBeforeClassKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawClassRestrictionTypeSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeClassKeyword.map(RawSyntax.init), arena: arena).as(RawClassRestrictionTypeSyntax.self)!
  }
  public var classKeyword: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withClassKeyword(_ classKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawClassRestrictionTypeSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(classKeyword), arena: arena).as(RawClassRestrictionTypeSyntax.self)!
  }
  public var unexpectedAfterClassKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterClassKeyword(_ unexpectedAfterClassKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawClassRestrictionTypeSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedAfterClassKeyword.map(RawSyntax.init), arena: arena).as(RawClassRestrictionTypeSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawArrayTypeSyntax: RawTypeSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ArrayTypeSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .arrayType
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeLeftSquareBracket: RawUnexpectedNodesSyntax? = nil,
    leftSquareBracket: RawTokenSyntax,
    _ unexpectedBetweenLeftSquareBracketAndElementType: RawUnexpectedNodesSyntax? = nil,
    elementType: RawTypeSyntax,
    _ unexpectedBetweenElementTypeAndRightSquareBracket: RawUnexpectedNodesSyntax? = nil,
    rightSquareBracket: RawTokenSyntax,
    _ unexpectedAfterRightSquareBracket: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .arrayType, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeLeftSquareBracket?.raw
      layout[1] = leftSquareBracket.raw
      layout[2] = unexpectedBetweenLeftSquareBracketAndElementType?.raw
      layout[3] = elementType.raw
      layout[4] = unexpectedBetweenElementTypeAndRightSquareBracket?.raw
      layout[5] = rightSquareBracket.raw
      layout[6] = unexpectedAfterRightSquareBracket?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeLeftSquareBracket: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeLeftSquareBracket(_ unexpectedBeforeLeftSquareBracket: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawArrayTypeSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeLeftSquareBracket.map(RawSyntax.init), arena: arena).as(RawArrayTypeSyntax.self)!
  }
  public var leftSquareBracket: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeftSquareBracket(_ leftSquareBracket: RawTokenSyntax, arena: SyntaxArena) -> RawArrayTypeSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(leftSquareBracket), arena: arena).as(RawArrayTypeSyntax.self)!
  }
  public var unexpectedBetweenLeftSquareBracketAndElementType: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftSquareBracketAndElementType(_ unexpectedBetweenLeftSquareBracketAndElementType: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawArrayTypeSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenLeftSquareBracketAndElementType.map(RawSyntax.init), arena: arena).as(RawArrayTypeSyntax.self)!
  }
  public var elementType: RawTypeSyntax {
    layoutView.children[3].map(RawTypeSyntax.init(raw:))!
  }
  public func withElementType(_ elementType: RawTypeSyntax, arena: SyntaxArena) -> RawArrayTypeSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(elementType), arena: arena).as(RawArrayTypeSyntax.self)!
  }
  public var unexpectedBetweenElementTypeAndRightSquareBracket: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenElementTypeAndRightSquareBracket(_ unexpectedBetweenElementTypeAndRightSquareBracket: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawArrayTypeSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenElementTypeAndRightSquareBracket.map(RawSyntax.init), arena: arena).as(RawArrayTypeSyntax.self)!
  }
  public var rightSquareBracket: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withRightSquareBracket(_ rightSquareBracket: RawTokenSyntax, arena: SyntaxArena) -> RawArrayTypeSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(rightSquareBracket), arena: arena).as(RawArrayTypeSyntax.self)!
  }
  public var unexpectedAfterRightSquareBracket: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightSquareBracket(_ unexpectedAfterRightSquareBracket: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawArrayTypeSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterRightSquareBracket.map(RawSyntax.init), arena: arena).as(RawArrayTypeSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawDictionaryTypeSyntax: RawTypeSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = DictionaryTypeSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .dictionaryType
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeLeftSquareBracket: RawUnexpectedNodesSyntax? = nil,
    leftSquareBracket: RawTokenSyntax,
    _ unexpectedBetweenLeftSquareBracketAndKeyType: RawUnexpectedNodesSyntax? = nil,
    keyType: RawTypeSyntax,
    _ unexpectedBetweenKeyTypeAndColon: RawUnexpectedNodesSyntax? = nil,
    colon: RawTokenSyntax,
    _ unexpectedBetweenColonAndValueType: RawUnexpectedNodesSyntax? = nil,
    valueType: RawTypeSyntax,
    _ unexpectedBetweenValueTypeAndRightSquareBracket: RawUnexpectedNodesSyntax? = nil,
    rightSquareBracket: RawTokenSyntax,
    _ unexpectedAfterRightSquareBracket: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .dictionaryType, uninitializedCount: 11, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeLeftSquareBracket?.raw
      layout[1] = leftSquareBracket.raw
      layout[2] = unexpectedBetweenLeftSquareBracketAndKeyType?.raw
      layout[3] = keyType.raw
      layout[4] = unexpectedBetweenKeyTypeAndColon?.raw
      layout[5] = colon.raw
      layout[6] = unexpectedBetweenColonAndValueType?.raw
      layout[7] = valueType.raw
      layout[8] = unexpectedBetweenValueTypeAndRightSquareBracket?.raw
      layout[9] = rightSquareBracket.raw
      layout[10] = unexpectedAfterRightSquareBracket?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeLeftSquareBracket: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeLeftSquareBracket(_ unexpectedBeforeLeftSquareBracket: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDictionaryTypeSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeLeftSquareBracket.map(RawSyntax.init), arena: arena).as(RawDictionaryTypeSyntax.self)!
  }
  public var leftSquareBracket: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeftSquareBracket(_ leftSquareBracket: RawTokenSyntax, arena: SyntaxArena) -> RawDictionaryTypeSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(leftSquareBracket), arena: arena).as(RawDictionaryTypeSyntax.self)!
  }
  public var unexpectedBetweenLeftSquareBracketAndKeyType: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftSquareBracketAndKeyType(_ unexpectedBetweenLeftSquareBracketAndKeyType: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDictionaryTypeSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenLeftSquareBracketAndKeyType.map(RawSyntax.init), arena: arena).as(RawDictionaryTypeSyntax.self)!
  }
  public var keyType: RawTypeSyntax {
    layoutView.children[3].map(RawTypeSyntax.init(raw:))!
  }
  public func withKeyType(_ keyType: RawTypeSyntax, arena: SyntaxArena) -> RawDictionaryTypeSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(keyType), arena: arena).as(RawDictionaryTypeSyntax.self)!
  }
  public var unexpectedBetweenKeyTypeAndColon: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenKeyTypeAndColon(_ unexpectedBetweenKeyTypeAndColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDictionaryTypeSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenKeyTypeAndColon.map(RawSyntax.init), arena: arena).as(RawDictionaryTypeSyntax.self)!
  }
  public var colon: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withColon(_ colon: RawTokenSyntax, arena: SyntaxArena) -> RawDictionaryTypeSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(colon), arena: arena).as(RawDictionaryTypeSyntax.self)!
  }
  public var unexpectedBetweenColonAndValueType: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenColonAndValueType(_ unexpectedBetweenColonAndValueType: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDictionaryTypeSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenColonAndValueType.map(RawSyntax.init), arena: arena).as(RawDictionaryTypeSyntax.self)!
  }
  public var valueType: RawTypeSyntax {
    layoutView.children[7].map(RawTypeSyntax.init(raw:))!
  }
  public func withValueType(_ valueType: RawTypeSyntax, arena: SyntaxArena) -> RawDictionaryTypeSyntax {
    return layoutView.replacingChild(at: 7, with: RawSyntax(valueType), arena: arena).as(RawDictionaryTypeSyntax.self)!
  }
  public var unexpectedBetweenValueTypeAndRightSquareBracket: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenValueTypeAndRightSquareBracket(_ unexpectedBetweenValueTypeAndRightSquareBracket: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDictionaryTypeSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenValueTypeAndRightSquareBracket.map(RawSyntax.init), arena: arena).as(RawDictionaryTypeSyntax.self)!
  }
  public var rightSquareBracket: RawTokenSyntax {
    layoutView.children[9].map(RawTokenSyntax.init(raw:))!
  }
  public func withRightSquareBracket(_ rightSquareBracket: RawTokenSyntax, arena: SyntaxArena) -> RawDictionaryTypeSyntax {
    return layoutView.replacingChild(at: 9, with: RawSyntax(rightSquareBracket), arena: arena).as(RawDictionaryTypeSyntax.self)!
  }
  public var unexpectedAfterRightSquareBracket: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightSquareBracket(_ unexpectedAfterRightSquareBracket: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawDictionaryTypeSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedAfterRightSquareBracket.map(RawSyntax.init), arena: arena).as(RawDictionaryTypeSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawMetatypeTypeSyntax: RawTypeSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = MetatypeTypeSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .metatypeType
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeBaseType: RawUnexpectedNodesSyntax? = nil,
    baseType: RawTypeSyntax,
    _ unexpectedBetweenBaseTypeAndPeriod: RawUnexpectedNodesSyntax? = nil,
    period: RawTokenSyntax,
    _ unexpectedBetweenPeriodAndTypeOrProtocol: RawUnexpectedNodesSyntax? = nil,
    typeOrProtocol: RawTokenSyntax,
    _ unexpectedAfterTypeOrProtocol: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .metatypeType, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeBaseType?.raw
      layout[1] = baseType.raw
      layout[2] = unexpectedBetweenBaseTypeAndPeriod?.raw
      layout[3] = period.raw
      layout[4] = unexpectedBetweenPeriodAndTypeOrProtocol?.raw
      layout[5] = typeOrProtocol.raw
      layout[6] = unexpectedAfterTypeOrProtocol?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeBaseType: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeBaseType(_ unexpectedBeforeBaseType: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMetatypeTypeSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeBaseType.map(RawSyntax.init), arena: arena).as(RawMetatypeTypeSyntax.self)!
  }
  public var baseType: RawTypeSyntax {
    layoutView.children[1].map(RawTypeSyntax.init(raw:))!
  }
  public func withBaseType(_ baseType: RawTypeSyntax, arena: SyntaxArena) -> RawMetatypeTypeSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(baseType), arena: arena).as(RawMetatypeTypeSyntax.self)!
  }
  public var unexpectedBetweenBaseTypeAndPeriod: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenBaseTypeAndPeriod(_ unexpectedBetweenBaseTypeAndPeriod: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMetatypeTypeSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenBaseTypeAndPeriod.map(RawSyntax.init), arena: arena).as(RawMetatypeTypeSyntax.self)!
  }
  public var period: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withPeriod(_ period: RawTokenSyntax, arena: SyntaxArena) -> RawMetatypeTypeSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(period), arena: arena).as(RawMetatypeTypeSyntax.self)!
  }
  public var unexpectedBetweenPeriodAndTypeOrProtocol: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenPeriodAndTypeOrProtocol(_ unexpectedBetweenPeriodAndTypeOrProtocol: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMetatypeTypeSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenPeriodAndTypeOrProtocol.map(RawSyntax.init), arena: arena).as(RawMetatypeTypeSyntax.self)!
  }
  public var typeOrProtocol: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withTypeOrProtocol(_ typeOrProtocol: RawTokenSyntax, arena: SyntaxArena) -> RawMetatypeTypeSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(typeOrProtocol), arena: arena).as(RawMetatypeTypeSyntax.self)!
  }
  public var unexpectedAfterTypeOrProtocol: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterTypeOrProtocol(_ unexpectedAfterTypeOrProtocol: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawMetatypeTypeSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterTypeOrProtocol.map(RawSyntax.init), arena: arena).as(RawMetatypeTypeSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawOptionalTypeSyntax: RawTypeSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = OptionalTypeSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .optionalType
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeWrappedType: RawUnexpectedNodesSyntax? = nil,
    wrappedType: RawTypeSyntax,
    _ unexpectedBetweenWrappedTypeAndQuestionMark: RawUnexpectedNodesSyntax? = nil,
    questionMark: RawTokenSyntax,
    _ unexpectedAfterQuestionMark: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .optionalType, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeWrappedType?.raw
      layout[1] = wrappedType.raw
      layout[2] = unexpectedBetweenWrappedTypeAndQuestionMark?.raw
      layout[3] = questionMark.raw
      layout[4] = unexpectedAfterQuestionMark?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeWrappedType: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeWrappedType(_ unexpectedBeforeWrappedType: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawOptionalTypeSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeWrappedType.map(RawSyntax.init), arena: arena).as(RawOptionalTypeSyntax.self)!
  }
  public var wrappedType: RawTypeSyntax {
    layoutView.children[1].map(RawTypeSyntax.init(raw:))!
  }
  public func withWrappedType(_ wrappedType: RawTypeSyntax, arena: SyntaxArena) -> RawOptionalTypeSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(wrappedType), arena: arena).as(RawOptionalTypeSyntax.self)!
  }
  public var unexpectedBetweenWrappedTypeAndQuestionMark: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenWrappedTypeAndQuestionMark(_ unexpectedBetweenWrappedTypeAndQuestionMark: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawOptionalTypeSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenWrappedTypeAndQuestionMark.map(RawSyntax.init), arena: arena).as(RawOptionalTypeSyntax.self)!
  }
  public var questionMark: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withQuestionMark(_ questionMark: RawTokenSyntax, arena: SyntaxArena) -> RawOptionalTypeSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(questionMark), arena: arena).as(RawOptionalTypeSyntax.self)!
  }
  public var unexpectedAfterQuestionMark: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterQuestionMark(_ unexpectedAfterQuestionMark: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawOptionalTypeSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterQuestionMark.map(RawSyntax.init), arena: arena).as(RawOptionalTypeSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawConstrainedSugarTypeSyntax: RawTypeSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ConstrainedSugarTypeSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .constrainedSugarType
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeSomeOrAnySpecifier: RawUnexpectedNodesSyntax? = nil,
    someOrAnySpecifier: RawTokenSyntax,
    _ unexpectedBetweenSomeOrAnySpecifierAndBaseType: RawUnexpectedNodesSyntax? = nil,
    baseType: RawTypeSyntax,
    _ unexpectedAfterBaseType: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .constrainedSugarType, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeSomeOrAnySpecifier?.raw
      layout[1] = someOrAnySpecifier.raw
      layout[2] = unexpectedBetweenSomeOrAnySpecifierAndBaseType?.raw
      layout[3] = baseType.raw
      layout[4] = unexpectedAfterBaseType?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeSomeOrAnySpecifier: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeSomeOrAnySpecifier(_ unexpectedBeforeSomeOrAnySpecifier: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawConstrainedSugarTypeSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeSomeOrAnySpecifier.map(RawSyntax.init), arena: arena).as(RawConstrainedSugarTypeSyntax.self)!
  }
  public var someOrAnySpecifier: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withSomeOrAnySpecifier(_ someOrAnySpecifier: RawTokenSyntax, arena: SyntaxArena) -> RawConstrainedSugarTypeSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(someOrAnySpecifier), arena: arena).as(RawConstrainedSugarTypeSyntax.self)!
  }
  public var unexpectedBetweenSomeOrAnySpecifierAndBaseType: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenSomeOrAnySpecifierAndBaseType(_ unexpectedBetweenSomeOrAnySpecifierAndBaseType: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawConstrainedSugarTypeSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenSomeOrAnySpecifierAndBaseType.map(RawSyntax.init), arena: arena).as(RawConstrainedSugarTypeSyntax.self)!
  }
  public var baseType: RawTypeSyntax {
    layoutView.children[3].map(RawTypeSyntax.init(raw:))!
  }
  public func withBaseType(_ baseType: RawTypeSyntax, arena: SyntaxArena) -> RawConstrainedSugarTypeSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(baseType), arena: arena).as(RawConstrainedSugarTypeSyntax.self)!
  }
  public var unexpectedAfterBaseType: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterBaseType(_ unexpectedAfterBaseType: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawConstrainedSugarTypeSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterBaseType.map(RawSyntax.init), arena: arena).as(RawConstrainedSugarTypeSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawImplicitlyUnwrappedOptionalTypeSyntax: RawTypeSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ImplicitlyUnwrappedOptionalTypeSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .implicitlyUnwrappedOptionalType
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeWrappedType: RawUnexpectedNodesSyntax? = nil,
    wrappedType: RawTypeSyntax,
    _ unexpectedBetweenWrappedTypeAndExclamationMark: RawUnexpectedNodesSyntax? = nil,
    exclamationMark: RawTokenSyntax,
    _ unexpectedAfterExclamationMark: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .implicitlyUnwrappedOptionalType, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeWrappedType?.raw
      layout[1] = wrappedType.raw
      layout[2] = unexpectedBetweenWrappedTypeAndExclamationMark?.raw
      layout[3] = exclamationMark.raw
      layout[4] = unexpectedAfterExclamationMark?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeWrappedType: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeWrappedType(_ unexpectedBeforeWrappedType: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawImplicitlyUnwrappedOptionalTypeSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeWrappedType.map(RawSyntax.init), arena: arena).as(RawImplicitlyUnwrappedOptionalTypeSyntax.self)!
  }
  public var wrappedType: RawTypeSyntax {
    layoutView.children[1].map(RawTypeSyntax.init(raw:))!
  }
  public func withWrappedType(_ wrappedType: RawTypeSyntax, arena: SyntaxArena) -> RawImplicitlyUnwrappedOptionalTypeSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(wrappedType), arena: arena).as(RawImplicitlyUnwrappedOptionalTypeSyntax.self)!
  }
  public var unexpectedBetweenWrappedTypeAndExclamationMark: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenWrappedTypeAndExclamationMark(_ unexpectedBetweenWrappedTypeAndExclamationMark: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawImplicitlyUnwrappedOptionalTypeSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenWrappedTypeAndExclamationMark.map(RawSyntax.init), arena: arena).as(RawImplicitlyUnwrappedOptionalTypeSyntax.self)!
  }
  public var exclamationMark: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withExclamationMark(_ exclamationMark: RawTokenSyntax, arena: SyntaxArena) -> RawImplicitlyUnwrappedOptionalTypeSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(exclamationMark), arena: arena).as(RawImplicitlyUnwrappedOptionalTypeSyntax.self)!
  }
  public var unexpectedAfterExclamationMark: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterExclamationMark(_ unexpectedAfterExclamationMark: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawImplicitlyUnwrappedOptionalTypeSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterExclamationMark.map(RawSyntax.init), arena: arena).as(RawImplicitlyUnwrappedOptionalTypeSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawCompositionTypeElementSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = CompositionTypeElementSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .compositionTypeElement
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeType: RawUnexpectedNodesSyntax? = nil,
    type: RawTypeSyntax,
    _ unexpectedBetweenTypeAndAmpersand: RawUnexpectedNodesSyntax? = nil,
    ampersand: RawTokenSyntax?,
    _ unexpectedAfterAmpersand: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .compositionTypeElement, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeType?.raw
      layout[1] = type.raw
      layout[2] = unexpectedBetweenTypeAndAmpersand?.raw
      layout[3] = ampersand?.raw
      layout[4] = unexpectedAfterAmpersand?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeType: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeType(_ unexpectedBeforeType: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawCompositionTypeElementSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeType.map(RawSyntax.init), arena: arena).as(RawCompositionTypeElementSyntax.self)!
  }
  public var type: RawTypeSyntax {
    layoutView.children[1].map(RawTypeSyntax.init(raw:))!
  }
  public func withType(_ type: RawTypeSyntax, arena: SyntaxArena) -> RawCompositionTypeElementSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(type), arena: arena).as(RawCompositionTypeElementSyntax.self)!
  }
  public var unexpectedBetweenTypeAndAmpersand: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenTypeAndAmpersand(_ unexpectedBetweenTypeAndAmpersand: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawCompositionTypeElementSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenTypeAndAmpersand.map(RawSyntax.init), arena: arena).as(RawCompositionTypeElementSyntax.self)!
  }
  public var ampersand: RawTokenSyntax? {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))
  }
  public func withAmpersand(_ ampersand: RawTokenSyntax?, arena: SyntaxArena) -> RawCompositionTypeElementSyntax {
    return layoutView.replacingChild(at: 3, with: ampersand.map(RawSyntax.init), arena: arena).as(RawCompositionTypeElementSyntax.self)!
  }
  public var unexpectedAfterAmpersand: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterAmpersand(_ unexpectedAfterAmpersand: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawCompositionTypeElementSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterAmpersand.map(RawSyntax.init), arena: arena).as(RawCompositionTypeElementSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawCompositionTypeElementListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = CompositionTypeElementListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .compositionTypeElementList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawCompositionTypeElementSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .compositionTypeElementList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawCompositionTypeElementSyntax] {
    layoutView.children.map { RawCompositionTypeElementSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawCompositionTypeSyntax: RawTypeSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = CompositionTypeSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .compositionType
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeElements: RawUnexpectedNodesSyntax? = nil,
    elements: RawCompositionTypeElementListSyntax,
    _ unexpectedAfterElements: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .compositionType, uninitializedCount: 3, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeElements?.raw
      layout[1] = elements.raw
      layout[2] = unexpectedAfterElements?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeElements: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeElements(_ unexpectedBeforeElements: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawCompositionTypeSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeElements.map(RawSyntax.init), arena: arena).as(RawCompositionTypeSyntax.self)!
  }
  public var elements: RawCompositionTypeElementListSyntax {
    layoutView.children[1].map(RawCompositionTypeElementListSyntax.init(raw:))!
  }
  public func withElements(_ elements: RawCompositionTypeElementListSyntax, arena: SyntaxArena) -> RawCompositionTypeSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(elements), arena: arena).as(RawCompositionTypeSyntax.self)!
  }
  public var unexpectedAfterElements: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterElements(_ unexpectedAfterElements: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawCompositionTypeSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedAfterElements.map(RawSyntax.init), arena: arena).as(RawCompositionTypeSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawPackExpansionTypeSyntax: RawTypeSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = PackExpansionTypeSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .packExpansionType
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforePatternType: RawUnexpectedNodesSyntax? = nil,
    patternType: RawTypeSyntax,
    _ unexpectedBetweenPatternTypeAndEllipsis: RawUnexpectedNodesSyntax? = nil,
    ellipsis: RawTokenSyntax,
    _ unexpectedAfterEllipsis: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .packExpansionType, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforePatternType?.raw
      layout[1] = patternType.raw
      layout[2] = unexpectedBetweenPatternTypeAndEllipsis?.raw
      layout[3] = ellipsis.raw
      layout[4] = unexpectedAfterEllipsis?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforePatternType: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforePatternType(_ unexpectedBeforePatternType: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPackExpansionTypeSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforePatternType.map(RawSyntax.init), arena: arena).as(RawPackExpansionTypeSyntax.self)!
  }
  public var patternType: RawTypeSyntax {
    layoutView.children[1].map(RawTypeSyntax.init(raw:))!
  }
  public func withPatternType(_ patternType: RawTypeSyntax, arena: SyntaxArena) -> RawPackExpansionTypeSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(patternType), arena: arena).as(RawPackExpansionTypeSyntax.self)!
  }
  public var unexpectedBetweenPatternTypeAndEllipsis: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenPatternTypeAndEllipsis(_ unexpectedBetweenPatternTypeAndEllipsis: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPackExpansionTypeSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenPatternTypeAndEllipsis.map(RawSyntax.init), arena: arena).as(RawPackExpansionTypeSyntax.self)!
  }
  public var ellipsis: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withEllipsis(_ ellipsis: RawTokenSyntax, arena: SyntaxArena) -> RawPackExpansionTypeSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(ellipsis), arena: arena).as(RawPackExpansionTypeSyntax.self)!
  }
  public var unexpectedAfterEllipsis: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterEllipsis(_ unexpectedAfterEllipsis: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawPackExpansionTypeSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterEllipsis.map(RawSyntax.init), arena: arena).as(RawPackExpansionTypeSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawTupleTypeElementSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = TupleTypeElementSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .tupleTypeElement
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeInOut: RawUnexpectedNodesSyntax? = nil,
    inOut: RawTokenSyntax?,
    _ unexpectedBetweenInOutAndName: RawUnexpectedNodesSyntax? = nil,
    name: RawTokenSyntax?,
    _ unexpectedBetweenNameAndSecondName: RawUnexpectedNodesSyntax? = nil,
    secondName: RawTokenSyntax?,
    _ unexpectedBetweenSecondNameAndColon: RawUnexpectedNodesSyntax? = nil,
    colon: RawTokenSyntax?,
    _ unexpectedBetweenColonAndType: RawUnexpectedNodesSyntax? = nil,
    type: RawTypeSyntax,
    _ unexpectedBetweenTypeAndEllipsis: RawUnexpectedNodesSyntax? = nil,
    ellipsis: RawTokenSyntax?,
    _ unexpectedBetweenEllipsisAndInitializer: RawUnexpectedNodesSyntax? = nil,
    initializer: RawInitializerClauseSyntax?,
    _ unexpectedBetweenInitializerAndTrailingComma: RawUnexpectedNodesSyntax? = nil,
    trailingComma: RawTokenSyntax?,
    _ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .tupleTypeElement, uninitializedCount: 17, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeInOut?.raw
      layout[1] = inOut?.raw
      layout[2] = unexpectedBetweenInOutAndName?.raw
      layout[3] = name?.raw
      layout[4] = unexpectedBetweenNameAndSecondName?.raw
      layout[5] = secondName?.raw
      layout[6] = unexpectedBetweenSecondNameAndColon?.raw
      layout[7] = colon?.raw
      layout[8] = unexpectedBetweenColonAndType?.raw
      layout[9] = type.raw
      layout[10] = unexpectedBetweenTypeAndEllipsis?.raw
      layout[11] = ellipsis?.raw
      layout[12] = unexpectedBetweenEllipsisAndInitializer?.raw
      layout[13] = initializer?.raw
      layout[14] = unexpectedBetweenInitializerAndTrailingComma?.raw
      layout[15] = trailingComma?.raw
      layout[16] = unexpectedAfterTrailingComma?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeInOut: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeInOut(_ unexpectedBeforeInOut: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTupleTypeElementSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeInOut.map(RawSyntax.init), arena: arena).as(RawTupleTypeElementSyntax.self)!
  }
  public var inOut: RawTokenSyntax? {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))
  }
  public func withInOut(_ inOut: RawTokenSyntax?, arena: SyntaxArena) -> RawTupleTypeElementSyntax {
    return layoutView.replacingChild(at: 1, with: inOut.map(RawSyntax.init), arena: arena).as(RawTupleTypeElementSyntax.self)!
  }
  public var unexpectedBetweenInOutAndName: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenInOutAndName(_ unexpectedBetweenInOutAndName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTupleTypeElementSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenInOutAndName.map(RawSyntax.init), arena: arena).as(RawTupleTypeElementSyntax.self)!
  }
  public var name: RawTokenSyntax? {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))
  }
  public func withName(_ name: RawTokenSyntax?, arena: SyntaxArena) -> RawTupleTypeElementSyntax {
    return layoutView.replacingChild(at: 3, with: name.map(RawSyntax.init), arena: arena).as(RawTupleTypeElementSyntax.self)!
  }
  public var unexpectedBetweenNameAndSecondName: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenNameAndSecondName(_ unexpectedBetweenNameAndSecondName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTupleTypeElementSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenNameAndSecondName.map(RawSyntax.init), arena: arena).as(RawTupleTypeElementSyntax.self)!
  }
  public var secondName: RawTokenSyntax? {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))
  }
  public func withSecondName(_ secondName: RawTokenSyntax?, arena: SyntaxArena) -> RawTupleTypeElementSyntax {
    return layoutView.replacingChild(at: 5, with: secondName.map(RawSyntax.init), arena: arena).as(RawTupleTypeElementSyntax.self)!
  }
  public var unexpectedBetweenSecondNameAndColon: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenSecondNameAndColon(_ unexpectedBetweenSecondNameAndColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTupleTypeElementSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenSecondNameAndColon.map(RawSyntax.init), arena: arena).as(RawTupleTypeElementSyntax.self)!
  }
  public var colon: RawTokenSyntax? {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))
  }
  public func withColon(_ colon: RawTokenSyntax?, arena: SyntaxArena) -> RawTupleTypeElementSyntax {
    return layoutView.replacingChild(at: 7, with: colon.map(RawSyntax.init), arena: arena).as(RawTupleTypeElementSyntax.self)!
  }
  public var unexpectedBetweenColonAndType: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenColonAndType(_ unexpectedBetweenColonAndType: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTupleTypeElementSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenColonAndType.map(RawSyntax.init), arena: arena).as(RawTupleTypeElementSyntax.self)!
  }
  public var type: RawTypeSyntax {
    layoutView.children[9].map(RawTypeSyntax.init(raw:))!
  }
  public func withType(_ type: RawTypeSyntax, arena: SyntaxArena) -> RawTupleTypeElementSyntax {
    return layoutView.replacingChild(at: 9, with: RawSyntax(type), arena: arena).as(RawTupleTypeElementSyntax.self)!
  }
  public var unexpectedBetweenTypeAndEllipsis: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenTypeAndEllipsis(_ unexpectedBetweenTypeAndEllipsis: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTupleTypeElementSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedBetweenTypeAndEllipsis.map(RawSyntax.init), arena: arena).as(RawTupleTypeElementSyntax.self)!
  }
  public var ellipsis: RawTokenSyntax? {
    layoutView.children[11].map(RawTokenSyntax.init(raw:))
  }
  public func withEllipsis(_ ellipsis: RawTokenSyntax?, arena: SyntaxArena) -> RawTupleTypeElementSyntax {
    return layoutView.replacingChild(at: 11, with: ellipsis.map(RawSyntax.init), arena: arena).as(RawTupleTypeElementSyntax.self)!
  }
  public var unexpectedBetweenEllipsisAndInitializer: RawUnexpectedNodesSyntax? {
    layoutView.children[12].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenEllipsisAndInitializer(_ unexpectedBetweenEllipsisAndInitializer: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTupleTypeElementSyntax {
    return layoutView.replacingChild(at: 12, with: unexpectedBetweenEllipsisAndInitializer.map(RawSyntax.init), arena: arena).as(RawTupleTypeElementSyntax.self)!
  }
  public var initializer: RawInitializerClauseSyntax? {
    layoutView.children[13].map(RawInitializerClauseSyntax.init(raw:))
  }
  public func withInitializer(_ initializer: RawInitializerClauseSyntax?, arena: SyntaxArena) -> RawTupleTypeElementSyntax {
    return layoutView.replacingChild(at: 13, with: initializer.map(RawSyntax.init), arena: arena).as(RawTupleTypeElementSyntax.self)!
  }
  public var unexpectedBetweenInitializerAndTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[14].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenInitializerAndTrailingComma(_ unexpectedBetweenInitializerAndTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTupleTypeElementSyntax {
    return layoutView.replacingChild(at: 14, with: unexpectedBetweenInitializerAndTrailingComma.map(RawSyntax.init), arena: arena).as(RawTupleTypeElementSyntax.self)!
  }
  public var trailingComma: RawTokenSyntax? {
    layoutView.children[15].map(RawTokenSyntax.init(raw:))
  }
  public func withTrailingComma(_ trailingComma: RawTokenSyntax?, arena: SyntaxArena) -> RawTupleTypeElementSyntax {
    return layoutView.replacingChild(at: 15, with: trailingComma.map(RawSyntax.init), arena: arena).as(RawTupleTypeElementSyntax.self)!
  }
  public var unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[16].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterTrailingComma(_ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTupleTypeElementSyntax {
    return layoutView.replacingChild(at: 16, with: unexpectedAfterTrailingComma.map(RawSyntax.init), arena: arena).as(RawTupleTypeElementSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawTupleTypeElementListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = TupleTypeElementListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .tupleTypeElementList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawTupleTypeElementSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .tupleTypeElementList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawTupleTypeElementSyntax] {
    layoutView.children.map { RawTupleTypeElementSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawTupleTypeSyntax: RawTypeSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = TupleTypeSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .tupleType
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeLeftParen: RawUnexpectedNodesSyntax? = nil,
    leftParen: RawTokenSyntax,
    _ unexpectedBetweenLeftParenAndElements: RawUnexpectedNodesSyntax? = nil,
    elements: RawTupleTypeElementListSyntax,
    _ unexpectedBetweenElementsAndRightParen: RawUnexpectedNodesSyntax? = nil,
    rightParen: RawTokenSyntax,
    _ unexpectedAfterRightParen: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .tupleType, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeLeftParen?.raw
      layout[1] = leftParen.raw
      layout[2] = unexpectedBetweenLeftParenAndElements?.raw
      layout[3] = elements.raw
      layout[4] = unexpectedBetweenElementsAndRightParen?.raw
      layout[5] = rightParen.raw
      layout[6] = unexpectedAfterRightParen?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeLeftParen: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeLeftParen(_ unexpectedBeforeLeftParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTupleTypeSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeLeftParen.map(RawSyntax.init), arena: arena).as(RawTupleTypeSyntax.self)!
  }
  public var leftParen: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeftParen(_ leftParen: RawTokenSyntax, arena: SyntaxArena) -> RawTupleTypeSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(leftParen), arena: arena).as(RawTupleTypeSyntax.self)!
  }
  public var unexpectedBetweenLeftParenAndElements: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftParenAndElements(_ unexpectedBetweenLeftParenAndElements: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTupleTypeSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenLeftParenAndElements.map(RawSyntax.init), arena: arena).as(RawTupleTypeSyntax.self)!
  }
  public var elements: RawTupleTypeElementListSyntax {
    layoutView.children[3].map(RawTupleTypeElementListSyntax.init(raw:))!
  }
  public func withElements(_ elements: RawTupleTypeElementListSyntax, arena: SyntaxArena) -> RawTupleTypeSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(elements), arena: arena).as(RawTupleTypeSyntax.self)!
  }
  public var unexpectedBetweenElementsAndRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenElementsAndRightParen(_ unexpectedBetweenElementsAndRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTupleTypeSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenElementsAndRightParen.map(RawSyntax.init), arena: arena).as(RawTupleTypeSyntax.self)!
  }
  public var rightParen: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withRightParen(_ rightParen: RawTokenSyntax, arena: SyntaxArena) -> RawTupleTypeSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(rightParen), arena: arena).as(RawTupleTypeSyntax.self)!
  }
  public var unexpectedAfterRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightParen(_ unexpectedAfterRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTupleTypeSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterRightParen.map(RawSyntax.init), arena: arena).as(RawTupleTypeSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawFunctionTypeSyntax: RawTypeSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = FunctionTypeSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .functionType
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeLeftParen: RawUnexpectedNodesSyntax? = nil,
    leftParen: RawTokenSyntax,
    _ unexpectedBetweenLeftParenAndArguments: RawUnexpectedNodesSyntax? = nil,
    arguments: RawTupleTypeElementListSyntax,
    _ unexpectedBetweenArgumentsAndRightParen: RawUnexpectedNodesSyntax? = nil,
    rightParen: RawTokenSyntax,
    _ unexpectedBetweenRightParenAndAsyncKeyword: RawUnexpectedNodesSyntax? = nil,
    asyncKeyword: RawTokenSyntax?,
    _ unexpectedBetweenAsyncKeywordAndThrowsOrRethrowsKeyword: RawUnexpectedNodesSyntax? = nil,
    throwsOrRethrowsKeyword: RawTokenSyntax?,
    _ unexpectedBetweenThrowsOrRethrowsKeywordAndArrow: RawUnexpectedNodesSyntax? = nil,
    arrow: RawTokenSyntax,
    _ unexpectedBetweenArrowAndReturnType: RawUnexpectedNodesSyntax? = nil,
    returnType: RawTypeSyntax,
    _ unexpectedAfterReturnType: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .functionType, uninitializedCount: 15, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeLeftParen?.raw
      layout[1] = leftParen.raw
      layout[2] = unexpectedBetweenLeftParenAndArguments?.raw
      layout[3] = arguments.raw
      layout[4] = unexpectedBetweenArgumentsAndRightParen?.raw
      layout[5] = rightParen.raw
      layout[6] = unexpectedBetweenRightParenAndAsyncKeyword?.raw
      layout[7] = asyncKeyword?.raw
      layout[8] = unexpectedBetweenAsyncKeywordAndThrowsOrRethrowsKeyword?.raw
      layout[9] = throwsOrRethrowsKeyword?.raw
      layout[10] = unexpectedBetweenThrowsOrRethrowsKeywordAndArrow?.raw
      layout[11] = arrow.raw
      layout[12] = unexpectedBetweenArrowAndReturnType?.raw
      layout[13] = returnType.raw
      layout[14] = unexpectedAfterReturnType?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeLeftParen: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeLeftParen(_ unexpectedBeforeLeftParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionTypeSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeLeftParen.map(RawSyntax.init), arena: arena).as(RawFunctionTypeSyntax.self)!
  }
  public var leftParen: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeftParen(_ leftParen: RawTokenSyntax, arena: SyntaxArena) -> RawFunctionTypeSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(leftParen), arena: arena).as(RawFunctionTypeSyntax.self)!
  }
  public var unexpectedBetweenLeftParenAndArguments: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftParenAndArguments(_ unexpectedBetweenLeftParenAndArguments: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionTypeSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenLeftParenAndArguments.map(RawSyntax.init), arena: arena).as(RawFunctionTypeSyntax.self)!
  }
  public var arguments: RawTupleTypeElementListSyntax {
    layoutView.children[3].map(RawTupleTypeElementListSyntax.init(raw:))!
  }
  public func withArguments(_ arguments: RawTupleTypeElementListSyntax, arena: SyntaxArena) -> RawFunctionTypeSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(arguments), arena: arena).as(RawFunctionTypeSyntax.self)!
  }
  public var unexpectedBetweenArgumentsAndRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenArgumentsAndRightParen(_ unexpectedBetweenArgumentsAndRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionTypeSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenArgumentsAndRightParen.map(RawSyntax.init), arena: arena).as(RawFunctionTypeSyntax.self)!
  }
  public var rightParen: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withRightParen(_ rightParen: RawTokenSyntax, arena: SyntaxArena) -> RawFunctionTypeSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(rightParen), arena: arena).as(RawFunctionTypeSyntax.self)!
  }
  public var unexpectedBetweenRightParenAndAsyncKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenRightParenAndAsyncKeyword(_ unexpectedBetweenRightParenAndAsyncKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionTypeSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenRightParenAndAsyncKeyword.map(RawSyntax.init), arena: arena).as(RawFunctionTypeSyntax.self)!
  }
  public var asyncKeyword: RawTokenSyntax? {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))
  }
  public func withAsyncKeyword(_ asyncKeyword: RawTokenSyntax?, arena: SyntaxArena) -> RawFunctionTypeSyntax {
    return layoutView.replacingChild(at: 7, with: asyncKeyword.map(RawSyntax.init), arena: arena).as(RawFunctionTypeSyntax.self)!
  }
  public var unexpectedBetweenAsyncKeywordAndThrowsOrRethrowsKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAsyncKeywordAndThrowsOrRethrowsKeyword(_ unexpectedBetweenAsyncKeywordAndThrowsOrRethrowsKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionTypeSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedBetweenAsyncKeywordAndThrowsOrRethrowsKeyword.map(RawSyntax.init), arena: arena).as(RawFunctionTypeSyntax.self)!
  }
  public var throwsOrRethrowsKeyword: RawTokenSyntax? {
    layoutView.children[9].map(RawTokenSyntax.init(raw:))
  }
  public func withThrowsOrRethrowsKeyword(_ throwsOrRethrowsKeyword: RawTokenSyntax?, arena: SyntaxArena) -> RawFunctionTypeSyntax {
    return layoutView.replacingChild(at: 9, with: throwsOrRethrowsKeyword.map(RawSyntax.init), arena: arena).as(RawFunctionTypeSyntax.self)!
  }
  public var unexpectedBetweenThrowsOrRethrowsKeywordAndArrow: RawUnexpectedNodesSyntax? {
    layoutView.children[10].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenThrowsOrRethrowsKeywordAndArrow(_ unexpectedBetweenThrowsOrRethrowsKeywordAndArrow: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionTypeSyntax {
    return layoutView.replacingChild(at: 10, with: unexpectedBetweenThrowsOrRethrowsKeywordAndArrow.map(RawSyntax.init), arena: arena).as(RawFunctionTypeSyntax.self)!
  }
  public var arrow: RawTokenSyntax {
    layoutView.children[11].map(RawTokenSyntax.init(raw:))!
  }
  public func withArrow(_ arrow: RawTokenSyntax, arena: SyntaxArena) -> RawFunctionTypeSyntax {
    return layoutView.replacingChild(at: 11, with: RawSyntax(arrow), arena: arena).as(RawFunctionTypeSyntax.self)!
  }
  public var unexpectedBetweenArrowAndReturnType: RawUnexpectedNodesSyntax? {
    layoutView.children[12].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenArrowAndReturnType(_ unexpectedBetweenArrowAndReturnType: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionTypeSyntax {
    return layoutView.replacingChild(at: 12, with: unexpectedBetweenArrowAndReturnType.map(RawSyntax.init), arena: arena).as(RawFunctionTypeSyntax.self)!
  }
  public var returnType: RawTypeSyntax {
    layoutView.children[13].map(RawTypeSyntax.init(raw:))!
  }
  public func withReturnType(_ returnType: RawTypeSyntax, arena: SyntaxArena) -> RawFunctionTypeSyntax {
    return layoutView.replacingChild(at: 13, with: RawSyntax(returnType), arena: arena).as(RawFunctionTypeSyntax.self)!
  }
  public var unexpectedAfterReturnType: RawUnexpectedNodesSyntax? {
    layoutView.children[14].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterReturnType(_ unexpectedAfterReturnType: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawFunctionTypeSyntax {
    return layoutView.replacingChild(at: 14, with: unexpectedAfterReturnType.map(RawSyntax.init), arena: arena).as(RawFunctionTypeSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawAttributedTypeSyntax: RawTypeSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = AttributedTypeSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .attributedType
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeSpecifier: RawUnexpectedNodesSyntax? = nil,
    specifier: RawTokenSyntax?,
    _ unexpectedBetweenSpecifierAndAttributes: RawUnexpectedNodesSyntax? = nil,
    attributes: RawAttributeListSyntax?,
    _ unexpectedBetweenAttributesAndBaseType: RawUnexpectedNodesSyntax? = nil,
    baseType: RawTypeSyntax,
    _ unexpectedAfterBaseType: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .attributedType, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeSpecifier?.raw
      layout[1] = specifier?.raw
      layout[2] = unexpectedBetweenSpecifierAndAttributes?.raw
      layout[3] = attributes?.raw
      layout[4] = unexpectedBetweenAttributesAndBaseType?.raw
      layout[5] = baseType.raw
      layout[6] = unexpectedAfterBaseType?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeSpecifier: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeSpecifier(_ unexpectedBeforeSpecifier: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAttributedTypeSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeSpecifier.map(RawSyntax.init), arena: arena).as(RawAttributedTypeSyntax.self)!
  }
  public var specifier: RawTokenSyntax? {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))
  }
  public func withSpecifier(_ specifier: RawTokenSyntax?, arena: SyntaxArena) -> RawAttributedTypeSyntax {
    return layoutView.replacingChild(at: 1, with: specifier.map(RawSyntax.init), arena: arena).as(RawAttributedTypeSyntax.self)!
  }
  public var unexpectedBetweenSpecifierAndAttributes: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenSpecifierAndAttributes(_ unexpectedBetweenSpecifierAndAttributes: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAttributedTypeSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenSpecifierAndAttributes.map(RawSyntax.init), arena: arena).as(RawAttributedTypeSyntax.self)!
  }
  public var attributes: RawAttributeListSyntax? {
    layoutView.children[3].map(RawAttributeListSyntax.init(raw:))
  }
  public func withAttributes(_ attributes: RawAttributeListSyntax?, arena: SyntaxArena) -> RawAttributedTypeSyntax {
    return layoutView.replacingChild(at: 3, with: attributes.map(RawSyntax.init), arena: arena).as(RawAttributedTypeSyntax.self)!
  }
  public var unexpectedBetweenAttributesAndBaseType: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAttributesAndBaseType(_ unexpectedBetweenAttributesAndBaseType: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAttributedTypeSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenAttributesAndBaseType.map(RawSyntax.init), arena: arena).as(RawAttributedTypeSyntax.self)!
  }
  public var baseType: RawTypeSyntax {
    layoutView.children[5].map(RawTypeSyntax.init(raw:))!
  }
  public func withBaseType(_ baseType: RawTypeSyntax, arena: SyntaxArena) -> RawAttributedTypeSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(baseType), arena: arena).as(RawAttributedTypeSyntax.self)!
  }
  public var unexpectedAfterBaseType: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterBaseType(_ unexpectedAfterBaseType: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAttributedTypeSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterBaseType.map(RawSyntax.init), arena: arena).as(RawAttributedTypeSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawGenericArgumentListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = GenericArgumentListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .genericArgumentList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawGenericArgumentSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .genericArgumentList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawGenericArgumentSyntax] {
    layoutView.children.map { RawGenericArgumentSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawGenericArgumentSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = GenericArgumentSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .genericArgument
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeArgumentType: RawUnexpectedNodesSyntax? = nil,
    argumentType: RawTypeSyntax,
    _ unexpectedBetweenArgumentTypeAndTrailingComma: RawUnexpectedNodesSyntax? = nil,
    trailingComma: RawTokenSyntax?,
    _ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .genericArgument, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeArgumentType?.raw
      layout[1] = argumentType.raw
      layout[2] = unexpectedBetweenArgumentTypeAndTrailingComma?.raw
      layout[3] = trailingComma?.raw
      layout[4] = unexpectedAfterTrailingComma?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeArgumentType: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeArgumentType(_ unexpectedBeforeArgumentType: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawGenericArgumentSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeArgumentType.map(RawSyntax.init), arena: arena).as(RawGenericArgumentSyntax.self)!
  }
  public var argumentType: RawTypeSyntax {
    layoutView.children[1].map(RawTypeSyntax.init(raw:))!
  }
  public func withArgumentType(_ argumentType: RawTypeSyntax, arena: SyntaxArena) -> RawGenericArgumentSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(argumentType), arena: arena).as(RawGenericArgumentSyntax.self)!
  }
  public var unexpectedBetweenArgumentTypeAndTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenArgumentTypeAndTrailingComma(_ unexpectedBetweenArgumentTypeAndTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawGenericArgumentSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenArgumentTypeAndTrailingComma.map(RawSyntax.init), arena: arena).as(RawGenericArgumentSyntax.self)!
  }
  public var trailingComma: RawTokenSyntax? {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))
  }
  public func withTrailingComma(_ trailingComma: RawTokenSyntax?, arena: SyntaxArena) -> RawGenericArgumentSyntax {
    return layoutView.replacingChild(at: 3, with: trailingComma.map(RawSyntax.init), arena: arena).as(RawGenericArgumentSyntax.self)!
  }
  public var unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterTrailingComma(_ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawGenericArgumentSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterTrailingComma.map(RawSyntax.init), arena: arena).as(RawGenericArgumentSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawGenericArgumentClauseSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = GenericArgumentClauseSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .genericArgumentClause
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeLeftAngleBracket: RawUnexpectedNodesSyntax? = nil,
    leftAngleBracket: RawTokenSyntax,
    _ unexpectedBetweenLeftAngleBracketAndArguments: RawUnexpectedNodesSyntax? = nil,
    arguments: RawGenericArgumentListSyntax,
    _ unexpectedBetweenArgumentsAndRightAngleBracket: RawUnexpectedNodesSyntax? = nil,
    rightAngleBracket: RawTokenSyntax,
    _ unexpectedAfterRightAngleBracket: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .genericArgumentClause, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeLeftAngleBracket?.raw
      layout[1] = leftAngleBracket.raw
      layout[2] = unexpectedBetweenLeftAngleBracketAndArguments?.raw
      layout[3] = arguments.raw
      layout[4] = unexpectedBetweenArgumentsAndRightAngleBracket?.raw
      layout[5] = rightAngleBracket.raw
      layout[6] = unexpectedAfterRightAngleBracket?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeLeftAngleBracket: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeLeftAngleBracket(_ unexpectedBeforeLeftAngleBracket: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawGenericArgumentClauseSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeLeftAngleBracket.map(RawSyntax.init), arena: arena).as(RawGenericArgumentClauseSyntax.self)!
  }
  public var leftAngleBracket: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeftAngleBracket(_ leftAngleBracket: RawTokenSyntax, arena: SyntaxArena) -> RawGenericArgumentClauseSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(leftAngleBracket), arena: arena).as(RawGenericArgumentClauseSyntax.self)!
  }
  public var unexpectedBetweenLeftAngleBracketAndArguments: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftAngleBracketAndArguments(_ unexpectedBetweenLeftAngleBracketAndArguments: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawGenericArgumentClauseSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenLeftAngleBracketAndArguments.map(RawSyntax.init), arena: arena).as(RawGenericArgumentClauseSyntax.self)!
  }
  public var arguments: RawGenericArgumentListSyntax {
    layoutView.children[3].map(RawGenericArgumentListSyntax.init(raw:))!
  }
  public func withArguments(_ arguments: RawGenericArgumentListSyntax, arena: SyntaxArena) -> RawGenericArgumentClauseSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(arguments), arena: arena).as(RawGenericArgumentClauseSyntax.self)!
  }
  public var unexpectedBetweenArgumentsAndRightAngleBracket: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenArgumentsAndRightAngleBracket(_ unexpectedBetweenArgumentsAndRightAngleBracket: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawGenericArgumentClauseSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenArgumentsAndRightAngleBracket.map(RawSyntax.init), arena: arena).as(RawGenericArgumentClauseSyntax.self)!
  }
  public var rightAngleBracket: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withRightAngleBracket(_ rightAngleBracket: RawTokenSyntax, arena: SyntaxArena) -> RawGenericArgumentClauseSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(rightAngleBracket), arena: arena).as(RawGenericArgumentClauseSyntax.self)!
  }
  public var unexpectedAfterRightAngleBracket: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightAngleBracket(_ unexpectedAfterRightAngleBracket: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawGenericArgumentClauseSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterRightAngleBracket.map(RawSyntax.init), arena: arena).as(RawGenericArgumentClauseSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawNamedOpaqueReturnTypeSyntax: RawTypeSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = NamedOpaqueReturnTypeSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .namedOpaqueReturnType
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeGenericParameters: RawUnexpectedNodesSyntax? = nil,
    genericParameters: RawGenericParameterClauseSyntax,
    _ unexpectedBetweenGenericParametersAndBaseType: RawUnexpectedNodesSyntax? = nil,
    baseType: RawTypeSyntax,
    _ unexpectedAfterBaseType: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .namedOpaqueReturnType, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeGenericParameters?.raw
      layout[1] = genericParameters.raw
      layout[2] = unexpectedBetweenGenericParametersAndBaseType?.raw
      layout[3] = baseType.raw
      layout[4] = unexpectedAfterBaseType?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeGenericParameters: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeGenericParameters(_ unexpectedBeforeGenericParameters: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawNamedOpaqueReturnTypeSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeGenericParameters.map(RawSyntax.init), arena: arena).as(RawNamedOpaqueReturnTypeSyntax.self)!
  }
  public var genericParameters: RawGenericParameterClauseSyntax {
    layoutView.children[1].map(RawGenericParameterClauseSyntax.init(raw:))!
  }
  public func withGenericParameters(_ genericParameters: RawGenericParameterClauseSyntax, arena: SyntaxArena) -> RawNamedOpaqueReturnTypeSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(genericParameters), arena: arena).as(RawNamedOpaqueReturnTypeSyntax.self)!
  }
  public var unexpectedBetweenGenericParametersAndBaseType: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenGenericParametersAndBaseType(_ unexpectedBetweenGenericParametersAndBaseType: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawNamedOpaqueReturnTypeSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenGenericParametersAndBaseType.map(RawSyntax.init), arena: arena).as(RawNamedOpaqueReturnTypeSyntax.self)!
  }
  public var baseType: RawTypeSyntax {
    layoutView.children[3].map(RawTypeSyntax.init(raw:))!
  }
  public func withBaseType(_ baseType: RawTypeSyntax, arena: SyntaxArena) -> RawNamedOpaqueReturnTypeSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(baseType), arena: arena).as(RawNamedOpaqueReturnTypeSyntax.self)!
  }
  public var unexpectedAfterBaseType: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterBaseType(_ unexpectedAfterBaseType: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawNamedOpaqueReturnTypeSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterBaseType.map(RawSyntax.init), arena: arena).as(RawNamedOpaqueReturnTypeSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawTypeAnnotationSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = TypeAnnotationSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .typeAnnotation
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeColon: RawUnexpectedNodesSyntax? = nil,
    colon: RawTokenSyntax,
    _ unexpectedBetweenColonAndType: RawUnexpectedNodesSyntax? = nil,
    type: RawTypeSyntax,
    _ unexpectedAfterType: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .typeAnnotation, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeColon?.raw
      layout[1] = colon.raw
      layout[2] = unexpectedBetweenColonAndType?.raw
      layout[3] = type.raw
      layout[4] = unexpectedAfterType?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeColon: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeColon(_ unexpectedBeforeColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTypeAnnotationSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeColon.map(RawSyntax.init), arena: arena).as(RawTypeAnnotationSyntax.self)!
  }
  public var colon: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withColon(_ colon: RawTokenSyntax, arena: SyntaxArena) -> RawTypeAnnotationSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(colon), arena: arena).as(RawTypeAnnotationSyntax.self)!
  }
  public var unexpectedBetweenColonAndType: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenColonAndType(_ unexpectedBetweenColonAndType: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTypeAnnotationSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenColonAndType.map(RawSyntax.init), arena: arena).as(RawTypeAnnotationSyntax.self)!
  }
  public var type: RawTypeSyntax {
    layoutView.children[3].map(RawTypeSyntax.init(raw:))!
  }
  public func withType(_ type: RawTypeSyntax, arena: SyntaxArena) -> RawTypeAnnotationSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(type), arena: arena).as(RawTypeAnnotationSyntax.self)!
  }
  public var unexpectedAfterType: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterType(_ unexpectedAfterType: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTypeAnnotationSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterType.map(RawSyntax.init), arena: arena).as(RawTypeAnnotationSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawEnumCasePatternSyntax: RawPatternSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = EnumCasePatternSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .enumCasePattern
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeType: RawUnexpectedNodesSyntax? = nil,
    type: RawTypeSyntax?,
    _ unexpectedBetweenTypeAndPeriod: RawUnexpectedNodesSyntax? = nil,
    period: RawTokenSyntax,
    _ unexpectedBetweenPeriodAndCaseName: RawUnexpectedNodesSyntax? = nil,
    caseName: RawTokenSyntax,
    _ unexpectedBetweenCaseNameAndAssociatedTuple: RawUnexpectedNodesSyntax? = nil,
    associatedTuple: RawTuplePatternSyntax?,
    _ unexpectedAfterAssociatedTuple: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .enumCasePattern, uninitializedCount: 9, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeType?.raw
      layout[1] = type?.raw
      layout[2] = unexpectedBetweenTypeAndPeriod?.raw
      layout[3] = period.raw
      layout[4] = unexpectedBetweenPeriodAndCaseName?.raw
      layout[5] = caseName.raw
      layout[6] = unexpectedBetweenCaseNameAndAssociatedTuple?.raw
      layout[7] = associatedTuple?.raw
      layout[8] = unexpectedAfterAssociatedTuple?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeType: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeType(_ unexpectedBeforeType: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawEnumCasePatternSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeType.map(RawSyntax.init), arena: arena).as(RawEnumCasePatternSyntax.self)!
  }
  public var type: RawTypeSyntax? {
    layoutView.children[1].map(RawTypeSyntax.init(raw:))
  }
  public func withType(_ type: RawTypeSyntax?, arena: SyntaxArena) -> RawEnumCasePatternSyntax {
    return layoutView.replacingChild(at: 1, with: type.map(RawSyntax.init), arena: arena).as(RawEnumCasePatternSyntax.self)!
  }
  public var unexpectedBetweenTypeAndPeriod: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenTypeAndPeriod(_ unexpectedBetweenTypeAndPeriod: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawEnumCasePatternSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenTypeAndPeriod.map(RawSyntax.init), arena: arena).as(RawEnumCasePatternSyntax.self)!
  }
  public var period: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withPeriod(_ period: RawTokenSyntax, arena: SyntaxArena) -> RawEnumCasePatternSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(period), arena: arena).as(RawEnumCasePatternSyntax.self)!
  }
  public var unexpectedBetweenPeriodAndCaseName: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenPeriodAndCaseName(_ unexpectedBetweenPeriodAndCaseName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawEnumCasePatternSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenPeriodAndCaseName.map(RawSyntax.init), arena: arena).as(RawEnumCasePatternSyntax.self)!
  }
  public var caseName: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withCaseName(_ caseName: RawTokenSyntax, arena: SyntaxArena) -> RawEnumCasePatternSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(caseName), arena: arena).as(RawEnumCasePatternSyntax.self)!
  }
  public var unexpectedBetweenCaseNameAndAssociatedTuple: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenCaseNameAndAssociatedTuple(_ unexpectedBetweenCaseNameAndAssociatedTuple: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawEnumCasePatternSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenCaseNameAndAssociatedTuple.map(RawSyntax.init), arena: arena).as(RawEnumCasePatternSyntax.self)!
  }
  public var associatedTuple: RawTuplePatternSyntax? {
    layoutView.children[7].map(RawTuplePatternSyntax.init(raw:))
  }
  public func withAssociatedTuple(_ associatedTuple: RawTuplePatternSyntax?, arena: SyntaxArena) -> RawEnumCasePatternSyntax {
    return layoutView.replacingChild(at: 7, with: associatedTuple.map(RawSyntax.init), arena: arena).as(RawEnumCasePatternSyntax.self)!
  }
  public var unexpectedAfterAssociatedTuple: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterAssociatedTuple(_ unexpectedAfterAssociatedTuple: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawEnumCasePatternSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedAfterAssociatedTuple.map(RawSyntax.init), arena: arena).as(RawEnumCasePatternSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawIsTypePatternSyntax: RawPatternSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = IsTypePatternSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .isTypePattern
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeIsKeyword: RawUnexpectedNodesSyntax? = nil,
    isKeyword: RawTokenSyntax,
    _ unexpectedBetweenIsKeywordAndType: RawUnexpectedNodesSyntax? = nil,
    type: RawTypeSyntax,
    _ unexpectedAfterType: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .isTypePattern, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeIsKeyword?.raw
      layout[1] = isKeyword.raw
      layout[2] = unexpectedBetweenIsKeywordAndType?.raw
      layout[3] = type.raw
      layout[4] = unexpectedAfterType?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeIsKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeIsKeyword(_ unexpectedBeforeIsKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawIsTypePatternSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeIsKeyword.map(RawSyntax.init), arena: arena).as(RawIsTypePatternSyntax.self)!
  }
  public var isKeyword: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withIsKeyword(_ isKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawIsTypePatternSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(isKeyword), arena: arena).as(RawIsTypePatternSyntax.self)!
  }
  public var unexpectedBetweenIsKeywordAndType: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenIsKeywordAndType(_ unexpectedBetweenIsKeywordAndType: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawIsTypePatternSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenIsKeywordAndType.map(RawSyntax.init), arena: arena).as(RawIsTypePatternSyntax.self)!
  }
  public var type: RawTypeSyntax {
    layoutView.children[3].map(RawTypeSyntax.init(raw:))!
  }
  public func withType(_ type: RawTypeSyntax, arena: SyntaxArena) -> RawIsTypePatternSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(type), arena: arena).as(RawIsTypePatternSyntax.self)!
  }
  public var unexpectedAfterType: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterType(_ unexpectedAfterType: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawIsTypePatternSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterType.map(RawSyntax.init), arena: arena).as(RawIsTypePatternSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawOptionalPatternSyntax: RawPatternSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = OptionalPatternSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .optionalPattern
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeSubPattern: RawUnexpectedNodesSyntax? = nil,
    subPattern: RawPatternSyntax,
    _ unexpectedBetweenSubPatternAndQuestionMark: RawUnexpectedNodesSyntax? = nil,
    questionMark: RawTokenSyntax,
    _ unexpectedAfterQuestionMark: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .optionalPattern, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeSubPattern?.raw
      layout[1] = subPattern.raw
      layout[2] = unexpectedBetweenSubPatternAndQuestionMark?.raw
      layout[3] = questionMark.raw
      layout[4] = unexpectedAfterQuestionMark?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeSubPattern: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeSubPattern(_ unexpectedBeforeSubPattern: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawOptionalPatternSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeSubPattern.map(RawSyntax.init), arena: arena).as(RawOptionalPatternSyntax.self)!
  }
  public var subPattern: RawPatternSyntax {
    layoutView.children[1].map(RawPatternSyntax.init(raw:))!
  }
  public func withSubPattern(_ subPattern: RawPatternSyntax, arena: SyntaxArena) -> RawOptionalPatternSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(subPattern), arena: arena).as(RawOptionalPatternSyntax.self)!
  }
  public var unexpectedBetweenSubPatternAndQuestionMark: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenSubPatternAndQuestionMark(_ unexpectedBetweenSubPatternAndQuestionMark: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawOptionalPatternSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenSubPatternAndQuestionMark.map(RawSyntax.init), arena: arena).as(RawOptionalPatternSyntax.self)!
  }
  public var questionMark: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withQuestionMark(_ questionMark: RawTokenSyntax, arena: SyntaxArena) -> RawOptionalPatternSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(questionMark), arena: arena).as(RawOptionalPatternSyntax.self)!
  }
  public var unexpectedAfterQuestionMark: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterQuestionMark(_ unexpectedAfterQuestionMark: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawOptionalPatternSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterQuestionMark.map(RawSyntax.init), arena: arena).as(RawOptionalPatternSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawIdentifierPatternSyntax: RawPatternSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = IdentifierPatternSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .identifierPattern
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeIdentifier: RawUnexpectedNodesSyntax? = nil,
    identifier: RawTokenSyntax,
    _ unexpectedAfterIdentifier: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .identifierPattern, uninitializedCount: 3, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeIdentifier?.raw
      layout[1] = identifier.raw
      layout[2] = unexpectedAfterIdentifier?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeIdentifier: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeIdentifier(_ unexpectedBeforeIdentifier: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawIdentifierPatternSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeIdentifier.map(RawSyntax.init), arena: arena).as(RawIdentifierPatternSyntax.self)!
  }
  public var identifier: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withIdentifier(_ identifier: RawTokenSyntax, arena: SyntaxArena) -> RawIdentifierPatternSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(identifier), arena: arena).as(RawIdentifierPatternSyntax.self)!
  }
  public var unexpectedAfterIdentifier: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterIdentifier(_ unexpectedAfterIdentifier: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawIdentifierPatternSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedAfterIdentifier.map(RawSyntax.init), arena: arena).as(RawIdentifierPatternSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawAsTypePatternSyntax: RawPatternSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = AsTypePatternSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .asTypePattern
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforePattern: RawUnexpectedNodesSyntax? = nil,
    pattern: RawPatternSyntax,
    _ unexpectedBetweenPatternAndAsKeyword: RawUnexpectedNodesSyntax? = nil,
    asKeyword: RawTokenSyntax,
    _ unexpectedBetweenAsKeywordAndType: RawUnexpectedNodesSyntax? = nil,
    type: RawTypeSyntax,
    _ unexpectedAfterType: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .asTypePattern, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforePattern?.raw
      layout[1] = pattern.raw
      layout[2] = unexpectedBetweenPatternAndAsKeyword?.raw
      layout[3] = asKeyword.raw
      layout[4] = unexpectedBetweenAsKeywordAndType?.raw
      layout[5] = type.raw
      layout[6] = unexpectedAfterType?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforePattern: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforePattern(_ unexpectedBeforePattern: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAsTypePatternSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforePattern.map(RawSyntax.init), arena: arena).as(RawAsTypePatternSyntax.self)!
  }
  public var pattern: RawPatternSyntax {
    layoutView.children[1].map(RawPatternSyntax.init(raw:))!
  }
  public func withPattern(_ pattern: RawPatternSyntax, arena: SyntaxArena) -> RawAsTypePatternSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(pattern), arena: arena).as(RawAsTypePatternSyntax.self)!
  }
  public var unexpectedBetweenPatternAndAsKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenPatternAndAsKeyword(_ unexpectedBetweenPatternAndAsKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAsTypePatternSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenPatternAndAsKeyword.map(RawSyntax.init), arena: arena).as(RawAsTypePatternSyntax.self)!
  }
  public var asKeyword: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withAsKeyword(_ asKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawAsTypePatternSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(asKeyword), arena: arena).as(RawAsTypePatternSyntax.self)!
  }
  public var unexpectedBetweenAsKeywordAndType: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenAsKeywordAndType(_ unexpectedBetweenAsKeywordAndType: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAsTypePatternSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenAsKeywordAndType.map(RawSyntax.init), arena: arena).as(RawAsTypePatternSyntax.self)!
  }
  public var type: RawTypeSyntax {
    layoutView.children[5].map(RawTypeSyntax.init(raw:))!
  }
  public func withType(_ type: RawTypeSyntax, arena: SyntaxArena) -> RawAsTypePatternSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(type), arena: arena).as(RawAsTypePatternSyntax.self)!
  }
  public var unexpectedAfterType: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterType(_ unexpectedAfterType: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAsTypePatternSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterType.map(RawSyntax.init), arena: arena).as(RawAsTypePatternSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawTuplePatternSyntax: RawPatternSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = TuplePatternSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .tuplePattern
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeLeftParen: RawUnexpectedNodesSyntax? = nil,
    leftParen: RawTokenSyntax,
    _ unexpectedBetweenLeftParenAndElements: RawUnexpectedNodesSyntax? = nil,
    elements: RawTuplePatternElementListSyntax,
    _ unexpectedBetweenElementsAndRightParen: RawUnexpectedNodesSyntax? = nil,
    rightParen: RawTokenSyntax,
    _ unexpectedAfterRightParen: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .tuplePattern, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeLeftParen?.raw
      layout[1] = leftParen.raw
      layout[2] = unexpectedBetweenLeftParenAndElements?.raw
      layout[3] = elements.raw
      layout[4] = unexpectedBetweenElementsAndRightParen?.raw
      layout[5] = rightParen.raw
      layout[6] = unexpectedAfterRightParen?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeLeftParen: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeLeftParen(_ unexpectedBeforeLeftParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTuplePatternSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeLeftParen.map(RawSyntax.init), arena: arena).as(RawTuplePatternSyntax.self)!
  }
  public var leftParen: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withLeftParen(_ leftParen: RawTokenSyntax, arena: SyntaxArena) -> RawTuplePatternSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(leftParen), arena: arena).as(RawTuplePatternSyntax.self)!
  }
  public var unexpectedBetweenLeftParenAndElements: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLeftParenAndElements(_ unexpectedBetweenLeftParenAndElements: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTuplePatternSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenLeftParenAndElements.map(RawSyntax.init), arena: arena).as(RawTuplePatternSyntax.self)!
  }
  public var elements: RawTuplePatternElementListSyntax {
    layoutView.children[3].map(RawTuplePatternElementListSyntax.init(raw:))!
  }
  public func withElements(_ elements: RawTuplePatternElementListSyntax, arena: SyntaxArena) -> RawTuplePatternSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(elements), arena: arena).as(RawTuplePatternSyntax.self)!
  }
  public var unexpectedBetweenElementsAndRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenElementsAndRightParen(_ unexpectedBetweenElementsAndRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTuplePatternSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenElementsAndRightParen.map(RawSyntax.init), arena: arena).as(RawTuplePatternSyntax.self)!
  }
  public var rightParen: RawTokenSyntax {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))!
  }
  public func withRightParen(_ rightParen: RawTokenSyntax, arena: SyntaxArena) -> RawTuplePatternSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(rightParen), arena: arena).as(RawTuplePatternSyntax.self)!
  }
  public var unexpectedAfterRightParen: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterRightParen(_ unexpectedAfterRightParen: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTuplePatternSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterRightParen.map(RawSyntax.init), arena: arena).as(RawTuplePatternSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawWildcardPatternSyntax: RawPatternSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = WildcardPatternSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .wildcardPattern
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeWildcard: RawUnexpectedNodesSyntax? = nil,
    wildcard: RawTokenSyntax,
    _ unexpectedBetweenWildcardAndTypeAnnotation: RawUnexpectedNodesSyntax? = nil,
    typeAnnotation: RawTypeAnnotationSyntax?,
    _ unexpectedAfterTypeAnnotation: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .wildcardPattern, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeWildcard?.raw
      layout[1] = wildcard.raw
      layout[2] = unexpectedBetweenWildcardAndTypeAnnotation?.raw
      layout[3] = typeAnnotation?.raw
      layout[4] = unexpectedAfterTypeAnnotation?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeWildcard: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeWildcard(_ unexpectedBeforeWildcard: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawWildcardPatternSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeWildcard.map(RawSyntax.init), arena: arena).as(RawWildcardPatternSyntax.self)!
  }
  public var wildcard: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withWildcard(_ wildcard: RawTokenSyntax, arena: SyntaxArena) -> RawWildcardPatternSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(wildcard), arena: arena).as(RawWildcardPatternSyntax.self)!
  }
  public var unexpectedBetweenWildcardAndTypeAnnotation: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenWildcardAndTypeAnnotation(_ unexpectedBetweenWildcardAndTypeAnnotation: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawWildcardPatternSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenWildcardAndTypeAnnotation.map(RawSyntax.init), arena: arena).as(RawWildcardPatternSyntax.self)!
  }
  public var typeAnnotation: RawTypeAnnotationSyntax? {
    layoutView.children[3].map(RawTypeAnnotationSyntax.init(raw:))
  }
  public func withTypeAnnotation(_ typeAnnotation: RawTypeAnnotationSyntax?, arena: SyntaxArena) -> RawWildcardPatternSyntax {
    return layoutView.replacingChild(at: 3, with: typeAnnotation.map(RawSyntax.init), arena: arena).as(RawWildcardPatternSyntax.self)!
  }
  public var unexpectedAfterTypeAnnotation: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterTypeAnnotation(_ unexpectedAfterTypeAnnotation: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawWildcardPatternSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterTypeAnnotation.map(RawSyntax.init), arena: arena).as(RawWildcardPatternSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawTuplePatternElementSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = TuplePatternElementSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .tuplePatternElement
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeLabelName: RawUnexpectedNodesSyntax? = nil,
    labelName: RawTokenSyntax?,
    _ unexpectedBetweenLabelNameAndLabelColon: RawUnexpectedNodesSyntax? = nil,
    labelColon: RawTokenSyntax?,
    _ unexpectedBetweenLabelColonAndPattern: RawUnexpectedNodesSyntax? = nil,
    pattern: RawPatternSyntax,
    _ unexpectedBetweenPatternAndTrailingComma: RawUnexpectedNodesSyntax? = nil,
    trailingComma: RawTokenSyntax?,
    _ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .tuplePatternElement, uninitializedCount: 9, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeLabelName?.raw
      layout[1] = labelName?.raw
      layout[2] = unexpectedBetweenLabelNameAndLabelColon?.raw
      layout[3] = labelColon?.raw
      layout[4] = unexpectedBetweenLabelColonAndPattern?.raw
      layout[5] = pattern.raw
      layout[6] = unexpectedBetweenPatternAndTrailingComma?.raw
      layout[7] = trailingComma?.raw
      layout[8] = unexpectedAfterTrailingComma?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeLabelName: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeLabelName(_ unexpectedBeforeLabelName: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTuplePatternElementSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeLabelName.map(RawSyntax.init), arena: arena).as(RawTuplePatternElementSyntax.self)!
  }
  public var labelName: RawTokenSyntax? {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))
  }
  public func withLabelName(_ labelName: RawTokenSyntax?, arena: SyntaxArena) -> RawTuplePatternElementSyntax {
    return layoutView.replacingChild(at: 1, with: labelName.map(RawSyntax.init), arena: arena).as(RawTuplePatternElementSyntax.self)!
  }
  public var unexpectedBetweenLabelNameAndLabelColon: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLabelNameAndLabelColon(_ unexpectedBetweenLabelNameAndLabelColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTuplePatternElementSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenLabelNameAndLabelColon.map(RawSyntax.init), arena: arena).as(RawTuplePatternElementSyntax.self)!
  }
  public var labelColon: RawTokenSyntax? {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))
  }
  public func withLabelColon(_ labelColon: RawTokenSyntax?, arena: SyntaxArena) -> RawTuplePatternElementSyntax {
    return layoutView.replacingChild(at: 3, with: labelColon.map(RawSyntax.init), arena: arena).as(RawTuplePatternElementSyntax.self)!
  }
  public var unexpectedBetweenLabelColonAndPattern: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLabelColonAndPattern(_ unexpectedBetweenLabelColonAndPattern: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTuplePatternElementSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenLabelColonAndPattern.map(RawSyntax.init), arena: arena).as(RawTuplePatternElementSyntax.self)!
  }
  public var pattern: RawPatternSyntax {
    layoutView.children[5].map(RawPatternSyntax.init(raw:))!
  }
  public func withPattern(_ pattern: RawPatternSyntax, arena: SyntaxArena) -> RawTuplePatternElementSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(pattern), arena: arena).as(RawTuplePatternElementSyntax.self)!
  }
  public var unexpectedBetweenPatternAndTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenPatternAndTrailingComma(_ unexpectedBetweenPatternAndTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTuplePatternElementSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedBetweenPatternAndTrailingComma.map(RawSyntax.init), arena: arena).as(RawTuplePatternElementSyntax.self)!
  }
  public var trailingComma: RawTokenSyntax? {
    layoutView.children[7].map(RawTokenSyntax.init(raw:))
  }
  public func withTrailingComma(_ trailingComma: RawTokenSyntax?, arena: SyntaxArena) -> RawTuplePatternElementSyntax {
    return layoutView.replacingChild(at: 7, with: trailingComma.map(RawSyntax.init), arena: arena).as(RawTuplePatternElementSyntax.self)!
  }
  public var unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[8].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterTrailingComma(_ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawTuplePatternElementSyntax {
    return layoutView.replacingChild(at: 8, with: unexpectedAfterTrailingComma.map(RawSyntax.init), arena: arena).as(RawTuplePatternElementSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawExpressionPatternSyntax: RawPatternSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ExpressionPatternSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .expressionPattern
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeExpression: RawUnexpectedNodesSyntax? = nil,
    expression: RawExprSyntax,
    _ unexpectedAfterExpression: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .expressionPattern, uninitializedCount: 3, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeExpression?.raw
      layout[1] = expression.raw
      layout[2] = unexpectedAfterExpression?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeExpression: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeExpression(_ unexpectedBeforeExpression: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawExpressionPatternSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeExpression.map(RawSyntax.init), arena: arena).as(RawExpressionPatternSyntax.self)!
  }
  public var expression: RawExprSyntax {
    layoutView.children[1].map(RawExprSyntax.init(raw:))!
  }
  public func withExpression(_ expression: RawExprSyntax, arena: SyntaxArena) -> RawExpressionPatternSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(expression), arena: arena).as(RawExpressionPatternSyntax.self)!
  }
  public var unexpectedAfterExpression: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterExpression(_ unexpectedAfterExpression: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawExpressionPatternSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedAfterExpression.map(RawSyntax.init), arena: arena).as(RawExpressionPatternSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawTuplePatternElementListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = TuplePatternElementListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .tuplePatternElementList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawTuplePatternElementSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .tuplePatternElementList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawTuplePatternElementSyntax] {
    layoutView.children.map { RawTuplePatternElementSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawValueBindingPatternSyntax: RawPatternSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = ValueBindingPatternSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .valueBindingPattern
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeLetOrVarKeyword: RawUnexpectedNodesSyntax? = nil,
    letOrVarKeyword: RawTokenSyntax,
    _ unexpectedBetweenLetOrVarKeywordAndValuePattern: RawUnexpectedNodesSyntax? = nil,
    valuePattern: RawPatternSyntax,
    _ unexpectedAfterValuePattern: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .valueBindingPattern, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeLetOrVarKeyword?.raw
      layout[1] = letOrVarKeyword.raw
      layout[2] = unexpectedBetweenLetOrVarKeywordAndValuePattern?.raw
      layout[3] = valuePattern.raw
      layout[4] = unexpectedAfterValuePattern?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeLetOrVarKeyword: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeLetOrVarKeyword(_ unexpectedBeforeLetOrVarKeyword: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawValueBindingPatternSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeLetOrVarKeyword.map(RawSyntax.init), arena: arena).as(RawValueBindingPatternSyntax.self)!
  }
  public var letOrVarKeyword: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withLetOrVarKeyword(_ letOrVarKeyword: RawTokenSyntax, arena: SyntaxArena) -> RawValueBindingPatternSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(letOrVarKeyword), arena: arena).as(RawValueBindingPatternSyntax.self)!
  }
  public var unexpectedBetweenLetOrVarKeywordAndValuePattern: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLetOrVarKeywordAndValuePattern(_ unexpectedBetweenLetOrVarKeywordAndValuePattern: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawValueBindingPatternSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenLetOrVarKeywordAndValuePattern.map(RawSyntax.init), arena: arena).as(RawValueBindingPatternSyntax.self)!
  }
  public var valuePattern: RawPatternSyntax {
    layoutView.children[3].map(RawPatternSyntax.init(raw:))!
  }
  public func withValuePattern(_ valuePattern: RawPatternSyntax, arena: SyntaxArena) -> RawValueBindingPatternSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(valuePattern), arena: arena).as(RawValueBindingPatternSyntax.self)!
  }
  public var unexpectedAfterValuePattern: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterValuePattern(_ unexpectedAfterValuePattern: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawValueBindingPatternSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterValuePattern.map(RawSyntax.init), arena: arena).as(RawValueBindingPatternSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawAvailabilitySpecListSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = AvailabilitySpecListSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .availabilitySpecList
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(elements: [RawAvailabilityArgumentSyntax], arena: __shared SyntaxArena) {
    let raw = RawSyntax.makeLayout(
      kind: .availabilitySpecList, uninitializedCount: elements.count, arena: arena) { layout in
      guard var ptr = layout.baseAddress else { return }
      for elem in elements {
        ptr.initialize(to: elem.raw)
        ptr += 1
      }
    }
    self.init(raw: raw)
  }

  public var elements: [RawAvailabilityArgumentSyntax] {
    layoutView.children.map { RawAvailabilityArgumentSyntax(raw: $0!) }
  }
}

@_spi(RawSyntax)
public struct RawAvailabilityArgumentSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public enum Entry: RawSyntaxNodeProtocol {
    case `token`(RawTokenSyntax)
    case `availabilityVersionRestriction`(RawAvailabilityVersionRestrictionSyntax)
    case `availabilityLabeledArgument`(RawAvailabilityLabeledArgumentSyntax)
    case `tokenList`(RawTokenListSyntax)

    public static func isKindOf(_ raw: RawSyntax) -> Bool {
      return RawTokenSyntax.isKindOf(raw) || RawAvailabilityVersionRestrictionSyntax.isKindOf(raw) || RawAvailabilityLabeledArgumentSyntax.isKindOf(raw) || RawTokenListSyntax.isKindOf(raw)
    }

    public var raw: RawSyntax {
      switch self {
      case .token(let node): return node.raw
      case .availabilityVersionRestriction(let node): return node.raw
      case .availabilityLabeledArgument(let node): return node.raw
      case .tokenList(let node): return node.raw
      }
    }

    public init?<T>(_ other: T) where T : RawSyntaxNodeProtocol {
      if let node = RawTokenSyntax(other) {
        self = .token(node)
        return
      }
      if let node = RawAvailabilityVersionRestrictionSyntax(other) {
        self = .availabilityVersionRestriction(node)
        return
      }
      if let node = RawAvailabilityLabeledArgumentSyntax(other) {
        self = .availabilityLabeledArgument(node)
        return
      }
      if let node = RawTokenListSyntax(other) {
        self = .tokenList(node)
        return
      }
      return nil
    }
  }

  public typealias SyntaxType = AvailabilityArgumentSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .availabilityArgument
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeEntry: RawUnexpectedNodesSyntax? = nil,
    entry: Entry,
    _ unexpectedBetweenEntryAndTrailingComma: RawUnexpectedNodesSyntax? = nil,
    trailingComma: RawTokenSyntax?,
    _ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .availabilityArgument, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeEntry?.raw
      layout[1] = entry.raw
      layout[2] = unexpectedBetweenEntryAndTrailingComma?.raw
      layout[3] = trailingComma?.raw
      layout[4] = unexpectedAfterTrailingComma?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeEntry: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeEntry(_ unexpectedBeforeEntry: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAvailabilityArgumentSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeEntry.map(RawSyntax.init), arena: arena).as(RawAvailabilityArgumentSyntax.self)!
  }
  public var entry: RawSyntax {
    layoutView.children[1]!
  }
  public func withEntry(_ entry: RawSyntax, arena: SyntaxArena) -> RawAvailabilityArgumentSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(entry), arena: arena).as(RawAvailabilityArgumentSyntax.self)!
  }
  public var unexpectedBetweenEntryAndTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenEntryAndTrailingComma(_ unexpectedBetweenEntryAndTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAvailabilityArgumentSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenEntryAndTrailingComma.map(RawSyntax.init), arena: arena).as(RawAvailabilityArgumentSyntax.self)!
  }
  public var trailingComma: RawTokenSyntax? {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))
  }
  public func withTrailingComma(_ trailingComma: RawTokenSyntax?, arena: SyntaxArena) -> RawAvailabilityArgumentSyntax {
    return layoutView.replacingChild(at: 3, with: trailingComma.map(RawSyntax.init), arena: arena).as(RawAvailabilityArgumentSyntax.self)!
  }
  public var unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterTrailingComma(_ unexpectedAfterTrailingComma: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAvailabilityArgumentSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterTrailingComma.map(RawSyntax.init), arena: arena).as(RawAvailabilityArgumentSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawAvailabilityLabeledArgumentSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public enum Value: RawSyntaxNodeProtocol {
    case `string`(RawTokenSyntax)
    case `version`(RawVersionTupleSyntax)

    public static func isKindOf(_ raw: RawSyntax) -> Bool {
      return RawTokenSyntax.isKindOf(raw) || RawVersionTupleSyntax.isKindOf(raw)
    }

    public var raw: RawSyntax {
      switch self {
      case .string(let node): return node.raw
      case .version(let node): return node.raw
      }
    }

    public init?<T>(_ other: T) where T : RawSyntaxNodeProtocol {
      if let node = RawTokenSyntax(other) {
        self = .string(node)
        return
      }
      if let node = RawVersionTupleSyntax(other) {
        self = .version(node)
        return
      }
      return nil
    }
  }

  public typealias SyntaxType = AvailabilityLabeledArgumentSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .availabilityLabeledArgument
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeLabel: RawUnexpectedNodesSyntax? = nil,
    label: RawTokenSyntax,
    _ unexpectedBetweenLabelAndColon: RawUnexpectedNodesSyntax? = nil,
    colon: RawTokenSyntax,
    _ unexpectedBetweenColonAndValue: RawUnexpectedNodesSyntax? = nil,
    value: Value,
    _ unexpectedAfterValue: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .availabilityLabeledArgument, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeLabel?.raw
      layout[1] = label.raw
      layout[2] = unexpectedBetweenLabelAndColon?.raw
      layout[3] = colon.raw
      layout[4] = unexpectedBetweenColonAndValue?.raw
      layout[5] = value.raw
      layout[6] = unexpectedAfterValue?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeLabel: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeLabel(_ unexpectedBeforeLabel: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAvailabilityLabeledArgumentSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeLabel.map(RawSyntax.init), arena: arena).as(RawAvailabilityLabeledArgumentSyntax.self)!
  }
  public var label: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withLabel(_ label: RawTokenSyntax, arena: SyntaxArena) -> RawAvailabilityLabeledArgumentSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(label), arena: arena).as(RawAvailabilityLabeledArgumentSyntax.self)!
  }
  public var unexpectedBetweenLabelAndColon: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenLabelAndColon(_ unexpectedBetweenLabelAndColon: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAvailabilityLabeledArgumentSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenLabelAndColon.map(RawSyntax.init), arena: arena).as(RawAvailabilityLabeledArgumentSyntax.self)!
  }
  public var colon: RawTokenSyntax {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))!
  }
  public func withColon(_ colon: RawTokenSyntax, arena: SyntaxArena) -> RawAvailabilityLabeledArgumentSyntax {
    return layoutView.replacingChild(at: 3, with: RawSyntax(colon), arena: arena).as(RawAvailabilityLabeledArgumentSyntax.self)!
  }
  public var unexpectedBetweenColonAndValue: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenColonAndValue(_ unexpectedBetweenColonAndValue: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAvailabilityLabeledArgumentSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenColonAndValue.map(RawSyntax.init), arena: arena).as(RawAvailabilityLabeledArgumentSyntax.self)!
  }
  public var value: RawSyntax {
    layoutView.children[5]!
  }
  public func withValue(_ value: RawSyntax, arena: SyntaxArena) -> RawAvailabilityLabeledArgumentSyntax {
    return layoutView.replacingChild(at: 5, with: RawSyntax(value), arena: arena).as(RawAvailabilityLabeledArgumentSyntax.self)!
  }
  public var unexpectedAfterValue: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterValue(_ unexpectedAfterValue: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAvailabilityLabeledArgumentSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterValue.map(RawSyntax.init), arena: arena).as(RawAvailabilityLabeledArgumentSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawAvailabilityVersionRestrictionSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = AvailabilityVersionRestrictionSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .availabilityVersionRestriction
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforePlatform: RawUnexpectedNodesSyntax? = nil,
    platform: RawTokenSyntax,
    _ unexpectedBetweenPlatformAndVersion: RawUnexpectedNodesSyntax? = nil,
    version: RawVersionTupleSyntax?,
    _ unexpectedAfterVersion: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .availabilityVersionRestriction, uninitializedCount: 5, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforePlatform?.raw
      layout[1] = platform.raw
      layout[2] = unexpectedBetweenPlatformAndVersion?.raw
      layout[3] = version?.raw
      layout[4] = unexpectedAfterVersion?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforePlatform: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforePlatform(_ unexpectedBeforePlatform: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAvailabilityVersionRestrictionSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforePlatform.map(RawSyntax.init), arena: arena).as(RawAvailabilityVersionRestrictionSyntax.self)!
  }
  public var platform: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withPlatform(_ platform: RawTokenSyntax, arena: SyntaxArena) -> RawAvailabilityVersionRestrictionSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(platform), arena: arena).as(RawAvailabilityVersionRestrictionSyntax.self)!
  }
  public var unexpectedBetweenPlatformAndVersion: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenPlatformAndVersion(_ unexpectedBetweenPlatformAndVersion: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAvailabilityVersionRestrictionSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenPlatformAndVersion.map(RawSyntax.init), arena: arena).as(RawAvailabilityVersionRestrictionSyntax.self)!
  }
  public var version: RawVersionTupleSyntax? {
    layoutView.children[3].map(RawVersionTupleSyntax.init(raw:))
  }
  public func withVersion(_ version: RawVersionTupleSyntax?, arena: SyntaxArena) -> RawAvailabilityVersionRestrictionSyntax {
    return layoutView.replacingChild(at: 3, with: version.map(RawSyntax.init), arena: arena).as(RawAvailabilityVersionRestrictionSyntax.self)!
  }
  public var unexpectedAfterVersion: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterVersion(_ unexpectedAfterVersion: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawAvailabilityVersionRestrictionSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedAfterVersion.map(RawSyntax.init), arena: arena).as(RawAvailabilityVersionRestrictionSyntax.self)!
  }
}

@_spi(RawSyntax)
public struct RawVersionTupleSyntax: RawSyntaxNodeProtocol, RawSyntaxToSyntax {
  public typealias SyntaxType = VersionTupleSyntax

  @_spi(RawSyntax)
  public var layoutView: RawSyntaxLayoutView {
    return raw.layoutView!
  }

  public static func isKindOf(_ raw: RawSyntax) -> Bool {
    return raw.kind == .versionTuple
  }

  public var raw: RawSyntax
  init(raw: RawSyntax) {
    assert(Self.isKindOf(raw))
    self.raw = raw
  }

  public init?<Node: RawSyntaxNodeProtocol>(_ other: Node) {
    guard Self.isKindOf(other.raw) else { return nil }
    self.init(raw: other.raw)
  }

  public init(
    _ unexpectedBeforeMajorMinor: RawUnexpectedNodesSyntax? = nil,
    majorMinor: RawTokenSyntax,
    _ unexpectedBetweenMajorMinorAndPatchPeriod: RawUnexpectedNodesSyntax? = nil,
    patchPeriod: RawTokenSyntax?,
    _ unexpectedBetweenPatchPeriodAndPatchVersion: RawUnexpectedNodesSyntax? = nil,
    patchVersion: RawTokenSyntax?,
    _ unexpectedAfterPatchVersion: RawUnexpectedNodesSyntax? = nil,
    arena: __shared SyntaxArena
  ) {
    let raw = RawSyntax.makeLayout(
      kind: .versionTuple, uninitializedCount: 7, arena: arena) { layout in
      layout.initialize(repeating: nil)
      layout[0] = unexpectedBeforeMajorMinor?.raw
      layout[1] = majorMinor.raw
      layout[2] = unexpectedBetweenMajorMinorAndPatchPeriod?.raw
      layout[3] = patchPeriod?.raw
      layout[4] = unexpectedBetweenPatchPeriodAndPatchVersion?.raw
      layout[5] = patchVersion?.raw
      layout[6] = unexpectedAfterPatchVersion?.raw
    }
    self.init(raw: raw)
  }

  public var unexpectedBeforeMajorMinor: RawUnexpectedNodesSyntax? {
    layoutView.children[0].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBeforeMajorMinor(_ unexpectedBeforeMajorMinor: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawVersionTupleSyntax {
    return layoutView.replacingChild(at: 0, with: unexpectedBeforeMajorMinor.map(RawSyntax.init), arena: arena).as(RawVersionTupleSyntax.self)!
  }
  public var majorMinor: RawTokenSyntax {
    layoutView.children[1].map(RawTokenSyntax.init(raw:))!
  }
  public func withMajorMinor(_ majorMinor: RawTokenSyntax, arena: SyntaxArena) -> RawVersionTupleSyntax {
    return layoutView.replacingChild(at: 1, with: RawSyntax(majorMinor), arena: arena).as(RawVersionTupleSyntax.self)!
  }
  public var unexpectedBetweenMajorMinorAndPatchPeriod: RawUnexpectedNodesSyntax? {
    layoutView.children[2].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenMajorMinorAndPatchPeriod(_ unexpectedBetweenMajorMinorAndPatchPeriod: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawVersionTupleSyntax {
    return layoutView.replacingChild(at: 2, with: unexpectedBetweenMajorMinorAndPatchPeriod.map(RawSyntax.init), arena: arena).as(RawVersionTupleSyntax.self)!
  }
  public var patchPeriod: RawTokenSyntax? {
    layoutView.children[3].map(RawTokenSyntax.init(raw:))
  }
  public func withPatchPeriod(_ patchPeriod: RawTokenSyntax?, arena: SyntaxArena) -> RawVersionTupleSyntax {
    return layoutView.replacingChild(at: 3, with: patchPeriod.map(RawSyntax.init), arena: arena).as(RawVersionTupleSyntax.self)!
  }
  public var unexpectedBetweenPatchPeriodAndPatchVersion: RawUnexpectedNodesSyntax? {
    layoutView.children[4].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedBetweenPatchPeriodAndPatchVersion(_ unexpectedBetweenPatchPeriodAndPatchVersion: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawVersionTupleSyntax {
    return layoutView.replacingChild(at: 4, with: unexpectedBetweenPatchPeriodAndPatchVersion.map(RawSyntax.init), arena: arena).as(RawVersionTupleSyntax.self)!
  }
  public var patchVersion: RawTokenSyntax? {
    layoutView.children[5].map(RawTokenSyntax.init(raw:))
  }
  public func withPatchVersion(_ patchVersion: RawTokenSyntax?, arena: SyntaxArena) -> RawVersionTupleSyntax {
    return layoutView.replacingChild(at: 5, with: patchVersion.map(RawSyntax.init), arena: arena).as(RawVersionTupleSyntax.self)!
  }
  public var unexpectedAfterPatchVersion: RawUnexpectedNodesSyntax? {
    layoutView.children[6].map(RawUnexpectedNodesSyntax.init(raw:))
  }
  public func withUnexpectedAfterPatchVersion(_ unexpectedAfterPatchVersion: RawUnexpectedNodesSyntax?, arena: SyntaxArena) -> RawVersionTupleSyntax {
    return layoutView.replacingChild(at: 6, with: unexpectedAfterPatchVersion.map(RawSyntax.init), arena: arena).as(RawVersionTupleSyntax.self)!
  }
}
